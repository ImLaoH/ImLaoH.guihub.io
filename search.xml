<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JZOffer-II-031</title>
      <link href="/2022/06/06/JZOffer-II-031/"/>
      <url>/2022/06/06/JZOffer-II-031/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-II-31-最近最少使用缓存"><a href="#剑指-Offer-II-31-最近最少使用缓存" class="headerlink" title=" 剑指 Offer II 31. 最近最少使用缓存"></a><h2> 剑指 Offer II 31. 最近最少使用缓存</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" title="剑指 Offer 62. 圆圈中最后剩下的数字">剑指 Offer 62. 圆圈中最后剩下的数字</a></li></ul><p>运用所掌握的数据结构，设计和实现一个  <em>LRU (Least Recently Used，最近最少使用) 缓存机制</em> 。</p><p>实现 <code>LRUCache</code> 类：</p><ul><li><code>LRUCache(int capacity)</code> 以正整数作为容量 <code>capacity</code> 初始化 <code>LRU</code> 缓存</li><li><code>int get(int key)</code> 如果关键字 <code>key</code> 存在于缓存中，则返回关键字的值，否则返回 <code>-1</code> 。</li><li><code>void put(int key, int value)</code> 如果关键字已经存在，则变更其数据值；如果关键字不存在，则插入该组「关键字-值」。当缓存容量达到上限时，它应该在写入新数据之前删除最久未使用的数据值，从而为新的数据值留出空间。</li></ul><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  [“LRUCache”, “put”, “put”, “get”, “put”, “get”, “put”, “get”, “get”, “get”]<br>[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]<br><strong>输出:</strong>  [null, null, null, 1, null, -1, null, -1, 3, 4]<br><strong>解释:</strong><br>LRUCache lRUCache = new LRUCache(2);<br>lRUCache.put(1, 1); // 缓存是 {1=1}<br>lRUCache.put(2, 2); // 缓存是 {1=1, 2=2}<br>lRUCache.get(1);    // 返回 1<br>lRUCache.put(3, 3); // 该操作会使得关键字 2 作废，缓存是 {1=1, 3=3}<br>lRUCache.get(2);    // 返回 -1 (未找到)<br>lRUCache.put(4, 4); // 该操作会使得关键字 1 作废，缓存是 {4=4, 3=3}<br>lRUCache.get(1);    // 返回 -1 (未找到)<br>lRUCache.get(3);    // 返回 3<br>lRUCache.get(4);    // 返回 4</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;用一个双向链表即可实现删除、插入的复杂度为<code>O(1)</code>，为实现查找的时间复杂度也为<code>O(1)</code>（链表的查找为<code>O(n)</code>, <code>n</code>为节点数）, 则添加一个哈希表来实现<code>key</code>与链表节点位置的映射。<br>&emsp;&emsp;因此，调用<code>put</code>的时候就先查找当前的<code>key</code>是否存在于哈希表中，若不存在说明需要插入新的节点，这时候需要考虑当前链表中的节点数，这个可以用一个全局变量<code>size</code>来记录，而容量为<code>cap</code>，当需要插入新的节点，而<code>size==cap</code>时，则需要将链表尾的节点删掉，然后将新的节点加到链表头；否则，直接将新的节点加到链表头即可。而当当前的<code>key</code>已经存在时，则通过哈希映射找到对应的节点，并将该节点的<code>val</code>值更新为输入量<code>value</code>,并将该节点移到链表头。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">,</span> val<span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _val<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">val</span><span class="token punctuation">(</span>_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> dummyHead<span class="token punctuation">,</span> <span class="token operator">*</span>dummyTail<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>   <span class="token comment">// 当前链表节点数</span>    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>    <span class="token comment">// LRU容量</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 初始节点数为0</span>        dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 虚拟头结点</span>        dummyTail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 虚拟尾节点</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> dummyTail<span class="token punctuation">;</span>        dummyTail<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>                         <span class="token comment">// 初始化容量</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 通过哈希查找是否已经存在该key</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 不存在返回-1</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 存在，通过哈希映射查找节点位置</span>        <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> it <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 将节点从该位置取出(修改其前后节点指向)</span>        it<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> it<span class="token operator">-></span>next<span class="token punctuation">;</span>        it<span class="token operator">-></span>next<span class="token operator">-></span>prev<span class="token operator">=</span> it<span class="token operator">-></span>prev<span class="token punctuation">;</span>        <span class="token comment">// 将节点移动到链表头</span>        it<span class="token operator">-></span>next <span class="token operator">=</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> it<span class="token punctuation">;</span>        it<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> it<span class="token punctuation">;</span>        <span class="token keyword">return</span> it<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// key已经存在于哈希表中</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> it <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 更新数据</span>            it<span class="token operator">-></span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token comment">// 将节点从该位置取出(修改其前后节点指向)</span>            it<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> it<span class="token operator">-></span>next<span class="token punctuation">;</span>            it<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> it<span class="token operator">-></span>prev<span class="token punctuation">;</span>            <span class="token comment">// 将节点移动到链表头</span>            it<span class="token operator">-></span>next <span class="token operator">=</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span>            dummyHead<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> it<span class="token punctuation">;</span>            it<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>            dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> it<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// key不存在</span>        <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 判断是否容量已经满了</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 满了，需要将链表尾删去</span>            <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> tmpNode <span class="token operator">=</span> dummyTail<span class="token operator">-></span>prev<span class="token punctuation">;</span>            <span class="token comment">// 并将该节点的key从哈希表中删除</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>tmpNode<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 将该节点从链表中取出(修改其前后节点指向)</span>            tmpNode<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> tmpNode<span class="token operator">-></span>next<span class="token punctuation">;</span>            tmpNode<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> tmpNode<span class="token operator">-></span>prev<span class="token punctuation">;</span>            <span class="token keyword">delete</span> tmpNode<span class="token punctuation">;</span>     <span class="token comment">// 防止内存泄漏</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>             <span class="token comment">// 删掉一个节点，节点数-1</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 插入新节点到链表头</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        newNode<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token comment">// 添加到哈希表中</span>        m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>                 <span class="token comment">// 插入一个新节点，节点数+1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;由于<code>put</code>中存在将节点移到链表头，<code>get</code>同样存在这个操作，可以将这个操作封装为一个函数<code>moveToHead()</code>，而节点移到链表头其实可以看作将该节点删除后再将节点插到链表头，<code>put</code>中也存在删除节点的操作，因而可以进一步封装一个函数<code>remove()</code>,因此：<code>moveToHead() = remove() + addToHead()</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">,</span> val<span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>next<span class="token punctuation">,</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token keyword">int</span> _key<span class="token punctuation">,</span> <span class="token keyword">int</span> _val<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">key</span><span class="token punctuation">(</span>_key<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">val</span><span class="token punctuation">(</span>_val<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">prev</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">LRUCache</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> dummyHead<span class="token punctuation">,</span> <span class="token operator">*</span>dummyTail<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">int</span> cap<span class="token punctuation">;</span> <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">LRUCache</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyTail <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> dummyTail<span class="token punctuation">;</span>        dummyTail<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        cap <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> it <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">moveToHead</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> it<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> it <span class="token operator">=</span> m<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            it<span class="token operator">-></span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> cap<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> tmpNode <span class="token operator">=</span> dummyTail<span class="token operator">-></span>prev<span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>tmpNode<span class="token operator">-></span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">remove</span><span class="token punctuation">(</span>tmpNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">delete</span> tmpNode<span class="token punctuation">;</span>            size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        size<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        node<span class="token operator">-></span>prev<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token punctuation">;</span>        node<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> node<span class="token operator">-></span>prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">addToHead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token operator">-></span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">moveToHead</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">remove</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">addToHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2022/06/05/KMP/"/>
      <url>/2022/06/05/KMP/</url>
      
        <content type="html"><![CDATA[<h1 id="前缀函数"><a href="#前缀函数" class="headerlink" title=" 前缀函数"></a><h2> 前缀函数</h2></h1><h1 id="1-概述"><a href="#1-概述" class="headerlink" title=" 1 概述"></a><h3> 1 概述</h3></h1><p>&emsp;&emsp;前缀指字符串 <code>str</code> 中由起始位到某一位结束的子串，即前缀<code>prefix(str, i) = s[0,...,i]</code>。真前缀则是不包括当前位的字符。</p><p>&emsp;&emsp;后缀是由字符串<code>str</code> 中某一位到串尾的子串，与真前缀一样，真后缀同样不包括当前位的字符。</p><h1 id="2-前缀函数"><a href="#2-前缀函数" class="headerlink" title=" 2 前缀函数"></a><h3> 2 前缀函数</h3></h1><p>&emsp;&emsp;给定一个长度为 <code>n</code> 的字符串 ，其 <strong>前缀函数</strong> 被定义为一个长度为 <code>n</code> 的数组 $\pi$。 其中 $\pi$[i] 的定义是：</p><ol><li>如果子串 <code>s[0, 1, ..., i]</code> 有一对相等的真前缀 <code>s[0, ..., k-1]</code> 和真后缀<code>s[i-(k-1), ..., i]</code> , 那么 $\pi$[i] 就是这个真前缀的长度；如果有多对相等的真前缀和真后缀，则 $\pi$[i] 为这些子串中的最长长度。</li><li>如果没有相等的真前缀和真后缀，则 $\pi$[i] 定义为 <code>0</code> .</li></ol><blockquote><p>如字符串<code>str = &quot;abcabcd&quot;</code> , 则其前缀函数为：<code>&quot;prefix = [0, 0, 0, 1, 2, 3, 0]&quot;</code>.<br>而字符串<code>str1 = &quot;aabaaab&quot;</code> 的前缀函数则为：<code>prefix = [0, 1, 0, 1, 2, 2, 3]</code>.</p></blockquote><h1 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title=" 3 代码实现"></a><h3> 3 代码实现</h3></h1><ul><li>求取前缀函数的朴素实现：</li></ul><p>&emsp;&emsp;首先申请一个容量等于字符串长度的 <code>vector</code> 并初始化为0, 从下标为 <code>1</code> 开始对字符串进行遍历(前缀函数规定是当前子串中那对最长的相等的真前缀和真后缀的长度，而下标为 <code>0</code> 的子串没有不同时存在真前缀和真后缀，因而为 <code>0</code>),  <strong>内循环中 <code>j</code> 从最大真前缀长度开始</strong> ，遇到有相等的真前缀和真后缀则直接对前缀函数对应位赋值并进行下一个子串的计算。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">prefix_fn</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时算法的时间复杂度为 O($n^3$).</p></blockquote><ul><li>优化1：</li></ul><p>易知：当移动到下一位置时，前缀或加 <code>1</code> , 或不变，或减少。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">prefix_fn</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//只有这里进行修改</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时的时间复杂度为 O($n^2$).</p></blockquote><ul><li>优化2：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">prefix_fn</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> j <span class="token operator">=</span> res<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>j<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>此时的时间复杂度为 O($n$).</p></blockquote><h1 id="4-应用：KMP算法"><a href="#4-应用：KMP算法" class="headerlink" title=" 4 应用：KMP算法"></a><h3> 4 应用：KMP算法</h3></h1><p>考虑目标字符串 <code>ptr</code> : <code>ababaca</code>. 字符串长度是<code>7</code>，所以<code>next[0]</code>，<code>next[1]</code>，<code>next[2]</code>，<code>next[3]</code>，<code>next[4]</code>，<code>next[5]</code>，<code>next[6]</code>分别计算的是<code>a</code>，<code>ab</code>，<code>aba</code>，<code>abab</code>，<code>ababa</code>，<code>ababac</code>，<code>ababaca</code>的相同的最长前缀和最长后缀的长度。由于<code>a</code>，<code>ab</code>，<code>aba</code>，<code>abab</code>，<code>ababa</code>，<code>ababac</code>，<code>ababaca</code>的相同的最长前缀和最长后缀是<code>“”</code>，<code>“”</code>，<code>“a”</code>，<code>“ab”</code>，<code>“aba”</code>，<code>“”</code>，<code>“a”</code>,所以<code>next</code>数组的值是<code>[-1,-1,0,1,2,-1,0]</code>，这里<code>-1</code>表示不存在，<code>0</code>表示存在长度为<code>1</code>，<code>2</code>表示存在长度为<code>3</code>。这是为了和代码相对应。</p><ul><li>求<code>next</code>数组</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNext</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//next[0]初始化为-1，-1表示不存在相同的最大前缀和最大后缀</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//k初始化为-1</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>str<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果下一个不同，那么k就变成next[k]，注意next[k]是小于k的，无论k取任何值。</span>            k <span class="token operator">=</span> res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//往前回溯</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>k<span class="token punctuation">;</span>    <span class="token comment">//如果相同，k++</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token comment">//这个是把算的k的值（就是相同的最大前缀和最大后缀长）赋给next[q]    </span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>KMP</code>算法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNext</span><span class="token punctuation">(</span>string pattern<span class="token punctuation">,</span> string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token function">calNext</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> pattern<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//pattern和str不匹配，且k>-1（表示pattern和str有部分匹配）</span>            k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//往前回溯</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> pattern<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>k<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> len1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//说明k移动到ptr的最末端</span>            <span class="token keyword">return</span> i <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//返回相应的位置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-weekly-contest-296</title>
      <link href="/2022/06/05/leetcode-weekly-contest-296/"/>
      <url>/2022/06/05/leetcode-weekly-contest-296/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title="Problem List"></a><h2>Problem List</h2></h1><ul><li>[1] <a href="#Tag1">极大极小游戏</a></li><li>[2] <a href="#Tag2">划分数组使最大差为 K</a></li><li>[3] <a href="#Tag3">替换数组中的元素</a></li><li>[4] <a href="#Tag4">设计一个文本编辑器</a></li></ul><h2 id="1-极大极小游戏"><a href="#1-极大极小游戏" class="headerlink" title="  1. 极大极小游戏 "></a><h3> <span id="Tag1"> 1. 极大极小游戏 </span></h3></h2><h4 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4><p>给你一个下标从 <code>0</code> 开始的整数数组 <code>nums</code> ，其长度是 <code>2</code> 的幂。</p><p>对 <code>nums</code> 执行下述算法：</p><ol><li>设 <code>n</code> 等于 <code>nums</code> 的长度，如果 <code>n == 1</code> ，终止 算法过程。否则，创建 一个新的整数数组 <code>newNums</code> ，新数组长度为 <code>n / 2</code> ，下标从 <code>0</code> 开始。</li><li>对于满足 <code>0 &lt;= i &lt; n / 2</code> 的每个 <strong>偶数</strong> 下标 <code>i</code> ，将 <code>newNums[i]</code> 赋值 为 <code>min(nums[2 * i], nums[2 * i + 1])</code> 。</li><li>对于满足 <code>0 &lt;= i &lt; n / 2</code> 的每个 <strong>奇数</strong> 下标 <code>i</code> ，将 <code>newNums[i]</code> 赋值 为 <code>max(nums[2 * i], nums[2 * i + 1])</code> 。</li><li>用 <code>newNums</code> 替换 <code>nums</code> 。</li><li>从步骤 1 开始 重复 整个过程。</li></ol><p>执行算法后，返回 <code>nums</code> 中剩下的那个数字。</p><p><img src="/2022/06/05/leetcode-weekly-contest-296/6090-1.png" alt></p><blockquote><p><strong>示例1：</strong><br><strong>输入：</strong>  nums = [1,3,5,2,4,8,2,2]<br><strong>输出：</strong>  1<br><strong>解释：</strong>  重复执行算法会得到下述数组。<br>第一轮：nums = [1,5,4,2]<br>第二轮：nums = [1,4]<br>第三轮：nums = [1]<br>1 是最后剩下的那个数字，返回 1 。</p><p><strong>示例2：</strong><br><strong>输入：</strong>  nums = [3]<br><strong>输出：</strong>  3<br><strong>解释：</strong>  3 就是最后剩下的数字，返回 3 .</p></blockquote><h4 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h4> 1.2 思路</h4><p>&emsp;&emsp;思路即上述算法过程，第四步的”用 <code>newNums</code> 替换 <code>nums</code>“可以用递归实现，第一步则是在算法开头检测输入数组的元素个数是否为<code>1</code>，若是说明递归完成，返回<code>nums[0]</code>即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// 第1步</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">newnums</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 第4步实际上就是第2步和第3步的结合</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">// 第2步</span>                newnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                      <span class="token comment">// 第3步</span>                newnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">minMaxGame</span><span class="token punctuation">(</span>newnums<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 第5步，递归</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-划分数组使最大差为-K"><a href="#2-划分数组使最大差为-K" class="headerlink" title="  2. 划分数组使最大差为 K "></a><h3> <span id="Tag2"> 2. 划分数组使最大差为 K </span></h3></h2><h4 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> 。你可以将 <code>nums</code> 划分成一个或多个 <strong>子序列</strong> ，使 <code>nums</code> 中的每个元素都 <strong>恰好</strong> 出现在一个子序列中。</p><p>在满足每个子序列中最大值和最小值之间的差值最多为 <code>k</code> 的前提下，返回需要划分的 <strong>最少</strong> 子序列数目。</p><p><strong>子序列</strong> 本质是一个序列，可以通过删除另一个序列中的某些元素（或者不删除）但不改变剩下元素的顺序得到。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入：</strong> nums = [3,6,1,2,5], k = 2<br><strong>输出：</strong> 2<br><strong>解释：</strong> 可以将 nums 划分为两个子序列 [3,1,2] 和 [6,5] 。<br>第一个子序列中最大值和最小值的差值是 3 - 1 = 2 。<br>第二个子序列中最大值和最小值的差值是 6 - 5 = 1 。<br>由于创建了两个子序列，返回 2 。可以证明需要划分的最少子序列数目就是 2 </p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,3], k = 1<br><strong>输出：</strong> 2<br><strong>解释：</strong><br>可以将 nums 划分为两个子序列 [1,2] 和 [3] 。<br>第一个子序列中最大值和最小值的差值是 2 - 1 = 1 。<br>第二个子序列中最大值和最小值的差值是 3 - 3 = 0 。<br>由于创建了两个子序列，返回 2 。注意，另一种最优解法是将 nums 划分成子序列 [1] 和 [2,3] 。</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><strong>输入：</strong> nums = [2,2,4,5], k = 0<br><strong>输出：</strong> 3<br><strong>解释：</strong><br>可以将 nums 划分为三个子序列 [2,2]、[4] 和 [5] 。<br>第一个子序列中最大值和最小值的差值是 2 - 2 = 0 。<br>第二个子序列中最大值和最小值的差值是 4 - 4 = 0 。<br>第三个子序列中最大值和最小值的差值是 5 - 5 = 0 。<br>由于创建了三个子序列，返回 3 。可以证明需要划分的最少子序列数目就是 3 。</p></blockquote><h4 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h4> 2.2 思路</h4><p>&emsp;&emsp;很直接的想法，由于题目只要求子序列中任意元素两两的差值不超过<code>k</code>而不是前一个元素和后一个元素的差值不超过<code>k</code>，前者无序(这里的<code>顺序</code>是指原数组中的顺序)而后者有序。那么可以直接对原数组按升序排序，然后遍历数组，采用 <strong>滑动窗口</strong> 的思路进行求解即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">partitionArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 窗口左端点初始化为第一个元素</span>        <span class="token comment">// 窗口截断的条件是当前元素的值大于left+k,即二者差值超过k</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> left <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> left<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            left <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>大佬的写法：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">partitionArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n<span class="token operator">=</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">=</span>j<span class="token punctuation">,</span>ans<span class="token operator">++</span><span class="token punctuation">)</span><span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-替换数组中的元素"><a href="#3-替换数组中的元素" class="headerlink" title="  3. 替换数组中的元素 "></a><h3> <span id="Tag3"> 3. 替换数组中的元素 </span></h3></h2><h4 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4><p>给你一个下标从 <code>0</code> 开始的数组 <code>nums</code> ，它包含 <code>n</code> 个 <strong>互不相同</strong> 的正整数。请你对这个数组执行 <code>m</code> 个操作，在第 <code>i</code> 个操作中，你需要将数字 <code>operations[i][0]</code> 替换成 <code>operations[i][1]</code> 。</p><p>题目保证在第 <code>i</code> 个操作中：</p><ul><li><code>operations[i][0]</code> 在 <code>nums</code> 中存在。</li><li><code>operations[i][1]</code> 在 <code>nums</code> 中不存在。<br>请你返回执行完所有操作后的数组。</li></ul><p><strong>示例1：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2,4,6], operations = [[1,3],[4,7],[6,1]]<br><strong>输出：</strong> [3,2,7,1]<br><strong>解释：</strong> 我们对 nums 执行以下操作：</p><ul><li>将数字 1 替换为 3 。nums 变为 [3,2,4,6] 。</li><li>将数字 4 替换为 7 。nums 变为 [3,2,7,6] 。</li><li>将数字 6 替换为 1 。nums 变为 [3,2,7,1] 。<br>返回最终数组 [3,2,7,1] 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入：</strong> nums = [1,2], operations = [[1,3],[2,1],[3,2]]<br><strong>输出：</strong> [2,1]<br><strong>解释：</strong> 我们对 nums 执行以下操作：</p><ul><li>将数字 1 替换为 3 。nums 变为 [3,2] 。</li><li>将数字 2 替换为 1 。nums 变为 [3,1] 。</li><li>将数字 3 替换为 2 。nums 变为 [2,1] 。<br>返回最终数组 [2,1] 。</li></ul></blockquote><p><strong>提示：</strong></p><ul><li>n == nums.length</li><li>m == operations.length</li><li>1 &lt;= n, m &lt;= 105</li><li>nums 中所有数字 互不相同 。</li><li>operations[i].length == 2</li><li>1 &lt;= nums[i], operations[i][0], operations[i][1] &lt;= 106</li><li>在执行第 i 个操作时，operations[i][0] 在 nums 中存在。</li><li>在执行第 i 个操作时，operations[i][1] 在 nums 中不存在。</li></ul><h4 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h4> 3.2 思路</h4><p>&emsp;&emsp;题目中指出了<code>nums</code>中的数字各不相同，并且在进行操作时，操作后的数在数组中也是不存在的，即操作前后均不存在相同的元素。那么可以直接用一个<code>map</code>来存储元素，<code>key</code>为元素值、<code>val</code>为对应的索引。进行操作时，找到对应<code>key</code>的索引，然后把这个<code>key</code>删去，以<code>operation[i][1]</code>为<code>key</code>、以山删去的<code>key</code>的索引为<code>val</code>重新插入到<code>map</code>中，最后再将<code>map</code>中的元素插入到数组中进行返回即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arrayChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> operations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> vec<span class="token operator">:</span> operations<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> m<span class="token punctuation">[</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">[</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> idx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>it<span class="token punctuation">.</span>second<span class="token punctuation">]</span> <span class="token operator">=</span> it<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化：一样的思路，但是用一个静态数组代替<code>map</code>,减少由于插入和擦除导致复杂度过高的问题。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> vec<span class="token punctuation">[</span><span class="token number">1000001</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">arrayChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> operations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vec<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> operations<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>vec<span class="token punctuation">[</span>operations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> operations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            vec<span class="token punctuation">[</span>operations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>operations<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-设计一个文本编辑器"><a href="#4-设计一个文本编辑器" class="headerlink" title="  4. 设计一个文本编辑器 "></a><h3> <span id="Tag4"> 4. 设计一个文本编辑器 </span></h3></h2><h4 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h4> 4.1 题目描述</h4><p>请你设计一个带光标的文本编辑器，它可以实现以下功能：</p><ul><li><strong>添加</strong>：在光标所在处添加文本。</li><li><strong>删除</strong>：在光标所在处删除文本（模拟键盘的删除键）。</li><li><strong>移动</strong>：将光标往左或者往右移动。<br>当删除文本时，只有光标左边的字符会被删除。光标会留在文本内，也就是说任意时候 <code>0 &lt;= cursor.position &lt;= currentText.length</code> 都成立。</li></ul><p>请你实现 <code>TextEditor</code> 类：</p><ul><li><code>TextEditor()</code> 用空文本初始化对象。</li><li><code>void addText(string text)</code> 将 <code>text</code> 添加到光标所在位置。添加完后光标在 text 的右边。</li><li><code>int deleteText(int k)</code> 删除光标左边 <code>k</code> 个字符。返回实际删除的字符数目。</li><li><code>string cursorLeft(int k)</code> 将光标向左移动 <code>k</code> 次。返回移动后光标左边 <code>min(10, len)</code> 个字符，其中 <code>len</code> 是光标左边的字符数目。</li><li><code>string cursorRight(int k)</code> 将光标向右移动 <code>k</code>次。返回移动后光标左边 <code>min(10, len)</code> 个字符，其中 <code>len</code> 是光标左边的字符数目。</li></ul><blockquote><p><strong>示例：</strong><br><strong>输入：</strong> [“TextEditor”, “addText”, “deleteText”, “addText”, “cursorRight”, “cursorLeft”, “deleteText”, “cursorLeft”, “cursorRight”]<br>[[], [“leetcode”], [4], [“practice”], [3], [8], [10], [2], [6]]<br><strong>输出：</strong> [null, null, 4, null, “etpractice”, “leet”, 4, “”, “practi”]<br><strong>解释：</strong><br>TextEditor textEditor = new TextEditor(); // 当前 text 为 “|” 。（’|’ 字符表示光标）<br>textEditor.addText(“leetcode”); // 当前文本为 “leetcode|” 。<br>textEditor.deleteText(4);&emsp; // 返回 4<br>&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;// 当前文本为 “leet|” 。<br>&emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp; &emsp;// 删除了 4 个字符。<br>textEditor.addText(“practice”); // 当前文本为 “leetpractice|” 。<br>textEditor.cursorRight(3);&emsp;// 返回 “etpractice”<br>&emsp;&emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp; // 当前文本为 “leetpractice|”.<br>&emsp;&emsp;&emsp; &emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; // 光标无法移动到文本以外，所以无法移动。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp; &emsp; // “etpractice” 是光标左边的 10 个字符。<br>textEditor.cursorLeft(8);  &emsp; // 返回 “leet”<br>&emsp;&emsp; &emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; // 当前文本为 “leet|practice” 。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // “leet” 是光标左边的 min(10, 4) = 4 个字符。<br>textEditor.deleteText(10);&emsp;// 返回 4<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // 当前文本为 “|practice” 。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // 只有 4 个字符被删除了。<br>textEditor.cursorLeft(2); &emsp; // 返回 “”<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // 当前文本为 “|practice” 。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // 光标无法移动到文本以外，所以无法移动。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // “” 是光标左边的 min(10, 0) = 0 个字符。<br>textEditor.cursorRight(6);&emsp;// 返回 “practi”<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // 当前文本为 “practi|ce” 。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; &emsp;&emsp; &emsp; &emsp; // “practi” 是光标左边的 min(10, 6) = 6 个字符。</p><h4 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h4> 4.2 思路</h4></h4></blockquote><p>维护一个全局字符串<code>str</code>用于存放当前的文本，一个整型变量<code>pos</code>用于记录当前光标所在的位置。</p><ul><li>插入：如果光标位置<code>pos</code>等于文本<code>str</code>的长度，即<code>pos==str.length()</code>时说明待插入字符串时加到当前文本的最后即可，否则则是插在光标位置<code>str.insert(pos, text)</code>. 插入后更新光标位置<code>pos += text.length()</code>.</li><li>删除：如果光标位置小于<code>k</code>，说明光标左侧没有足够的字符可供删除，因而文本更新为<code>pos</code>右侧的子字符串，并且将<code>pos</code>置于文本开头；否则说明删除<code>k</code>个字符后文本剩下左右两个子字符串(删掉了中间的字符串),那么更新文本为<code>str = str.substr(0, pos-k) + str.substr(pos)</code>,并将光标位置更新为左侧字符串的末尾即<code>pos-k</code>.</li><li>左移：直接<code>pos-=k</code>,如果<code>pos &lt;= 0</code>说明此时pos越界，则置为<code>0</code>并返回<code>&quot;&quot;</code>；否则返回pos左侧字符串(最长为10)</li><li>右移：直接<code>pos-=k</code>,如果<code>pos &gt;= str.length()</code>说明此时pos越界，则置为<code>str.length()</code>, 并返回pos左侧字符串(最长为10).</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">TextEditor</span> <span class="token punctuation">&#123;</span>    string str<span class="token punctuation">;</span>    <span class="token keyword">int</span> pos<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">TextEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        str <span class="token operator">=</span>  <span class="token string">""</span><span class="token punctuation">;</span>        pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addText</span><span class="token punctuation">(</span>string text<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">;</span>        pos <span class="token operator">+=</span> text<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">deleteText</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span>  ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            str <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> pos<span class="token operator">-</span>k<span class="token punctuation">)</span> <span class="token operator">+</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>            pos <span class="token operator">-=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        string <span class="token function">cursorLeft</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pos <span class="token operator">-=</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        string <span class="token function">cursorRight</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pos <span class="token operator">+=</span> k<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">></span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pos <span class="token operator">=</span> len<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>pos<span class="token operator">-</span><span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">min</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="复盘"><a href="#复盘" class="headerlink" title=" 复盘"></a><h3> 复盘</h3></h1><p>主要涉及了字符串中<code>substr</code>和<code>insert</code>的操作：</p><ul><li><code>substr(index, len)</code>: 获取从<code>index</code>开始的长度为<code>len</code>的子字符串，如果<code>len</code>大于剩余字符串长度，则否则剩余的字符串.</li><li><code>substr(index)</code>: 返回自<code>index</code>开始到字符串末尾的子字符串.</li><li><code>insert(index, str)</code>: 在<code>index</code>位置上插入字符串<code>str</code>.</li></ul></h4></h4></h4></h4></h4></h4></h4>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 力扣周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JZOffer-62</title>
      <link href="/2022/06/02/JZOffer-62/"/>
      <url>/2022/06/02/JZOffer-62/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-62-圆圈中最后剩下的数字"><a href="#剑指-Offer-62-圆圈中最后剩下的数字" class="headerlink" title=" 剑指 Offer 62. 圆圈中最后剩下的数字"></a><h2> 剑指 Offer 62. 圆圈中最后剩下的数字</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/" title="剑指 Offer 62. 圆圈中最后剩下的数字">剑指 Offer 62. 圆圈中最后剩下的数字</a></li></ul><p>0,1,···,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字（删除后从下一个数字开始计数）。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  n = 5, m = 3<br><strong>输出:</strong>  3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  n = 10, m = 17<br><strong>输出:</strong>  2</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;约瑟夫环经典问题，从1个人开始往回推。首先把上一个去掉的人加回来，然后右移m个位置(溢出则置于开头)即可。</p><p><img src="/2022/06/02/JZOffer-62/0.png" alt></p><p>设n = 8, m = 3.</p><ul><li>1个人的时候的下标必为0</li><li>2个人的时候的下标为(0+m)%2 = 1</li><li>3个人的时候的下标为(1+m)%3 = 1</li><li>4个人的时候的下标为(1+m)%4 = 0</li><li>5个人的时候的下标为(0+m)%5 = 3</li><li>6个人的时候的下标为(3+m)%6 = 0</li><li>7个人的时候的下标为(0+m)%7 = 3</li><li>8个人的时候的下标为(3+m)%8 = 6</li></ul><p><img src="/2022/06/02/JZOffer-62/1.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pos <span class="token operator">=</span> <span class="token punctuation">(</span>pos <span class="token operator">+</span> m<span class="token punctuation">)</span> <span class="token operator">%</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pos<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-1419</title>
      <link href="/2022/06/02/leetcode-1419/"/>
      <url>/2022/06/02/leetcode-1419/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-1419-数青蛙"><a href="#LeetCode-1419-数青蛙" class="headerlink" title=" LeetCode 1419. 数青蛙"></a><h2> LeetCode 1419. 数青蛙</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/minimum-number-of-frogs-croaking/" title="1419. 数青蛙">1419. 数青蛙</a></li></ul><p>给你一个字符串 <code>croakOfFrogs</code>，它表示不同青蛙发出的蛙鸣声（字符串 <code>&quot;croak&quot;</code> ）的组合。由于同一时间可以有多只青蛙呱呱作响，所以 <code>croakOfFrogs</code> 中会混合多个 <code>“croak”</code> 。</p><p>请你返回模拟字符串中所有蛙鸣所需不同青蛙的最少数目。</p><p>要想发出蛙鸣 <code>&quot;croak&quot;</code>，青蛙必须 依序 输出 <code>‘c’</code>, <code>’r’</code>, <code>’o’</code>, <code>’a’</code>, <code>’k’</code>这 <code>5</code> 个字母。如果没有输出全部五个字母，那么它就不会发出声音。如果字符串 <code>croakOfFrogs</code> 不是由若干有效的 <code>&quot;croak&quot;</code> 字符混合而成，请返回 <code>-1</code> 。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  croakOfFrogs = “croakcroak”<br><strong>输出:</strong>  1<br><strong>解释:</strong> 一只青蛙 “呱呱” 两次</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  croakOfFrogs = “crcoakroak”<br><strong>输出:</strong>  2<br><strong>解释:</strong> 最少需要两只青蛙，“呱呱” 声用黑体标注<br>第一只青蛙 “<strong>cr</strong>c<strong>oak</strong>roak”<br>第二只青蛙 “cr<strong>c</strong>oak<strong>roak</strong>“</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><strong>输入:</strong>  croakOfFrogs = “croakcrook”<br><strong>输出:</strong>  -1<br><strong>解释:</strong> 给出的字符串不是 “croak” 的有效组合.</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;用一个数组<code>vec[5]</code>来记录<code>croak</code>中各个字符出现的次数，当数组<code>vec</code>不是单调递减时说明当前的字符串不是有效组合，直接返回<code>false</code>; 每一次<code>呱呱</code>都是以<code>c</code>开头，因此可以将青蛙的最少数目转化为同时在<code>呱呱</code>的青蛙数，而同时<code>呱呱</code>的青蛙数可以用一个计数器来实现，当遇到<code>c</code>时计数器加1，表示当前有多少只在叫，而遇到<code>k</code>时说明第一只开口的青蛙已经完成<code>呱呱</code>，此时其为空闲状态，下一个<code>c</code>则不用再有新的青蛙来加入。这一步操作可以通过检测当前的字符是否为<code>k</code>，若是则将计数器减<code>1</code>，从而实现在下一次检测到<code>c</code>的“不加入”新的青蛙的操作。而结果即为同时<code>呱呱</code>的青蛙数的最大值。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minNumberOfFrogs</span><span class="token punctuation">(</span>string croakOfFrogs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span> croakOfFrogs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>                     vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'r'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'o'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">>=</span> vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">>=</span> vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'k'</span><span class="token operator">:</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">>=</span> vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    cnt<span class="token operator">--</span><span class="token punctuation">;</span>                    vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span>vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">?</span> ans <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;以上代码可以进行优化，减少变量数.需要注意的是，在循环末尾判断字符串是否有效时不需要判断<code>k</code>的值是否小于0；同样的，返回结果时也不需要判断<code>k</code>的值是否为<code>0</code>，其他字符判断次数是否为<code>0</code>是确保前四个被消耗完，即叫过<code>croa</code>后再叫<code>k</code>，而最后一只青蛙<code>呱呱</code>完前四个字符的次数为0，而<code>k</code>的次数应该为<code>1</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minNumberOfFrogs</span><span class="token punctuation">(</span>string croakOfFrogs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span> croakOfFrogs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">switch</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token char">'c'</span><span class="token operator">:</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> res<span class="token operator">++</span><span class="token punctuation">;</span>                    vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'r'</span><span class="token operator">:</span>                    vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'o'</span><span class="token operator">:</span>                    vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'a'</span><span class="token operator">:</span>                    vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token char">'k'</span><span class="token operator">:</span>                    vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">,</span> vec<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>vec<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11</title>
      <link href="/2022/06/01/JZOffer-II-011/"/>
      <url>/2022/06/01/JZOffer-II-011/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-II-011-0-和-1-个数相同的子数组"><a href="#剑指-Offer-II-011-0-和-1-个数相同的子数组" class="headerlink" title=" 剑指 Offer II 011. 0 和 1 个数相同的子数组"></a><h2> 剑指 Offer II 011. 0 和 1 个数相同的子数组</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/A1NYOS/" title="剑指 Offer II 011. 0 和 1 个数相同的子数组">剑指 Offer II 011. 0 和 1 个数相同的子数组</a></li></ul><p>给定一个二进制数组 <code>nums</code> , 找到含有相同数量的 <code>0</code> 和 <code>1</code> 的最长连续子数组，并返回该子数组的长度。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  nums = [0,1]<br><strong>输出:</strong>  2<br><strong>说明:</strong> [0, 1] 是具有相同数量 0 和 1 的最长连续子数组。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  nums = [0,1,0]<br><strong>输出:</strong>  2<br><strong>说明:</strong> [0, 1] (或 [1, 0]) 是具有相同数量 0 和 1 的最长连续子数组。</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;将<code>0</code>看作<code>-1</code>，然后转换为求前缀和的问题。用一个哈希表存储前缀和数组。</p><ul><li>当前缀和为<code>0</code>时，说明从起点到当前位置的连续序列中<code>0</code>和<code>1</code>的数量相等，因而更新答案为原答案和当前已经遍历的数字位数间的大者, 即<code>ans = max(ans, i + 1)</code>，<code>i</code>为当前遍历到的数字索引。</li><li>当前缀和不为<code>0</code>时，为找到连续序列中<code>0</code>和<code>1</code>的数量相等，那么在哈希表中查找这个前缀和，如果找到了，则将答案更新为原答案和该序列的长度中的大者，即<code>ans = max(ans, i - it-&gt;second)</code>，这里的<code>it</code>实际上就是指向哈希表中该前缀和出现的位置的指针，而<code>it-&gt;second</code>即为其下标。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findMaxLength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> it <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>it <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    m<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>sum<span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">-</span> it<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 剑指Offer II </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JZOffer-II-014-015-016</title>
      <link href="/2022/06/01/JZOffer-II-014-015-016/"/>
      <url>/2022/06/01/JZOffer-II-014-015-016/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">剑指 Offer II 014. 字符串中的变位词</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">剑指 Offer II 015. 字符串中的所有变位词</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">剑指 Offer II 016. 不含重复字符的最长子字符串</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li></ul><h3 id="1-字符串中的变位词"><a href="#1-字符串中的变位词" class="headerlink" title="  1 字符串中的变位词 "></a><h2> <span id="Tag1"> 1 字符串中的变位词 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode.cn/problems/MPnaiL/" title="剑指 Offer II 014. 字符串中的变位词">剑指 Offer II 014. 字符串中的变位词</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定两个字符串 <code>s1</code> 和 <code>s2</code>，写一个函数来判断 <code>s2</code> 是否包含 <code>s1</code> 的某个变位词。</p><p>换句话说，第一个字符串的排列之一是第二个字符串的 <strong>子串</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s1 = “ab” s2 = “eidbaooo”<br><strong>输出:</strong> true<br><strong>解释:</strong> s2 包含 s1 的排列之一 (“ba”).</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s1= “ab” s2 = “eidboaoo”<br><strong>输出:</strong> false</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;类似滑动窗口的思路，但采用哈希表来存储窗口中的字符出现的次数，然后与字符串<code>s1</code>中的字符出现次数作比较，当完全相等时说明当前窗口内的字符串为<code>s1</code>的变位词，返回<code>true</code>,否则将窗口最左侧的字符从哈希表中去掉(对应字符的次数减1)、窗口最右侧字符加入到哈希表中（仍然为左闭右开区间）。</p><p><span id="codeof_tag1">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span>string s1<span class="token punctuation">,</span> string s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len1 <span class="token operator">></span> len2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> hash1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> hash2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash1<span class="token punctuation">[</span>s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            hash2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len1<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> hash2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                hash2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                hash2<span class="token punctuation">[</span>s2<span class="token punctuation">[</span>i<span class="token operator">-</span>len1<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>hash1<span class="token punctuation">,</span> hash2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-字符串中的所有变位词"><a href="#2-字符串中的所有变位词" class="headerlink" title="  2 字符串中的所有变位词 "></a><h2> <span id="Tag2"> 2 字符串中的所有变位词 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode.cn/problems/VabMRr/" title="剑指 Offer II 015. 字符串中的所有变位词">剑指 Offer II 015. 字符串中的所有变位词</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定两个字符串 <code>s</code> 和 <code>p</code>，找到 <code>s</code> 中所有 <code>p</code> 的 <strong>变位词</strong> 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。</p><p><strong>变位词</strong> 指字母相同，但排列不同的字符串。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “cbaebabacd”, p = “abc”<br><strong>输出:</strong> [0,6]<br><strong>解释:</strong><br>起始索引等于 0 的子串是 “cba”, 它是 “abc” 的变位词。<br>起始索引等于 6 的子串是 “bac”, 它是 “abc” 的变位词。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “abab”, p = “ab”<br><strong>输出:</strong> [0,1,2]<br><strong>解释:</strong><br>起始索引等于 0 的子串是 “ab”, 它是 “ab” 的变位词。<br>起始索引等于 1 的子串是 “ba”, 它是 “ab” 的变位词。<br>起始索引等于 2 的子串是 “ab”, 它是 “ab” 的变位词。 </p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;思路同上一题，只不过这一题需要完全遍历完字符串<code>s</code>,当检测到滑动窗口中的字符串中字符出现次数与字符串<code>p</code>中字符出现次数完全一致时，说明窗口中的字符串为字符串<code>p</code>的变位词，将<strong>窗口左端点</strong>加入到答案数组中，遍历过程中重复将窗口最左侧元素去除并加入左右侧元素(左闭右开区间)。</p><p><span id="codeof_tag2">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findAnagrams</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">hash_s</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">hash_p</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> slen <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plen <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>slen <span class="token operator">&lt;</span> plen<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> plen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            hash_p<span class="token punctuation">[</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>hash_s <span class="token operator">==</span> hash_p<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> plen<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> slen<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            hash_s<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> plen<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash_s <span class="token operator">==</span> hash_p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i <span class="token operator">-</span> plen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-不含重复字符的最长子字符串"><a href="#3-不含重复字符的最长子字符串" class="headerlink" title="  3 不含重复字符的最长子字符串 "></a><h2> <span id="Tag3"> 3 不含重复字符的最长子字符串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode.cn/problems/wtcaE1/" title="剑指 Offer II 016. 不含重复字符的最长子字符串">剑指 Offer II 016. 不含重复字符的最长子字符串</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个字符串 <code>s</code> ，请你找出其中不含有重复字符的 <strong>最长连续子字符串</strong> 的长度。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abcabcbb”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 因为无重复字符的最长子字符串是 “abc”，所以其长度为 3。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “bbbbb”<br><strong>输出:</strong> 1<br><strong>解释:</strong> 因为无重复字符的最长子字符串是 “b”，所以其长度为 1。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “pwwkew”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>&emsp; &emsp;    请注意，你的答案必须是 <strong>子串</strong> 的长度，”pwke” 是一个子序列，不是子串。</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> s = “”<br><strong>输出:</strong> 0</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;滑动窗口典型题目，窗口的长度即为连续子字符串的长度，初始化长度为<code>1</code>，从而窗口左端点<code>left = 0</code>，右端点<code>right = 1</code>(窗口为<strong>左闭右开</strong>区间),然后进行遍历，右端点从<code>1</code>开始，循环遍历整个字符串，然后内循环窗口内的字符，当检测到窗口中的字符与<code>s[right]</code>相同时，将答案更新为当前窗口长度与原答案中的大者，并将窗口左端点更新为重叠位置的下个字符。</p><p><span id="codeof_tag3">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> len<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>                    left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 剑指Offer II </tag>
            
            <tag> 滑动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-biweekly-contest-79</title>
      <link href="/2022/05/31/leetcode-biweekly-contest-79/"/>
      <url>/2022/05/31/leetcode-biweekly-contest-79/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title=" Problem List"></a><h2> Problem List</h2></h1><ul><li>[1] <a href="#Tag1">判断一个数的数字计数是否等于数位的值</a></li><li>[2] <a href="#Tag2">最多单词数的发件人</a></li><li>[3] <a href="#Tag3">道路的最大总重要性</a></li><li>[4] <a href="#Tag4">以组为单位订音乐会的门票</a></li></ul><h3 id="1-判断一个数的数字计数是否等于数位的值"><a href="#1-判断一个数的数字计数是否等于数位的值" class="headerlink" title="  1 判断一个数的数字计数是否等于数位的值 "></a><h3> <span id="Tag1"> 1 判断一个数的数字计数是否等于数位的值 </span></h3><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/check-if-number-has-equal-digit-count-and-digit-value/" title="2283. 判断一个数的数字计数是否等于数位的值">2283. 判断一个数的数字计数是否等于数位的值</a></li></ul><p>给你一个下标从 <code>0</code> 开始长度为 n 的字符串 <code>num</code> ，它只包含数字。</p><p>如果对于 每个 <code>0 &lt;= i &lt; n</code> 的下标 <code>i</code> ，都满足数位 <code>i</code> 在 <code>num</code> 中出现了 <code>num[i]</code>次，那么请你返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  num = “1210”<br><strong>输出:</strong>  true<br><strong>解释:</strong> num[0] = ‘1’ 。数字 0 在 num 中出现了一次。<br>num[1] = ‘2’ 。数字 1 在 num 中出现了两次。<br>num[2] = ‘1’ 。数字 2 在 num 中出现了一次。<br>num[3] = ‘0’ 。数字 3 在 num 中出现了零次。<br>“1210” 满足题目要求条件，所以返回 true 。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  num = “030”<br><strong>输出:</strong>  false<br><strong>解释:</strong> num[0] = ‘0’ 。数字 0 应该出现 0 次，但是在 num 中出现了一次。<br>num[1] = ‘3’ 。数字 1 应该出现 3 次，但是在 num 中出现了零次。<br>num[2] = ‘0’ 。数字 2 在 num 中出现了 0 次。<br>下标 0 和 1 都违反了题目要求，所以返回 false 。</p></blockquote><h2 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h2><p>&emsp;&emsp;<code>nums[i]</code>为数字<code>i</code>在数组中出现的次数,可以将数组存放到哈希表中，然后遍历数组，通过哈希查找来求下标数字<code>i</code>在数组中出现的次数，如果为<code>nums[i]</code>则继续遍历直至遍历完成返回<code>true</code>，否则返回<code>false</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">digitCount</span><span class="token punctuation">(</span>string num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span> <span class="token operator">!=</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-最多单词数的发件人"><a href="#2-最多单词数的发件人" class="headerlink" title="  2 最多单词数的发件人 "></a><h3> <span id="Tag2"> 2 最多单词数的发件人 </span></h3><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/sender-with-largest-word-count/" title="2284. 最多单词数的发件人">2284. 最多单词数的发件人</a></li></ul><p>给你一个聊天记录，共包含 n 条信息。给你两个字符串数组 <code>messages</code> 和 <code>senders</code> ，其中 <code>messages[i]</code> 是 <code>senders[i]</code> 发出的一条 信息 。</p><p>一条 <strong>信息</strong> 是若干用单个空格连接的 <strong>单词</strong> ，信息开头和结尾不会有多余空格。发件人的 单词计数 是这个发件人总共发出的 <strong>单词数</strong> 。注意，一个发件人可能会发出多于一条信息。</p><p>请你返回发出单词数 <strong>最多</strong> 的发件人名字。如果有多个发件人发出最多单词数，请你返回 <strong>字典序</strong> 最大的名字。</p><p>注意：</p><p>字典序里，大写字母小于小写字母。<br><code>&quot;Alice&quot;</code> 和 <code>&quot;alice&quot;</code> 是不同的名字。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  messages = [“Hello userTwooo”,”Hi userThree”,”Wonderful day Alice”,”Nice day userThree”], senders = [“Alice”,”userTwo”,”userThree”,”Alice”]<br><strong>输出:</strong>  “Alice”<br><strong>解释:</strong>  Alice 总共发出了 2 + 3 = 5 个单词。<br>userTwo 发出了 2 个单词。<br>userThree 发出了 3 个单词。<br>由于 Alice 发出单词数最多，所以我们返回 “Alice” 。</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  messages = [“How is leetcode for everyone”,”Leetcode is useful for practice”], senders = [“Bob”,”Charlie”]<br><strong>输出:</strong>  “Charlie”<br><strong>解释:</strong>  Bob 总共发出了 5 个单词。<br>Charlie 总共发出了 5 个单词。<br>由于最多单词数打平，返回字典序最大的名字，也就是 Charlie 。</p></blockquote><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h2><p>&emsp;&emsp;用哈希表来记录每个用户发送的单词数，由于哈希表本身的具有键有序性。因此，我们只需构造哈希表后遍历哈希表，保存单个用户发送的最多单词数即可，当出现单词数相同且均为最大时，由于哈希表的键有序性，后遍历的用户名的字典序即为最大。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">calNum</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">largestWordCount</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> messages<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> senders<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m<span class="token punctuation">[</span>senders<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">calNum</span><span class="token punctuation">(</span>messages<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>it<span class="token punctuation">.</span>second <span class="token operator">>=</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> it<span class="token punctuation">.</span>first<span class="token punctuation">;</span>                tmp <span class="token operator">=</span> it<span class="token punctuation">.</span>second<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-道路的最大总重要性"><a href="#3-道路的最大总重要性" class="headerlink" title="  3 道路的最大总重要性 "></a><h3> <span id="Tag3"> 3 道路的最大总重要性 </span></h3><h1 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/maximum-total-importance-of-roads/" title="2285. 道路的最大总重要性">2285. 道路的最大总重要性</a></li></ul><p>给你一个整数 <code>n</code> ，表示一个国家里的城市数目。城市编号为 <code>0</code> 到 <code>n - 1</code> 。</p><p>给你一个二维整数数组 <code>roads</code> ，其中 <code>roads[i] = [ai, bi]</code> 表示城市 <code>ai</code> 和 <code>bi</code> 之间有一条 <strong>双向</strong> 道路。</p><p>你需要给每个城市安排一个从 <code>1</code> 到 <code>n</code> 之间的整数值，且每个值只能被使用 一次 。道路的 <strong>重要性</strong> 定义为这条道路连接的两座城市数值 <strong>之和</strong> 。</p><p>请你返回在最优安排下，<strong>所有道路重要性</strong> 之和 <strong>最大</strong> 为多少。</p><p><strong>示例1：</strong></p><p><img src="/2022/05/31/leetcode-biweekly-contest-79/2285-1.png" alt></p><blockquote><p><strong>输入:</strong>  n = 5, roads = [[0,1],[1,2],[2,3],[0,2],[1,3],[2,4]]<br><strong>输出:</strong>  43<br><strong>解释:</strong>  上图展示了国家图和每个城市被安排的值 [2,4,5,3,1] 。<br>　- 道路 (0,1) 重要性为 2 + 4 = 6 。</p><ul><li>道路 (1,2) 重要性为 4 + 5 = 9 。</li><li>道路 (2,3) 重要性为 5 + 3 = 8 。</li><li>道路 (0,2) 重要性为 2 + 5 = 7 。</li><li>道路 (1,3) 重要性为 4 + 3 = 7 。</li><li>道路 (2,4) 重要性为 5 + 1 = 6 。<br>所有道路重要性之和为 6 + 9 + 8 + 7 + 7 + 6 = 43 。<br>可以证明，重要性之和不可能超过 43 。</li></ul></blockquote><p><strong>示例2：</strong></p><p><img src="/2022/05/31/leetcode-biweekly-contest-79/2285-2.png" alt></p><blockquote><p><strong>输入:</strong>  n = 5, roads = [[0,3],[2,4],[1,3]]<br><strong>输出:</strong>  20<br><strong>解释:</strong>  上图展示了国家图和每个城市被安排的值 [4,3,2,5,1] 。</p><ul><li>道路 (0,3) 重要性为 4 + 5 = 9 。</li><li>道路 (2,4) 重要性为 2 + 1 = 3 。</li><li>道路 (1,3) 重要性为 3 + 5 = 8 。<br>所有道路重要性之和为 9 + 3 + 8 = 20 。<br>可以证明，重要性之和不可能超过 20 。</li></ul></blockquote><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 思路</h3></h2><p>&emsp;&emsp;道路的重要性为道路两端的城市的数值之和。若要取得最大总重要性，很直觉的想法就是赋予与越多其他城市相连的城市越高的数值即可。思想为<strong>贪心+哈希</strong>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">maximumImportance</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> roads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">hash</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> it<span class="token operator">:</span> roads<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>it<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            hash<span class="token punctuation">[</span>it<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>i <span class="token operator">*</span> hash<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-以组为单位订音乐会的门票"><a href="#4-以组为单位订音乐会的门票" class="headerlink" title="  4 以组为单位订音乐会的门票 "></a><h3> <span id="Tag4"> 4 以组为单位订音乐会的门票 </span></h3><h1 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h4> 4.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/booking-concert-tickets-in-groups/" title="2286. 以组为单位订音乐会的门票">2286. 以组为单位订音乐会的门票</a></li></ul><p>一个音乐会总共有 <code>n</code> 排座位，编号从 <code>0</code> 到 <code>n - 1</code> ，每一排有 <code>m</code> 个座椅，编号为 <code>0</code> 到 <code>m - 1</code> 。你需要设计一个买票系统，针对以下情况进行座位安排：</p><ul><li>同一组的 <code>k</code> 位观众坐在 <strong>同一排座位，且座位连续</strong> 。</li><li><code>k</code> 位观众中 <strong>每一位</strong> 都有座位坐，但他们 <strong>不一定</strong> 坐在一起。</li></ul><p>由于观众非常挑剔，所以：</p><ul><li>只有当一个组里所有成员座位的排数都 <strong>小于等于</strong> <code>maxRow</code> ，这个组才能订座位。每一组的 <code>maxRow</code> 可能 不同 。</li><li>如果有多排座位可以选择，优先选择 <strong>最小</strong> 的排数。如果同一排中有多个座位可以坐，优先选择号码 <strong>最小</strong> 的。</li></ul><p>请你实现 <code>BookMyShow</code> 类：</p><ul><li><code>BookMyShow(int n, int m)</code> ，初始化对象，<code>n</code> 是排数，<code>m</code> 是每一排的座位数。</li><li><code>int[] gather(int k, int maxRow)</code> 返回长度为 <code>2</code> 的数组，表示 <code>k</code> 个成员中 <strong>第一个座位</strong> 的排数和座位编号，这 <code>k</code> 位成员必须坐在 <strong>同一排座位，且座位连续</strong> 。换言之，返回最小可能的 <code>r</code> 和 <code>c</code> 满足第 <code>r</code> 排中 <code>[c, c + k - 1]</code> 的座位都是空的，且 <code>r &lt;= maxRow</code> 。如果 <strong>无法</strong> 安排座位，返回 <code>[]</code> 。</li><li><code>boolean scatter(int k, int maxRow)</code> 如果组里所有 <code>k</code> 个成员 <strong>不一定</strong> 要坐在一起的前提下，都能在第 <code>0</code> 排到第 <code>maxRow</code> 排之间找到座位，那么请返回 <code>true</code> 。这种情况下，每个成员都优先找排数 <strong>最小</strong> ，然后是座位编号最小的座位。如果不能安排所有 <code>k</code> 个成员的座位，请返回 <code>false</code> 。</li></ul><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  [“BookMyShow”, “gather”, “gather”, “scatter”, “scatter”]<br>[[2, 5], [4, 0], [2, 0], [5, 1], [5, 1]]<br><strong>输出:</strong>  [null, [0, 0], [], true, false]<br><strong>解释:</strong>  BookMyShow bms = new BookMyShow(2, 5); // 总共有 2 排，每排 5 个座位。<br>bms.gather(4, 0); // 返回 [0, 0]<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// 这一组安排第 0 排 [0, 3] 的座位。<br>bms.gather(2, 0); // 返回 []<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp; // 第 0 排只剩下 1 个座位。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// 所以无法安排 2 个连续座位。<br>bms.scatter(5, 1); // 返回 True<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// 这一组安排第 0 排第 4 个座位和第 1 排 [0, 3] 的座位。<br>bms.scatter(5, 1); // 返回 False<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;// 总共只剩下 2 个座位。。</p></blockquote><h2 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 思路</h3></h2><ul><li>模拟，用一个数组<code>end</code>记录每一行已有的观众数。（<strong>超时</strong>）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BookMyShow</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> end<span class="token punctuation">;</span>    <span class="token keyword">int</span> row<span class="token punctuation">,</span> col<span class="token punctuation">;</span>    <span class="token keyword">int</span> canBookRow<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BookMyShow</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        row <span class="token operator">=</span> n<span class="token punctuation">,</span> col <span class="token operator">=</span> m<span class="token punctuation">;</span>        canBookRow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            end<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">gather</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> canBookRow<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> maxRow<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> col <span class="token operator">-</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> pos <span class="token operator">=</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> k<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> canBookRow <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> col<span class="token punctuation">)</span> canBookRow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> pos<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">scatter</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>maxRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>col <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> k<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>c <span class="token operator">=</span> canBookRow<span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> maxRow<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">-=</span> <span class="token punctuation">(</span>col <span class="token operator">-</span> end<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> canBookRow<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token punctuation">(</span>col <span class="token operator">-</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    k <span class="token operator">-=</span> col <span class="token operator">-</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> col<span class="token punctuation">;</span>                     canBookRow<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> k<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>canBookRow <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                canBookRow<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>线段树+二分</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">BookMyShow</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span> sum<span class="token punctuation">;</span>   <span class="token comment">// 记录当前节点代表的区间中人数，即被占了的座位数</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> min<span class="token punctuation">;</span>    <span class="token comment">// 记录当前节点代表的区间中剩余座位数最多的叶节点，即人数最少的排号</span>    <span class="token keyword">int</span> row<span class="token punctuation">,</span> col<span class="token punctuation">;</span>       <span class="token comment">// 行数、每一行的座位数</span>    <span class="token comment">// 函数功能：在第idx行上加上val，即第idx行多了val个人</span>    <span class="token comment">// 函数外的引用格式：add(1, 1, row, idx, val),前三个参数不变</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> idx<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">// 到达叶节点</span>            sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>   <span class="token comment">// 叶节点其实就是idx行，直接在其上加上val人</span>            min<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">+=</span> val<span class="token punctuation">;</span>   <span class="token comment">// 叶节点上min[root]其实就是其本身</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 计算中间节点(向下取整)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">// 目标行在当前节点的左侧</span>            <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                  <span class="token comment">// 目标行在右侧</span>            <span class="token function">add</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">[</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>sum<span class="token punctuation">[</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 更新节点上的总人数</span>        min<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> min<span class="token punctuation">[</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 更新每个节点的最少人数</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 函数功能：计算从targetL到targetR区间上的总人数（左闭右闭区间）</span>    <span class="token comment">// 函数外引用格式：query_sum(1, 1, row, targetL, targetR)</span>    <span class="token keyword">long</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> targetL<span class="token punctuation">,</span> <span class="token keyword">int</span> targetR<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前访问的区间已经全部包括在目标区间中，则直接返回该区间的总人数即可</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetL<span class="token operator">&lt;=</span>left <span class="token operator">&amp;&amp;</span> targetR<span class="token operator">>=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 计算区间中点(向下取整)</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>  <span class="token comment">// 暂存加和</span>        <span class="token comment">// 三种情况：目标区间全部位于当前区间左侧/右侧以及目标当前区间一部分位于左侧一部分在右侧</span>        <span class="token comment">// 前两种情况分别访问对应的一侧即可，最后一种则将目标区间分成两部分分别访问两侧</span>        <span class="token comment">// 因而下面的判断不能用if...else...，而是要两次判断。</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetL <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// 访问左侧区间</span>            sum <span class="token operator">+=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> targetL<span class="token punctuation">,</span> targetR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                       <span class="token comment">//访问右侧区间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>targetR <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> targetL<span class="token punctuation">,</span> targetR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 函数功能：求能容纳col-val人的最小行的索引，即能人数小于等于val的最小行号</span>    <span class="token comment">// 函数外引用格式：getIndex(1, 1, row, maxRow+1, col-val)</span>    <span class="token comment">// 注意线段树的下标从1开始而不是0</span>    <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRow<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 当前区间的中最少人的行中人数仍然大于val，则当前区间中没有能够容纳col-val人的行</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>          <span class="token comment">// 叶节点，说明找到对应的行号</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 求当前区间的中点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>min<span class="token punctuation">[</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">// 判断左侧是否有可以容纳这些人的行</span>            <span class="token keyword">return</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> maxRow<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>maxRow <span class="token operator">></span> mid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">// 判断是否可以访问右侧</span>            <span class="token keyword">return</span> <span class="token function">getIndex</span><span class="token punctuation">(</span>root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">,</span> maxRow<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                               <span class="token comment">// 线段树编号以1开始，0则作为特殊位用于判断</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">BookMyShow</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        row <span class="token operator">=</span> n<span class="token punctuation">,</span> col <span class="token operator">=</span> m<span class="token punctuation">;</span>        sum <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">long</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化容量为4n</span>        min <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vector</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">gather</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> maxRow<span class="token punctuation">,</span> col<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 查询能够容纳k人的行号</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>idx <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">// 如果返回行号为0，说明第0到maxRow行中没有可以容纳k人的行</span>            <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 查询该行的人数</span>        <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 安排k人到该行，进行数据更新</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>idx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                            <span class="token comment">// 行号需要-1</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">scatter</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> maxRow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 计算第0行到第maxRow行的剩余空位，如果空位数小于k，则无法安排，返回false</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>col<span class="token operator">*</span><span class="token punctuation">(</span>maxRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> maxRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 求有空位的最低行，有空位即该行最少有一个空位，则该行人数少于col-1</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> maxRow<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 循环，逐行安排人加入</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 计算当前遍历到的行的剩余空位 </span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;=</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">// 待安排的人数少于当前行空位数，直接安排k人在该行即完成</span>                <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            k <span class="token operator">-=</span> rest<span class="token punctuation">;</span>                  <span class="token comment">// 把该行占满，并到下一行继续安排人</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> row<span class="token punctuation">,</span> idx<span class="token punctuation">,</span> rest<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">++</span>idx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 贪心 </tag>
            
            <tag> 力扣双周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-weekly-contest-biweekly-contest-78</title>
      <link href="/2022/05/31/leetcode-biweekly-contest-78/"/>
      <url>/2022/05/31/leetcode-biweekly-contest-78/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title=" Problem List"></a><h2> Problem List</h2></h1><ul><li>[1] <a href="#Tag1">找到一个数字的 K 美丽值</a></li><li>[2] <a href="#Tag2">分割数组的方案数</a></li><li>[3] <a href="#Tag3">毯子覆盖的最多白色砖块数</a></li><li>[4] 最大波动的子字符串(<strong>我不会</strong>)</li></ul><h3 id="1-找到一个数字的-K-美丽值"><a href="#1-找到一个数字的-K-美丽值" class="headerlink" title="  1 找到一个数字的 K 美丽值 "></a><h3> <span id="Tag1"> 1 找到一个数字的 K 美丽值 </span></h3><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/percentage-of-letter-in-string/" title="2269. 找到一个数字的 K 美丽值">2269. 找到一个数字的 K 美丽值</a></li></ul><p>一个整数 <code>num</code> 的 <code>k</code> 美丽值定义为 <code>num</code> 中符合以下条件的 子字符串 数目：</p><p>子字符串长度为 <code>k</code> 。<br>子字符串能整除 <code>num</code>。<br>给你整数 <code>num</code> 和 <code>k</code> ，请你返回 <code>num</code> 的 <code>k</code> 美丽值。</p><p>注意：</p><p>允许有 <strong>前缀</strong> <code>0</code> 。<br><code>0</code> 不能整除任何值。<br>一个 <strong>子字符串</strong> 是一个字符串里的 <strong>连续</strong> 一段字符序列。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  num = 240, k = 2<br><strong>输出:</strong>  2<br><strong>解释:</strong> 以下是 num 里长度为 k 的子字符串：</p><ul><li>“240” 中的 “24” ：24 能整除 240 。</li><li>“240” 中的 “40” ：40 能整除 240 。<br>所以，k 美丽值为 2 </li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  num = 430043, k = 2<br><strong>输出:</strong>  2<br><strong>解释:</strong> 以下是 num 里长度为 k 的子字符串：</p><ul><li>“430043” 中的 “43” ：43 能整除 430043 。</li><li>“430043” 中的 “30” ：30 不能整除 430043 。</li><li>“430043” 中的 “00” ：0 不能整除 430043 。</li><li>“430043” 中的 “04” ：4 不能整除 430043 。</li><li>“430043” 中的 “43” ：43 能整除 430043 。<br>所以，k 美丽值为 2 。</li></ul></blockquote><h2 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h2><p>&emsp;&emsp;实际上的意思就是输入的数字可以被其长度为k的连续子串所表示的数字整除，因此直接遍历整个字符串，每次取子串然后判断是否可以被整除即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">divisorSubstrings</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string str <span class="token operator">=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len <span class="token operator">-</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>                tmp <span class="token operator">+=</span> str<span class="token punctuation">[</span>i<span class="token operator">+</span>j<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">%</span> tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-分割数组的方案数"><a href="#2-分割数组的方案数" class="headerlink" title="  2 分割数组的方案数 "></a><h3> <span id="Tag2"> 2 分割数组的方案数 </span></h3><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/number-of-ways-to-split-array/" title="2270. 分割数组的方案数">2270. 分割数组的方案数</a></li></ul><p>给你一个下标从 <code>0</code> 开始长度为 <code>n</code> 的整数数组 <code>nums</code> 。<br>如果以下描述为真，那么 <code>nums</code> 在下标 i 处有一个 <strong>合法的分割</strong> ：</p><p>前 <code>i + 1</code> 个元素的和 <strong>大于等于</strong> 剩下的 <code>n - i - 1</code> 个元素的和。<br>下标 <code>i</code> 的右边 至少有一个 元素，也就是说下标 <code>i</code> 满足 <code>0 &lt;= i &lt; n - 1</code> 。<br>请你返回 <code>nums</code> 中的 <strong>合法分割</strong> 方案数。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  nums = [10,4,-8,7]<br><strong>输出:</strong>  2<br><strong>解释:</strong>  总共有 3 种不同的方案可以将 nums 分割成两个非空的部分：</p><ul><li>在下标 0 处分割 nums 。那么第一部分为 [10] ，和为 10 。第二部分为 [4,-8,7] ，和为 3 。因为 10 &gt;= 3 ，所以 i = 0 是一个合法的分割。</li><li>在下标 1 处分割 nums 。那么第一部分为 [10,4] ，和为 14 。第二部分为 [-8,7] ，和为 -1 。因为 14 &gt;= -1 ，所以 i = 1 是一个合法的分割。</li><li>在下标 2 处分割 nums 。那么第一部分为 [10,4,-8] ，和为 6 。第二部分为 [7] ，和为 7 。因为 6 &lt; 7 ，所以 i = 2 不是一个合法的分割。<br>所以 nums 中总共合法分割方案受为 2 。</li></ul></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  nums = [2,3,1,0]<br><strong>输出:</strong>  2<br><strong>解释:</strong>  总共有 2 种 nums 的合法分割：</p><ul><li>在下标 1 处分割 nums 。那么第一部分为 [2,3] ，和为 5 。第二部分为 [1,0] ，和为 1 。因为 5 &gt;= 1 ，所以 i = 1 是一个合法的分割。</li><li>在下标 2 处分割 nums 。那么第一部分为 [2,3,1] ，和为 6 。第二部分为 [0] ，和为 0 。因为 6 &gt;= 0 ，所以 i = 2 是一个合法的分割。</li></ul></blockquote><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h2><p>&emsp;&emsp;遍历整个数组，题目意思就是让以当前遍历到的数字为分界，其左侧子数组的加和大于右侧子数组的加和即为 <strong>有效的分割</strong> 。因此，可以采用前缀和，先求数组的前缀和（用<code>vec</code>数组来存储前缀和），然后遍历数组，判断<code>vec[i] &gt; vec[n-1]-vec[i]</code>是否成立，若是则说明当前的分割为有效分割，计数器加<code>1</code>，否则不做处理。</p><p>&emsp;&emsp;需要注意的是，题目中<code>-10^5 &lt;= nums[i] &lt;= 10^5</code>且<code>2 &lt;= nums.length() &lt;= 10^5</code>,因而前缀和(-10,000,000,000~10,000,000,000)可能越界(-2^31 ~ 2^31-1 = -2,147,483,648~2,147,483,647),因而<code>vec</code>的数据类型应该定义为<code>long long</code>。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">waysToSplitArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> vec<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-毯子覆盖的最多白色砖块数"><a href="#3-毯子覆盖的最多白色砖块数" class="headerlink" title="  3 毯子覆盖的最多白色砖块数 "></a><h3> <span id="Tag3"> 3 毯子覆盖的最多白色砖块数 </span></h3><h1 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/maximum-white-tiles-covered-by-a-carpet/" title="2271. 毯子覆盖的最多白色砖块数">2271. 毯子覆盖的最多白色砖块数</a></li></ul><p>给你一个二维整数数组 <code>tiles</code> ，其中 <code>tiles[i] = [li, ri]</code> ，表示所有在 <code>li &lt;= j &lt;= ri</code> 之间的每个瓷砖位置 <code>j</code> 都被涂成了白色。</p><p>同时给你一个整数 <code>carpetLen</code> ，表示可以放在 <strong>任何位置</strong> 的一块毯子。</p><p>请你返回使用这块毯子，<strong>最多</strong> 可以盖住多少块瓷砖。</p><p><strong>示例1：</strong></p><p><img src="/2022/05/31/leetcode-biweekly-contest-78/2271-1.png" alt></p><blockquote><p><strong>输入:</strong>  tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10<br><strong>输出:</strong>  9<br><strong>解释:</strong>  将毯子从瓷砖 10 开始放置。<br>总共覆盖 9 块瓷砖，所以返回 9 。<br>注意可能有其他方案也可以覆盖 9 块瓷砖。<br>可以看出，瓷砖无法覆盖超过 9 块瓷砖。</p></blockquote><p><strong>示例2：</strong></p><p><img src="/2022/05/31/leetcode-biweekly-contest-78/2271-2.png" alt></p><blockquote><p><strong>输入:</strong>  tiles = [[10,11],[1,1]], carpetLen = 2<br><strong>输出:</strong>  2<br><strong>解释:</strong>  将毯子从瓷砖 10 开始放置。<br>总共覆盖 2 块瓷砖，所以我们返回 2 。</p></blockquote><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 思路</h3></h2><p>&emsp;&emsp;简单的模拟即可，采用<strong>前缀和+哈希表</strong>的方法进行求解，前缀和用于求从第一个区间到最后一个区间中的<code>瓷砖</code>总数，然后用一个哈希表来存储区间左右端点以及对应的从第一个区间到当前区间的<code>瓷砖</code>数目。用<code>lower_bound</code>来求第一个不在覆盖范围的区间，然后求这个覆盖区间中的瓷砖数，求其最大值即可。</p><p>&emsp;&emsp;ps: 这道题用线段树更为简单。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    map<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maximumWhiteTiles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> tiles<span class="token punctuation">,</span> <span class="token keyword">int</span> carpetLen<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>tiles<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tiles<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> tiles<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">>=</span> carpetLen<span class="token punctuation">)</span>    <span class="token keyword">return</span> carpetLen<span class="token punctuation">;</span>            vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span>            m<span class="token punctuation">[</span><span class="token function">make_pair</span><span class="token punctuation">(</span>tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span> iter <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>carpetLen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">==</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> vec<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">-</span> vec<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> iter<span class="token operator">-></span>second <span class="token operator">-</span> vec<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">-></span>first<span class="token punctuation">.</span>second <span class="token operator">></span> tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>carpetLen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tmp <span class="token operator">-=</span> iter<span class="token operator">-></span>first<span class="token punctuation">.</span>first <span class="token operator">-</span> iter<span class="token operator">-></span>first<span class="token punctuation">.</span>second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    tmp <span class="token operator">-=</span> iter<span class="token operator">-></span>first<span class="token punctuation">.</span>first <span class="token operator">-</span> <span class="token punctuation">(</span>tiles<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>carpetLen<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>                        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 力扣双周赛 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JZOffer-44</title>
      <link href="/2022/05/31/JZOffer-44/"/>
      <url>/2022/05/31/JZOffer-44/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-44-数字序列中某一位的数字"><a href="#剑指-Offer-44-数字序列中某一位的数字" class="headerlink" title=" 剑指 Offer 44. 数字序列中某一位的数字"></a><h2> 剑指 Offer 44. 数字序列中某一位的数字</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/shu-zi-xu-lie-zhong-mou-yi-wei-de-shu-zi-lcof/" title="剑指 Offer 44. 数字序列中某一位的数字">剑指 Offer 44. 数字序列中某一位的数字</a></li></ul><p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p><p>请写一个函数，求任意第n位对应的数字。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  n = 3<br><strong>输出:</strong>  3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  n = 11<br><strong>输出:</strong>  0</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;个位一共有<code>(9-1+1)*1 = 9</code>位数(0不算)，十位有<code>(99-10+1)*2 = 2*9*10 = 180</code>, 百位有<code>(999-100+1)*3 = 3*9*100 = 2700</code>……因而，设某个数为<code>i</code>，其位数为<code>j</code>，则从<code>1~i</code>的序列一共的数字位数<code>n</code>(包含其本身)为：</p><script type="math/tex; mode=display">n = \sum\limits_{k=1}\limits^{j}k*9*10^{j-1} + j*(i-10^{j-1})</script><p>上边的式子中第一项实际上就是计算位数小于<code>j</code>的数字的数字位数总和，而后边一项则是求位数为<code>j</code>的第一个数到<code>i</code>之间的数字的数字位数总和。</p><p>&emsp;&emsp;因此，直接的办法就是先求前边那一项来确定目标数的位数，即用一个变量<code>cnt</code>来记录前边一项的结果，当<code>cnt + j*9*pow(10, j-1)&gt; n</code>时，说明数字位数为<code>j</code>. 然后利用<code>n - cnt</code>来确定第二项，进而再确定目标数的值.剩余数字位数除以当前的数字有多少位即可得到目标数，即<code>(n-cnt)/j</code>。最后确定序列中第<code>n</code>位数字是目标数的哪一位，返回对应位即可。<strong>注意，计算目标数时</strong>，其公式应该为：</p><script type="math/tex; mode=display">\begin{equation*}target = 10^{j-1} + (n - cnt)/j - 1 + \begin{cases}1, 如果剩余位无法被当前位数整除\\0, 其他\end{cases}\end{equation*}</script><p><strong>切记</strong>不能少<code>-1</code>，因为<code>cnt</code>中并没有包括$10^{j-1}$这一个数字。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 计算目标数的位数</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token punctuation">;</span> cnt<span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">9</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt <span class="token operator">+=</span> j<span class="token operator">*</span><span class="token number">9</span><span class="token operator">*</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 计算剩余位数</span>        cnt <span class="token operator">=</span> n <span class="token operator">-</span> cnt<span class="token punctuation">;</span>        <span class="token comment">// 计算目标数</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> cnt<span class="token operator">/</span>j <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// 计算对应位上的数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">%</span> j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> num <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> j<span class="token operator">-</span><span class="token punctuation">(</span>cnt<span class="token operator">%</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JZOffer-60</title>
      <link href="/2022/05/30/JZOffer-60/"/>
      <url>/2022/05/30/JZOffer-60/</url>
      
        <content type="html"><![CDATA[<h1 id="剑指-Offer-60-n个骰子的点数"><a href="#剑指-Offer-60-n个骰子的点数" class="headerlink" title=" 剑指 Offer 60. n个骰子的点数"></a><h2> 剑指 Offer 60. n个骰子的点数</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/nge-tou-zi-de-dian-shu-lcof/" title="剑指 Offer 60. n个骰子的点数">剑指 Offer 60. n个骰子的点数</a></li></ul><p>把<code>n</code>个骰子扔在地上，所有骰子朝上一面的点数之和为<code>s</code>。输入<code>n</code>，打印出<code>s</code>的所有可能的值出现的概率。</p><p>?</p><p>你需要用一个浮点数数组返回答案，其中第 <code>i</code> 个元素代表这 <code>n</code> 个骰子所能掷出的点数集合中第 <code>i</code> 小的那个的概率。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  1<br><strong>输出:</strong>  [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  2<br><strong>输出:</strong>  [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>&emsp;&emsp;采用动态规划，当骰子数为<code>n</code>时，所有骰子的总点数即为<code>x</code>，其对应的概率设为<code>f[n][x]</code>,则应该有：</p><script type="math/tex; mode=display">f[n][x] = \frac{1}{6}\sum\limits_{i=1}\limits^{6} f[n-1][x-i]</script><p>因此，不难写出以下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>  n <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化存储空间：在遍历骰子时创建数组，然后遍历完成后将数组赋给答案数组。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">dicesProbability</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token operator">++</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tmp<span class="token punctuation">[</span>j<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">+=</span> res<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">6.0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bitwise-operation</title>
      <link href="/2022/05/28/bitwise-operation/"/>
      <url>/2022/05/28/bitwise-operation/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title=" Problem List"></a><h2> Problem List</h2></h1><ul><li>[1] <a href="#Tag1">数组中数字出现的次数I</a></li><li>[2] <a href="#Tag2">数组中数字出现的次数II</a></li><li>[3] <a href="#Tag3">剑指 Offer 65. 不用加减乘除做加法</a></li></ul><h3 id="1-I-数组中数字出现的次数"><a href="#1-I-数组中数字出现的次数" class="headerlink" title="  1 I. 数组中数字出现的次数 "></a><h3> <span id="Tag1"> 1 I. 数组中数字出现的次数 </span></h3><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-lcof/" title="剑指 Offer 56 - I. 数组中数字出现的次数">剑指 Offer 56 - I. 数组中数字出现的次数</a></li></ul><p>一个整型数组 <code>nums</code> 里除两个数字之外，其他数字都出现了两次。请写程序找出这两个只出现一次的数字。要求时间复杂度是<code>O(n)</code>，空间复杂度是<code>O(1)</code>。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  nums = [4,1,4,6]<br><strong>输出:</strong>  [1,6] 或 [6,1]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  nums = [1,2,10,4,1,4,3,3]<br><strong>输出:</strong>  [2,10] 或 [10,2]</p></blockquote><h2 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h2><p>&emsp;&emsp;先将问题简化为“数组中除了一个数，其他数都出现了两次”的子问题，而该子问题可以直接通过对数组的全部元素进行异或操作，由于相同数字进行异或的结果为0，而0和一个非零数进行异或的结果为该非零数，进而对数组进行异或最后的结果即为只出现一次的那个数字。</p><p>&emsp;&emsp;而此题是有两个数字出现了一次、其余数字均出现了两次，因而可以将数组分为两组进行异或，而两组异或后的结果就是这两个数。那么如何分组？这两个数进行异或都必不为0，因此可以用两者异或后的数中不为0的bit作为mask，按照mask来对数组进行分组。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">singleNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp <span class="token operator">^=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> bit <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tmp<span class="token operator">&amp;</span>bit<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bit <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bit<span class="token operator">&amp;</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                a <span class="token operator">^=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                b <span class="token operator">^=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-II-数组中数字出现的次数-II"><a href="#2-II-数组中数字出现的次数-II" class="headerlink" title="  2 II. 数组中数字出现的次数 II "></a><h3> <span id="Tag2"> 2 II. 数组中数字出现的次数 II </span></h3><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/" title="剑指 Offer 56 - II. 数组中数字出现的次数 II">剑指 Offer 56 - II. 数组中数字出现的次数 II</a></li></ul><p>在一个数组 nums 中除一个数字只出现一次之外，其他数字都出现了三次。请找出那个只出现一次的数字。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  nums = [3,4,3,3]<br><strong>输出:</strong>  4</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  nums = [9,1,7,9,7,9,7]<br><strong>输出:</strong>  1</p></blockquote><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h2><p>&emsp;&emsp;遍历整个数组，按位对每个元素的对应位置上的bit进行求和，当和不为3的整数倍，即<code>sum%3 == 1</code>时，说明只出现1次的那个数的当前位上的bit为1，则将该bit转为十进制并加到答案中即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">31</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>j<span class="token operator">>></span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-不用加减乘除做加法"><a href="#3-不用加减乘除做加法" class="headerlink" title="  3 不用加减乘除做加法 "></a><h3> <span id="Tag2"> 3 不用加减乘除做加法 </span></h3><h1 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/shu-zu-zhong-shu-zi-chu-xian-de-ci-shu-ii-lcof/" title="剑指 Offer 65. 不用加减乘除做加法">剑指 Offer 65. 不用加减乘除做加法</a></li></ul><p>写一个函数，求两个整数之和，要求在函数体内不得使用 “+”、“-”、“*”、“/” 四则运算符号。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  a = 1, b = 1<br><strong>输出:</strong>  2</p></blockquote><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 思路</h3></h2><p>&emsp;&emsp;本题不允许任何四则运算，因而首先考虑位运算。首先考虑两个二进制数的相加：<code>a=1001, b=1011</code>.</p><ul><li>异或操作：<code>a ^ b = 0010</code>, 可以看作没有进位的加法.</li><li>与操作：<code>a &amp; b = 1001</code>, 可以看作发生进位的数字，相应的进位实际上是加到其左移一位的位置上，即<code>(a &amp; b) &lt;&lt;1</code>.</li></ul><p>&emsp;&emsp;因此，两个数的加法可以看作无进位加法和进位的叠加，即<code>a+b = a^b + (a&amp;b)&lt;&lt;1</code>. 注意，左侧为加法，右侧依然为加法，因而可以持续进行异或和与操作直至无进位即可实现无四则运算的加法。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>                <span class="token comment">// 不考虑进位的加和</span>            b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 进位</span>            a <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;实际上，这个过程就是一个递归过程，递归的结束标志为进位为零，这里即指<code>b == 0</code>, 因而可以改写为以下代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token operator">^</span>b<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意:</strong> Cpp里不支持对负数进行左移操作，因此需要将与操作的结果转换为无符号整型。</p></blockquote></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-weekly-contest-294</title>
      <link href="/2022/05/28/leetcode-weekly-contest-294/"/>
      <url>/2022/05/28/leetcode-weekly-contest-294/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title=" Problem List"></a><h2> Problem List</h2></h1><ul><li>[1] <a href="#Tag1">字母在字符串中的百分比</a></li><li>[2] <a href="#Tag2">装满石头的背包的最大数量</a></li><li>[3] <a href="#Tag3">表示一个折线图的最少线段数</a></li><li>[4] 巫师的总力量和(<strong>我不会</strong>)</li></ul><h3 id="1-字母在字符串中的百分比"><a href="#1-字母在字符串中的百分比" class="headerlink" title="  1 字母在字符串中的百分比 "></a><h3> <span id="Tag1"> 1 字母在字符串中的百分比 </span></h3><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/percentage-of-letter-in-string/" title="2278. 字母在字符串中的百分比">2278. 字母在字符串中的百分比</a></li></ul><p>给你一个字符串 <code>s</code> 和一个字符 <code>letter</code> ，返回在 <code>s</code> 中等于 <code>letter</code> 字符所占的 <strong>百分比</strong> ，向下取整到最接近的百分比。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  s = “foobar”, letter = “o”<br><strong>输出:</strong>  33</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  s = “jjjj”, letter = “k”<br><strong>输出:</strong>  0</p></blockquote><h2 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h2><p>&emsp;&emsp;遍历字符串，当当前字符与<code>l</code>一致时计数器<code>cnt</code>加1, 然后返回<code>cnt*100/s.length()</code>（百分比）即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">percentageLetter</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">char</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token operator">*</span><span class="token number">100</span><span class="token operator">/</span>n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-装满石头的背包的最大数量"><a href="#2-装满石头的背包的最大数量" class="headerlink" title="  2 装满石头的背包的最大数量 "></a><h3> <span id="Tag2"> 2 装满石头的背包的最大数量 </span></h3><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/maximum-bags-with-full-capacity-of-rocks/" title="2279. 装满石头的背包的最大数量">2279. 装满石头的背包的最大数量</a></li></ul><p>现有编号从?<code>0</code> 到 <code>n - 1</code> 的 <code>n</code> 个背包。给你两个下标从 <code>0</code> 开始的整数数组 <code>capacity</code> 和 <code>rocks</code> 。第 <code>i</code> 个背包最大可以装 <code>capacity[i]</code> 块石头，当前已经装了 <code>rocks[i]</code> 块石头。另给你一个整数 <code>additionalRocks</code> ，表示你可以放置的额外石头数量，石头可以往 <strong>任意</strong> 背包中放置。</p><p>请你将额外的石头放入一些背包中，并返回放置后装满石头的背包的 <strong>最大</strong> 数量。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  capacity = [2,3,4,5], rocks = [1,2,4,4], additionalRocks = 2<br><strong>输出:</strong>  3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  capacity = [10,2,2], rocks = [2,2,0], additionalRocks = 100<br><strong>输出:</strong>  3</p></blockquote><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h2><p>&emsp;&emsp;用一个<code>rest</code>数组来记录每个背包的剩余容量<code>capacity[i]-rock[i]</code>,然后对该数组进行排序。遍历该数组，当当前位置不为<code>0</code>则将<code>additionalRocks</code>减去当前背包的剩余容量并将计数器<code>cnt</code>加<code>1</code>，当<code>additionalRocks</code>不够减（变为负）时说明石头已经用完，直接返回即可。</p><blockquote><p>注意：特殊楼层间隔层数要在<code>special[i]-special[i-1]</code>的基础上再减去<code>1</code>，因为不包括两端的边界。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maximumBags</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> c<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> c<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rest<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                rest<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>rest<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rest<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rest<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            a <span class="token operator">-=</span> rest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-表示一个折线图的最少线段数"><a href="#3-表示一个折线图的最少线段数" class="headerlink" title="  3 表示一个折线图的最少线段数 "></a><h3> <span id="Tag3"> 3 表示一个折线图的最少线段数 </span></h3><h1 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/minimum-lines-to-represent-a-line-chart/" title="2280. 表示一个折线图的最少线段数">2280. 表示一个折线图的最少线段数</a></li></ul><p>给你一个二维整数数组?<code>stockPrices</code> ，其中?<code>stockPrices[i] = [dayi, pricei]</code>?表示股票在?$day_i$?的价格为?$price_i$?。折线图?是一个二维平面上的若干个点组成的图，横坐标表示日期，纵坐标表示价格，折线图由相邻的点连接而成。比方说下图是一个例子：</p><p><img src="/2022/05/28/leetcode-weekly-contest-294/2280.png" alt></p><p>请你返回要表示一个折线图所需要的 <strong>最少线段数</strong> 。</p><p><strong>示例1：</strong></p><p><img src="/2022/05/28/leetcode-weekly-contest-294/2280-1.png" alt></p><blockquote><p><strong>输入:</strong>  stockPrices = [[1,7],[2,6],[3,5],[4,4],[5,4],[6,3],[7,2],[8,1]]<br><strong>输出:</strong>  3</p></blockquote><p><strong>示例2：</strong><br><img src="/2022/05/28/leetcode-weekly-contest-294/2280-2.png" alt></p><blockquote><p><strong>输入:</strong>  stockPrices = [[3,4],[1,2],[7,8],[2,3]]<br><strong>输出:</strong>  1</p></blockquote><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 思路</h3></h2><p>&emsp;&emsp;遍历数组，然后求当前节点的左右两端的斜率是否一致即可，这里注意横轴为<code>day</code>，原数组是无序的，因而需要对其进行排序。斜率其实就是$k = \frac{dy}{dx}$, 则用<code>ly</code>和<code>lx</code>表示当前节点左侧的线段在y方向和x方向的变化量，而用<code>ry</code>和<code>rx</code>表示当前节点右侧的线段在y方向和x方向的变化量，那么当满足：</p><script type="math/tex; mode=display">ly/lx == ry/rx</script><p>时当前节点左右两侧的节点共线，由于整型相乘会向下取整，因而对上式进行变换以避免精度导致的误差：</p><script type="math/tex; mode=display">ly * rx == ry * lx</script><p>但需要注意，整型相乘可能会越界，因而需要对其数据类型进行转换，转换为<code>long long</code>型。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minimumLines</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*sort(s.begin(), s.end(), [](const vector&lt;int> a, const vector&lt;int> b)&#123;            return a[0] &lt; b[0];        &#125;);*/</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> lx <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ly <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> rx <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ry <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>lx<span class="token operator">*</span>ry<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>ly<span class="token operator">*</span>rx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：这里用lambda表达式会超时！！！</p></blockquote></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 力扣周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-weekly-contest-293</title>
      <link href="/2022/05/28/leetcode-weekly-contest-293/"/>
      <url>/2022/05/28/leetcode-weekly-contest-293/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem-List"><a href="#Problem-List" class="headerlink" title=" Problem List"></a><h2> Problem List</h2></h1><ul><li>[1] <a href="#Tag1">移除字母异位词后的结果数组</a></li><li>[2] <a href="#Tag2">不含特殊楼层的最大连续楼层数</a></li><li>[3] <a href="#Tag3">按位与结果大于零的最长组合</a></li><li>[4] <a href="#Tag4">统计区间中的整数数目</a></li></ul><h3 id="1-移除字母异位词后的结果数组"><a href="#1-移除字母异位词后的结果数组" class="headerlink" title="  1 移除字母异位词后的结果数组 "></a><h3> <span id="Tag1"> 1 移除字母异位词后的结果数组 </span></h3><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h4> 1.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/find-resultant-array-after-removing-anagrams/" title="2273. 移除字母异位词后的结果数组">2273. 移除字母异位词后的结果数组</a></li></ul><p>给你一个下标从 <code>0</code> 开始的字符串 <code>words</code> ，其中 <code>words[i]</code> 由小写英文字符组成。</p><p>在一步操作中，需要选出任一下标 <code>i</code> ，从 <code>words</code> 中 删除 <code>words[i]</code> 。其中下标 <code>i</code> 需要同时满足下述两个条件：</p><ol><li><code>0 &lt; i &lt; words.length</code></li><li><code>words[i - 1]</code> 和 <code>words[i]</code> 是 <em>字母异位词</em> 。</li></ol><p>只要可以选出满足条件的下标，就一直执行这个操作。</p><p>在执行所有操作后，返回 <code>words</code> 。可以证明，按任意顺序为每步操作选择下标都会得到相同的结果。</p><p><strong>字母异位词</strong> 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。例如，<code>&quot;dacb&quot;</code> 是 <code>&quot;abdc&quot;</code> 的一个字母异位词。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  words = [“abba”,”baba”,”bbaa”,”cd”,”cd”]<br><strong>输出:</strong>  [“abba”,”cd”]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  words = [“a”,”b”,”c”,”d”,”e”]<br><strong>输出:</strong>  [“a”,”b”,”c”,”d”,”e”]</p></blockquote><h2 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h2><p>&emsp;&emsp;也就是如果相邻两个 <code>word</code> 为 <em>字母异位词</em> ，则保留前边一个单词，删去后一个单词直至相邻两个单词不为 <em>字母异位词</em> 。因此，可以遍历整个 <code>words</code>, 并用两个哈希表分别记录前一个单词的每个字母出现的次数以及后一个单词的字母次数，然后进行对比，如果二者的每个字母出现的次数均一致，说明二者互为字母异位词，进而不跳过当前单词(前一个单词插入答案中，后一个不插入)。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">removeAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> words<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last_hash<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> c<span class="token operator">:</span> words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            last_hash<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> ch<span class="token operator">:</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                hash<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> last_hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    last_hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> hash<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-不含特殊楼层的最大连续楼层数"><a href="#2-不含特殊楼层的最大连续楼层数" class="headerlink" title="  2 不含特殊楼层的最大连续楼层数 "></a><h3> <span id="Tag2"> 2 不含特殊楼层的最大连续楼层数 </span></h3><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h4> 2.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/maximum-consecutive-floors-without-special-floors/" title="2274. 不含特殊楼层的最大连续楼层数">2274. 不含特殊楼层的最大连续楼层数</a></li></ul><p>Alice 管理着一家公司，并租用大楼的部分楼层作为办公空间。Alice 决定将一些楼层作为 <strong>特殊楼层</strong> ，仅用于放松。</p><p>给你两个整数 <code>bottom</code> 和 <code>top</code> ，表示 Alice 租用了从 <code>bottom</code> 到 <code>top</code>（含 <code>bottom</code> 和 <code>top</code> 在内）的所有楼层。另给你一个整数数组 <code>special</code> ，其中 <code>special[i]</code> 表示? Alice 指定用于放松的特殊楼层。</p><p>返回不含特殊楼层的 <strong>最大</strong> 连续楼层数。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  bottom = 2, top = 9, special = [4,6]<br><strong>输出:</strong>  3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  bottom = 6, top = 8, special = [7,6,8]<br><strong>输出:</strong>  0</p></blockquote><h2 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h2><p>&emsp;&emsp;找不含特殊楼层的 <strong>最大</strong> 连续楼层数，实际上就是找<code>bottom</code> 到特殊楼层中的最低层之间的层数、特殊楼层最顶层到 <code>top</code> 之间的层数和特殊楼层中的间隔层数三者中的最大值。因而直接对特殊楼层数组<code>special</code>进行排序，然后<code>m1 = max(special[0]-bottom, top - special[special.size()-1])</code>即为前二者的最大值，然后遍历整个<code>special</code>数组来求取特殊楼层间最大间隔层数<code>m2 = max(m, special[i]-special[i-1]-1)</code>, 最后<code>max(m1, m2)</code>即为答案。</p><blockquote><p>注意：特殊楼层间隔层数要在<code>special[i]-special[i-1]</code>的基础上再减去<code>1</code>，因为不包括两端的边界。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxConsecutive</span><span class="token punctuation">(</span><span class="token keyword">int</span> bottom<span class="token punctuation">,</span> <span class="token keyword">int</span> top<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> special<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>special<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> special<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> special<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> special<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span> special<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>special<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> bottom<span class="token punctuation">,</span> top <span class="token operator">-</span> special<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-按位与结果大于零的最长组合"><a href="#3-按位与结果大于零的最长组合" class="headerlink" title="  3 按位与结果大于零的最长组合 "></a><h3> <span id="Tag3"> 3 按位与结果大于零的最长组合 </span></h3><h1 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h4> 3.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/largest-combination-with-bitwise-and-greater-than-zero/" title="2275. 按位与结果大于零的最长组合">2275. 按位与结果大于零的最长组合</a></li></ul><p>对数组?<code>nums</code> 执行 <strong>按位与</strong> 相当于对数组?<code>nums</code> 中的所有整数执行 <strong>按位与</strong> 。</p><p>例如，对 <code>nums = [1, 5, 3]</code> 来说，按位与等于 <code>1 &amp; 5 &amp; 3 = 1</code> 。<br>同样，对 <code>nums = [7]</code> 而言，按位与等于 <code>7</code> 。<br>给你一个正整数数组 <code>candidates</code> 。计算 <code>candidates</code> 中的数字每种组合下 <strong>按位与</strong> 的结果。 <code>candidates</code> 中的每个数字在每种组合中只能使用 <strong>一次</strong> 。</p><p>返回按位与结果大于 <code>0</code> 的 <strong>最长</strong> 组合的长度。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  candidates = [16,17,71,62,12,24,14]<br><strong>输出:</strong>  4</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  candidates = [8,8]<br><strong>输出:</strong>  2</p></blockquote><h2 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 思路</h3></h2><p>&emsp;&emsp;自己的思路是两个for循环逐位遍历整个数组，当当前结果和当前遍历的数组按位与后为0则不选取该数字，否则则选取当前数字。但实际上这种做法并不能求得最长长度。</p><p>&emsp;&emsp;大佬的想法是统计数组中32个bit上每个元素上为1的数量，某一个bit为1最多的即为按位与后结果大于<code>0</code>的最长组合长度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">largestCombination</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">24</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">:</span> candidates<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>></span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cnt<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-统计区间中的整数数目"><a href="#4-统计区间中的整数数目" class="headerlink" title="  4 统计区间中的整数数目 "></a><h3> <span id="Tag4"> 4 统计区间中的整数数目 </span></h3><h1 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h4> 4.1 题目描述</h4></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/count-integers-in-intervals/" title="2276. 统计区间中的整数数目">2276. 统计区间中的整数数目</a></li></ul><p>给你区间的 <strong>空</strong> 集，请你设计并实现满足要求的数据结构：</p><ul><li>新增：添加一个区间到这个区间集合中。</li><li>统计：计算出现在 至少一个 区间中的整数个数。</li></ul><p>实现 <code>CountIntervals</code> 类：</p><ul><li><code>CountIntervals()</code> 使用区间的空集初始化对象</li><li><code>void add(int left, int right)</code> 添加区间 <code>[left, right]</code> 到区间集合之中。</li><li><code>int count()</code> 返回出现在 <strong>至少一个</strong> 区间中的整数个数。</li></ul><p><strong>注意</strong>：区间 <code>[left, right]</code> 表示满足 <code>left &lt;= x &lt;= right</code> 的所有整数 <code>x</code> 。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong>  [“CountIntervals”, “add”, “add”, “count”, “add”, “count”]<br>&emsp; &emsp; [[], [2, 3], [7, 10], [], [5, 8], []]<br><strong>输出:</strong>  [null, null, null, 6, null, 8]</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong>  words = [“a”,”b”,”c”,”d”,”e”]<br><strong>输出:</strong>  CountIntervals countIntervals = new CountIntervals(); // 用一个区间空集初始化对象<br>countIntervals.add(2, 3);&emsp;&emsp;// 将 [2, 3] 添加到区间集合中<br>countIntervals.add(7, 10);&emsp; // 将 [7, 10] 添加到区间集合中<br>countIntervals.count(); &emsp; &emsp; // 返回 6<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; // 整数 2 和 3 出现在区间 [2, 3] 中<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp;                           // 整数 7、8、9、10 出现在区间 [7, 10] 中<br>countIntervals.add(5, 8);&emsp;&emsp;// 将 [5, 8] 添加到区间集合中<br>countIntervals.count(); &emsp; &emsp; // 返回 8<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; // 整数 2 和 3 出现在区间 [2, 3] 中<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; // 整数 5 和 6 出现在区间 [5, 8] 中<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; // 整数 7 和 8 出现在区间 [5, 8] 和区间 [7, 10] 中<br>&emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; &emsp; // 整数 9 和 10 出现在区间 [7, 10] 中</p></blockquote><h2 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h4> 4.2 思路</h4></h2><p>&emsp;&emsp;其实就是 <strong>区间合并</strong>，用一个哈希表来存储当前的区间，然后查找待插入区间的位置，这里用<code>set.lower_bound</code>来找待插入区间左端点位于当前区间集的位置(当前区间集为有序集合), 然后再考虑待插入区间的右端点。循环遍历区间集，当当前遍历到的区间的左端点大于待插入区间的右端点时说明右端点的位置已经找到，进而插入待插入区间，并从区间集中删去重叠部分。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CountIntervals</span> <span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> s<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CountIntervals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> iter <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//找左端点</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>iter <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            iter<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> left<span class="token punctuation">,</span> r <span class="token operator">=</span> right<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> to_erase<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iter <span class="token operator">!=</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> iter<span class="token operator">-></span>first <span class="token operator">&lt;=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//找右端点</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>iter<span class="token operator">-></span>second <span class="token operator">&lt;</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                iter<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            to_erase<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token operator">*</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//记录待删去的区间</span>            l <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>iter<span class="token operator">-></span>first<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>            r <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> iter<span class="token operator">-></span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            iter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//必须要先删去区间后再将待插入区间插入</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i<span class="token operator">:</span> to_erase<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">//删去区间</span>            cnt <span class="token operator">-=</span> i<span class="token punctuation">.</span>second <span class="token operator">-</span> i<span class="token punctuation">.</span>first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cnt <span class="token operator">+=</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：必须要删去重叠部分的区间之后再进行待插入区间的插入。如果先插入后删除，可能会出现待插入区间本身就存在于区间集，此时这个区间集是需要被删去的，那么先插入该区间，而set不允许同个key的插入，因而会插入失败，然后删除时会把该区间删去，导致区间插入失败，即如果区间集中存在待插入区间时，实际上是先删去该区间再重新插入该区间。</p></blockquote></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 哈希 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 力扣周赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>computer network</title>
      <link href="/2022/05/03/computer-network/"/>
      <url>/2022/05/03/computer-network/</url>
      
        <content type="html"><![CDATA[<h1 id="0-绪论"><a href="#0-绪论" class="headerlink" title=" 0 绪论"></a><h1> 0 绪论</h1><ol><li>传输层：为多个远程应用进程提供服务，是在网络层所提供的<strong>端到端</strong>的服务基础上实现的进程到进程的服务（细分了网络层的服务,且可靠）。</li><li>网络层：完成原主机到目标主机间的数据交互（无保障，“尽力而为”）.</li><li>链路层：完成相邻两个节点间的以帧为单位的数据交换，完成<strong>点到点</strong>的数据传输。</li><li>分布式应用是网络存在的理由，网络是为分布式应用提供通讯服务的基础设施。</li></ol></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch10-of-programmercarl-4</title>
      <link href="/2022/04/19/ch10-of-programmercarl-4/"/>
      <url>/2022/04/19/ch10-of-programmercarl-4/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">1035. 不相交的线</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">53. 最大子序和</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">392.判断子序列</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">115.不同的子序列</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">583. 两个字符串的删除操作</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">72. 编辑距离</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">647. 回文子串</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">516.最长回文子序列</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-不相交的线"><a href="#1-不相交的线" class="headerlink" title="  1 不相交的线 "></a><h2> <span id="Tag1"> 1 不相交的线 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/uncrossed-lines/" title="1035. 不相交的线">1035. 不相交的线</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>在两条独立的水平线上按给定的顺序写下 <code>nums1</code> 和 <code>nums2</code> 中的整数。</p><p>现在，可以绘制一些连接两个数字 <code>nums1[i]</code> 和 <code>nums2[j]</code> 的直线，这些直线需要同时满足满足：</p><ul><li><code>nums1[i] == nums2[j]</code></li><li>且绘制的直线不与任何其他连线（非水平线）相交。</li></ul><p>请注意，连线即使在端点也不能相交：每个数字只能属于一条连线。</p><p>以这种方法绘制线条，并返回可以绘制的最大连线数。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch10-of-programmercarl-4/1035.png" alt></p><blockquote><p><strong>输入:</strong> nums1 = [1,4,2], nums2 = [1,2,4]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 可以画出两条不交叉的线，如上图所示。<br>但无法画出第三条不相交的直线，因为从 nums1[1]=4 到 nums2[2]=4 的直线将与从 nums1[2]=2 到 nums2[1]=2 的直线相交。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]<br><strong>输出:</strong> 3</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]<br><strong>输出:</strong> 2</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;其实这道题就是找公共子序列，和<a href="https://leetcode-cn.com/problems/longest-common-subsequence/" title="1143. 最长公共子序列">1143. 最长公共子序列</a>是一样的。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxUncrossedLines</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxUncrossedLines</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>nums1Size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>nums2Size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums1Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> nums2Size<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums1Size<span class="token punctuation">]</span><span class="token punctuation">[</span>nums2Size<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-最大子数组和"><a href="#2-最大子数组和" class="headerlink" title="  2 最大子数组和 "></a><h2> <span id="Tag2"> 2 最大子数组和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/" title="53. 最大子数组和">53. 最大子数组和</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1]<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [5,4,-1,7,8]<br><strong>输出:</strong> 23</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-判断子序列"><a href="#3-判断子序列" class="headerlink" title="  3 判断子序列 "></a><h2> <span id="Tag3"> 3 判断子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/is-subsequence/" title="392. 判断子序列">392. 判断子序列</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定字符串 <code>s</code> 和 <code>t</code> ，判断 <code>s</code> 是否为 <code>t</code> 的子序列。</p><p>字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，<code>&quot;ace&quot;</code>是<code>&quot;abcde&quot;</code>的一个子序列，而<code>&quot;aec&quot;</code>不是）。</p><p>进阶：</p><p>如果有大量输入的 <code>S</code>，称作 <code>S1, S2, ... , Sk</code> 其中 <code>k &gt;= 10亿</code>，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abc”, t = “ahbgdc”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “axc”, t = “ahbgdc”<br><strong>输出:</strong> false</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;找公共子序列，如果公共子序列的长度为<code>s</code>的长度时，说明<code>s</code>为<code>t</code>的子序列，返回<code>true</code>,否则返回<code>false</code>.</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isSubsequence</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s_len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t_len <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_len <span class="token operator">></span> t_len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>s_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s_len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> t_len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> len <span class="token operator">==</span> s_len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> tlen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>slen <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tlen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> slen<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-不同的子序列"><a href="#4-不同的子序列" class="headerlink" title="  4 不同的子序列 "></a><h2> <span id="Tag4"> 4 不同的子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/distinct-subsequences/" title="115. 不同的子序列">115. 不同的子序列</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定一个字符串 <code>s</code> 和一个字符串 <code>t</code> ，计算在 <code>s</code> 的子序列中 t 出现的个数。</p><p>字符串的一个 <strong>子序列</strong> 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，<code>&quot;ACE&quot;</code> 是 <code>&quot;ABCDE&quot;</code> 的一个子序列，而 <code>&quot;AEC&quot;</code> 不是）</p><p>题目数据保证答案符合 <code>32</code> 位带符号整数范围。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “rabbbit”, t = “rabbit”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 如下图所示, 有 3 种可以从 s 中得到 “rabbit” 的方案。<br>$\underline{\text{rabb}}$b$\underline{\text{it}}$<br>$\underline{\text{ra}}$b$\underline{\text{bbit}}$<br>$\underline{\text{rab}}$b$\underline{\text{bit}}$</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “babgbag”, t = “bag”<br><strong>输出:</strong> 5<br><strong>解释:</strong> 如下图所示, 有 3 种可以从 s 中得到 “rabbit” 的方案。<br>$\underline{\text{ba}}$b$\underline{\text{g}}$bag<br>$\underline{\text{ba}}$bgba$\underline{\text{g}}$<br>$\underline{\text{b}}$abgb$\underline{\text{ag}}$<br>ba$\underline{\text{b}}$gb$\underline{\text{ag}}$<br>babg$\underline{\text{bag}}$</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p><code>dp[i][j]</code>的含义为：字符串<code>s</code>的前<code>j</code>个字符所组成的含有字符串<code>t</code>的前<code>i</code>个字符的子序列数量。</p><ul><li><p>第一步，找<code>t</code>的前<code>1</code>个字符即<code>i = 1</code>(此时下标为<code>0</code>)在字符串<code>s</code>中出现的次数，因而需要遍历字符串<code>s</code>，当遍历到的字符与<code>t[0]</code>相等时，说明找到相同的，而<code>t[0]</code>在<code>s[0...j]</code>出现的次数等同于<code>t[0]</code>在<code>s[0...j-1]</code>和<code>s[j-1]</code>出现的次数，因此有：<code>dp[0][j] = dp[0][j-1] + 1</code>.</p></li><li><p>第二步，找<code>t</code>的前<code>2</code>个字符即<code>i = 2</code>在字符串<code>s</code>中出现的次数. 如何计算次数呢？我们已经找了前<code>1</code>个字符在<code>s</code>中出现的次数，因而只需判断<code>t[1]</code>与当前遍历到的字符作比较并在前边的基础进行更新即可。当找到<code>t[1] == s[j-1]</code>时，<code>dp[i][j]</code>就等于子串<code>t[0,1]</code>在<code>s[0...j-1]</code>中出现的次数和<code>t[0,1]</code>在<code>s[0...j-2]</code>中出现的次数总和，即<code>dp[2][j] = dp[2][j-1] + dp[1][j-1]</code>；否则子串只在<code>s[0...j-1]</code>中出现过，因而<code>dp[2][j] = dp[2][j-1]</code>.</p></li><li>…</li></ul><p>由上述得到状态转移方程为：</p><script type="math/tex; mode=display">\begin{equation*}\begin{cases}\begin{split}dp[i][j] &= dp[i-1][j-1] + dp[i][j-1],\enspace if\enspace s[j-1] == t[i-1]\\dp[i][j] &= dp[i][j-1] \qquad\qquad\qquad\qquad, else\\\end{split}\end{cases}\end{equation*}</script><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> s_len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t_len <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s_len <span class="token operator">&lt;</span> t_len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> dp<span class="token punctuation">[</span>t_len<span class="token punctuation">]</span><span class="token punctuation">[</span>s_len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> t_len<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> s_len<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INT_MAX <span class="token operator">-</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>t_len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>s_len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">numDistinct</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> slen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> tlen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>slen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>tlen<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> slen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> slen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> tlen<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> INT_MAX <span class="token operator">-</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>slen<span class="token punctuation">]</span><span class="token punctuation">[</span>tlen<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-两个字符串的删除操作"><a href="#5-两个字符串的删除操作" class="headerlink" title="  5 两个字符串的删除操作 "></a><h2> <span id="Tag5"> 5 两个字符串的删除操作 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/delete-operation-for-two-strings/" title="583. 两个字符串的删除操作">583. 两个字符串的删除操作</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定两个单词 <code>word1</code> 和 <code>word2</code> ，返回使得 <code>word1</code> 和  <code>word2</code> 相同所需的最小步数。</p><p>每步 可以删除任意一个字符串中的一个字符。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> word1 = “sea”, word2 = “eat”<br><strong>输出:</strong> 2<br><strong>解释:</strong> 第一步将 “sea” 变为 “ea” ，第二步将 “eat “变为 “ea”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> word1 = “leetcode”, word2 = “etco”<br><strong>输出:</strong> 4</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;求最长公共子序列的长度，然后直接计算两个字符串与该长度的差值的加和即可。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> word1_len <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> word2_len <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>word1_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>word2_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> word1_len<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> word2_len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                len <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>word1_len <span class="token operator">+</span> word2_len<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> word1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> len2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> len1<span class="token operator">+</span>len2<span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-编辑距离"><a href="#6-编辑距离" class="headerlink" title="  6 编辑距离 "></a><h2> <span id="Tag6"> 6 编辑距离 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/edit-distance/" title="72. 编辑距离">72. 编辑距离</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你两个单词 word1 和 word2， 请返回将 word1 转换成 word2 所使用的最少操作数  。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> word1 = “horse”, word2 = “ros”<br><strong>输出:</strong> 3<br><strong>解释:</strong><br>horse -&gt; rorse (将 ‘h’ 替换为 ‘r’)<br>rorse -&gt; rose (删除 ‘r’)<br>rose -&gt; ros (删除 ‘e’)</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> word1 = “intention”, word2 = “execution”<br><strong>输出:</strong> 5<br><strong>解释:</strong><br>intention -&gt; inention (删除 ‘t’)<br>inention -&gt; enention (将 ‘i’ 替换为 ‘e’)<br>enention -&gt; exention (将 ‘n’ 替换为 ‘x’)<br>exention -&gt; exection (将 ‘n’ 替换为 ‘c’)<br>exection -&gt; execution (插入 ‘u’)</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;<code>dp[i][j]</code>的含义：<code>word2</code>前<code>i</code>个字符和<code>word1</code>的前<code>j</code>个字符之间的最小编辑距离。</p><ul><li>当检测到word2的当前字符<code>word2[i]</code>和word1当前遍历到的字符<code>word1[j]</code>相等时，不需要进行操作，此时<code>word2</code>前<code>i</code>个字符和<code>word1</code>的前<code>j</code>个字符之间的最小编辑距离就等于此时<code>word2</code>前<code>i-1</code>个字符和<code>word1</code>的前<code>j-1</code>个字符之间的最小编辑距离，即<code>dp[i][j] = dp[i-1][j-1]</code>。</li><li><p>当<code>word2[i] != word1[j]</code>,此时涉及插入新字符、删去当前字符、改变当前字符三种操作（简称增、删、改）</p><ul><li><p>增：实际上就是在<code>word1</code>的当前位置后插入字符<code>word2[i]</code>,这里的操作数为<code>1</code>, 此时 <strong><code>word2[i]</code>就已经有了</strong> ，剩下的操作其实就是<code>word2</code>前 <strong><code>i-1</code></strong> 个字符和<code>word1</code>的前<code>j</code>个字符之间的最小编辑距离，因而有<code>dp[i][j] = dp[i-1][j]+1</code>.</p></li><li><p>删：将<code>word1</code>的当前位置上的字符<code>word1[j]</code>删去，这里的操作数为<code>1</code>, 但此时 <strong><code>word2[i]</code>还是没有</strong> ，因而求<code>word2</code>的前<code>i</code>个字符和<code>word1</code>的前<code>j</code>个字符之间的最小编辑距离就变成求<code>word2</code>的前 <strong><code>i</code></strong> 个字符和<code>word1</code>的前<code>j-1</code>个字符之间的最小编辑距离，即<code>dp[i][j] = dp[i][j-1]+1</code>.</p></li><li><p>改：将<code>word1</code>的当前位置上的字符<code>word1[j]</code>修改为<code>word2[i]</code>，操作数为<code>1</code>；然后 <strong><code>word2[i]</code>就已经有了</strong> ，剩下的就是<code>word2</code>前 <strong><code>i-1</code></strong> 个字符和<code>word1</code>的前<code>j-1</code>个字符之间的最小编辑距离，即<code>dp[i][j] = dp[i-1][j-1]+1</code></p></li></ul></li><li><p>由于我们希望找到最小编辑距离，因而如果需要进行修改，则应该取三种操作中编辑距离最少的操作。</p></li></ul><p>综上所述，可以得到状态转移方程：</p><script type="math/tex; mode=display">\begin{equation*}\begin{cases}\begin{split}dp[i][j] &= dp[i-1][j-1], \qquad\qquad if \: word2[i]==word1[j]\\dp[i][j] &= min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1,\enspace else\end{split}\end{cases}\end{equation*}</script><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>string word1<span class="token punctuation">,</span> string word2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//依次为增、删、改</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> word1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> len2<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> len1<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>word1<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token comment">//依次为增、删、改</span>                dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span><span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>len2<span class="token punctuation">]</span><span class="token punctuation">[</span>len1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-回文子串"><a href="#7-回文子串" class="headerlink" title="  7 回文子串 "></a><h2> <span id="Tag7"> 7 回文子串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/palindromic-substrings/" title="647. 回文子串">647. 回文子串</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个字符串 <code>s</code> ，请你统计并返回这个字符串中 <strong>回文子串</strong> 的数目。</p><p><strong>回文字符串</strong> 是正着读和倒过来读一样的字符串。</p><p><strong>子字符串</strong> 是字符串中的由连续字符组成的一个序列。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abc”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 三个回文子串: “a”, “b”, “c”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s= “aaa”<br><strong>输出:</strong> 6<br><strong>解释:</strong> 6个回文子串: “a”, “a”, “a”, “aa”, “aa”, “aaa”</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;<code>dp[i][j]</code>的含义为：表明<strong>起点为<code>i</code>、终点为<code>j</code>的子串是否为回文串</strong>，如果是则置为<code>true</code>，否则为<code>false</code>. </p><ul><li>当<code>s[i] != s[j]</code>: 此时以<code>i</code>为起点、<code>j</code>为终点的子串不是回文串，因而<code>dp[i][j] = false</code></li><li>当<code>s[i] == s[j]</code>: 有可能是回文串，也有可能不是回文串，需要逐步往中间进行判断，可以分为下面三种情况：<ul><li><ol><li>当<code>i == j</code>时，此时子串仅有一个字符，因而必定为回文串，因此<code>dp[i][j] = true</code>;</li></ol></li><li><ol><li>当<code>i == j-1</code>时，此时子串有两个字符，且二者相等，如<code>aa</code>，此时也为回文串，因此<code>dp[i][j] = true</code>;</li></ol></li><li><ol><li>当<code>i &lt; j-1</code>时，此时子串中有若干个字符，需要往中间判断，如果按照一般的回文串判断，则需要一个循环来判断，当头尾相等则头尾指针往中间移动一格直至相等说明该子串为回文串。动态规划则是利用之前的结果来进行判断：如果<code>s[i] == s[j]</code>, 我们需要判断<code>s[i+1...j-1]</code>是否为回文串，即起点为<code>i+1</code>、终点为<code>j-1</code>的子串是否为回文串，根据<code>dp</code>的定义，这其实就是<code>dp[i+1][j-1]</code>，因此只需要判断<code>dp[i+1][j-1]</code>是否为<code>true</code>即可。</li></ol></li></ul></li></ul><p>&emsp;&emsp;注意，由于需要用到<code>dp[i+1][j-1]</code>， 即下一列的结果，因而需要<strong>从后往前遍历</strong>。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    bool dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> false<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token operator">||</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>                    ans <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-最长回文子序列"><a href="#8-最长回文子序列" class="headerlink" title="  8 最长回文子序列 "></a><h2> <span id="Tag8"> 8 最长回文子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/longest-palindromic-subsequence/" title="516. 最长回文子序列">516. 最长回文子序列</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p><p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “bbbab”<br><strong>输出:</strong> 4<br><strong>解释:</strong> 一个可能的最长回文子序列为 “bbbb” 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “cbbd”<br><strong>输出:</strong> 2<br><strong>解释:</strong> 一个可能的最长回文子序列为 “bb” 。</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>和上一题有点类似，<code>dp[i][j]</code>的含义为：字符串<code>s</code>的以<code>i</code>为头、<code>j</code>为尾的连续子串中的最长回文子序列长度，即子串<code>s[i...j]</code>的最长回文子序列长度。</p><ul><li>当<code>i == j</code>时当前子串长度为<code>1</code>必定为回文串，因此有<code>dp[i][j] = 1</code>.</li><li>当头尾相等时，目前的最长回文子序列长度最少就为<code>2</code>了，现在我们需要对中间进行判断，即由求子串<code>s[i...j]</code>的最长回文子序列长度转化为求子串<code>s[i+1...j-1]</code>的最长回文子序列长度。由dp的定义，则后者其实就是<code>dp[i+1][j-1]</code>，因而有：<code>dp[i][j] = dp[i+1][j-1] + 2</code>.</li><li>当头尾不相等时，<code>s[i...j]</code>的最长回文子序列长度就为<code>s[i...j-1]</code>和<code>s[i+1...j]</code>中的大者，即<code>dp[i][j] = max(dp[i][j-1], dp[i+1][j])</code>.</li></ul><p>与上一题一样，都需要用到<code>dp[i+1][j]</code>, 因而遍历顺序应该由后而前。</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch10-of-programmercarl-3</title>
      <link href="/2022/04/19/ch10-of-programmercarl-3/"/>
      <url>/2022/04/19/ch10-of-programmercarl-3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">121. 买卖股票的最佳时机</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">122. 买卖股票的最佳时机 II</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">123. 买卖股票的最佳时机 III</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">188. 买卖股票的最佳时机 IV</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">309. 最佳买卖股票时机含冷冻期</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">714. 买卖股票的最佳时机含手续费</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">300. 最长递增子序列</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">674. 最长连续递增序列</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">718. 最长重复子数组</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">1143. 最长公共子序列</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-买卖股票的最佳时机"><a href="#1-买卖股票的最佳时机" class="headerlink" title="  1 买卖股票的最佳时机 "></a><h2> <span id="Tag1"> 1 买卖股票的最佳时机 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/" title="121. 买卖股票的最佳时机">121. 买卖股票的最佳时机</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定一个数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 表示一支给定股票第 <code>i</code> 天的价格。</p><p>你只能选择 <strong>某一天</strong> 买入这只股票，并选择在 <strong>未来的某一个不同的日子</strong> 卖出该股票。设计一个算法来计算你所能获取的最大利润。</p><p>返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 <code>0</code>。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 5<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>   注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。<br><strong>示例2:</strong></p><p><strong>输入:</strong> prices = [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>本题只能买卖一次股票，用贪心算法的话相当于当天卖出并买入，实际上就是买卖一次。用动态规划的话，首先定义一个DP数组，其含义为当天的最大利益/最小支出，其中<code>dp[i][0]</code>指手里没有股票，由前一天没有股票和前一天有股票当天卖出两种情况转移而来， 而<code>dp[i][1]</code>则是当天手里有股票，由前一天手里有股票或者当天买入股票两种情况转移而来。因此易得状态转移方程为:</p><script type="math/tex; mode=display">\begin{equation*}\begin{cases}\begin{split}dp[i][0] &= max(dp[i-1][0], dp[i-1][1] + prices[i])\\dp[i][1] &= max(dp[i-1][1], - prices[i])\end{split}\end{cases}\end{equation*}</script><blockquote><p>注意，dp[i][1]的更新，实际上就是比较股票的交割，找个低价的买，切记不能写成<code>max(dp[i-1][1], dp[i-1][0]- prices[i])</code>,这样写变成了多次买卖股票了。</p></blockquote><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>pricesSize<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//0表示当天手里没股票，1表示当天手里有股票</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//dp[i][1] = fmax(dp[i-1][0] - prices[i-1], dp[i-1][1]);</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只允许一次操作</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>pricesSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-买卖股票的最佳时机-II"><a href="#2-买卖股票的最佳时机-II" class="headerlink" title="  2 买卖股票的最佳时机 II "></a><h2> <span id="Tag2"> 2 买卖股票的最佳时机 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" title="122. 买卖股票的最佳时机 II">122. 买卖股票的最佳时机 II</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的</em> <strong>最大</strong> 利润 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [7,1,5,3,6,4]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>    随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。<br>    总利润为 4 + 3 = 7 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,2,3,4,5]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。<br>    总利润为 4 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> prices = [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>这一题其实就是允许多次买卖，实质上和上一题是一样的。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*int ans = 0;    for(int i = 1; i &lt; pricesSize; i++)&#123;        int diff = prices[i]- prices[i-1];        if(diff> 0)&#123;            ans += diff;        &#125;    &#125;    return ans;*/</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>pricesSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-买卖股票的最佳时机-III"><a href="#3-买卖股票的最佳时机-III" class="headerlink" title="  3 买卖股票的最佳时机 III "></a><h2> <span id="Tag3"> 3 买卖股票的最佳时机 III </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/" title="123. 买卖股票的最佳时机 III">123. 买卖股票的最佳时机 III</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个数组，它的第 <code>i</code> 个元素是一支给定的股票在第 <code>i</code> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <strong>两笔</strong> 交易。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [3,3,5,0,0,3,1,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。<br>   随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,2,3,4,5]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> prices = [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这个情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> prices = [1]<br><strong>输出:</strong> 0</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;这一次有买卖次数至多为<code>2</code>的限制，因此创建dp数组<code>dp[2][2]</code>,第一行依次代表买入1次、卖出1次；第二行则是买入2次、卖出2次。买入1次为没买过当天买入和之前已经买入1次没卖出两种情况种的大者，即<code>dp[0][0] = max(dp[0][0], -prices[i])</code>，其实就是比较价格，选择价格低的一天买入；卖出1次则由买入1次转移而来，因而有<code>dp[0][1] = max(dp[0][1], dp[0][0] + prices[i])</code>；买入2次需要在买入1次卖出1次的前提下转移：<code>dp[1][0] = max(dp[1][0], dp[0][1] - prices[i])</code>; 类似的，卖出两次需要在买入2次的前提下转移而来：<code>dp[1][1] = max(dp[1][1], dp[1][0] + prices[i])</code>.</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        int dp[2][2] = &#123;0&#125;；        dp[0][0] = -prices[0], dp[1][0] = -prices[0];        for(int i = 1; i &lt; prices.size(); ++i)&#123;          dp[0][0] = max(dp[0][0], -prices[i]);          dp[0][1] = max(dp[0][1], dp[0][0] + prices[i]);          dp[1][0] = max(dp[1][0], dp[0][1] - prices[i]);          dp[1][1] = max(dp[1][1], dp[1][0] + prices[i]);        &#125;        return dp[1][1];        */</span>        <span class="token keyword">int</span> buy1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buy2 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sell1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sell2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            buy1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>buy1<span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sell1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sell1<span class="token punctuation">,</span> buy1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            buy2 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>buy2<span class="token punctuation">,</span> sell1 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sell2 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>sell2<span class="token punctuation">,</span> buy2 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sell2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*int ans = 0;    for(int i = 1; i &lt; pricesSize; i++)&#123;        int diff = prices[i]- prices[i-1];        if(diff> 0)&#123;            ans += diff;        &#125;    &#125;    return ans;*/</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>pricesSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-买卖股票的最佳时机-IV"><a href="#4-买卖股票的最佳时机-IV" class="headerlink" title="  4 买卖股票的最佳时机 IV "></a><h2> <span id="Tag4"> 4 买卖股票的最佳时机 IV </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/" title="188. 买卖股票的最佳时机 IV">188. 买卖股票的最佳时机 IV</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定一个整数数组 <code>prices</code> ，它的第 <code>i</code> 个元素 <code>prices[i]</code> 是一支给定的股票在第 <code>i</code> 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 <code>k</code> 笔交易。</p><p><strong>注意</strong>：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> k = 2, prices = [2,4,1]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 在第 1 天 (股票价格 = 2) 的时候买入，在第 2 天 (股票价格 = 4) 的时候卖出，这笔交易所能获得利润 = 4-2 = 2 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> k = 2, prices = [3,2,6,5,0,3]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 在第 2 天 (股票价格 = 2) 的时候买入，在第 3 天 (股票价格 = 6) 的时候卖出, 这笔交易所能获得利润 = 6-2 = 4 。<br>    随后，在第 5 天 (股票价格 = 0) 的时候买入，在第 6 天 (股票价格 = 3) 的时候卖出, 这笔交易所能获得利润 = 3-0 = 3 。</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;其实就是上一题的次数改变，套路一样。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/*int ans = 0;    for(int i = 1; i &lt; pricesSize; i++)&#123;        int diff = prices[i]- prices[i-1];        if(diff> 0)&#123;            ans += diff;        &#125;    &#125;    return ans;*/</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>pricesSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-最佳买卖股票时机含冷冻期"><a href="#5-最佳买卖股票时机含冷冻期" class="headerlink" title="  5 最佳买卖股票时机含冷冻期 "></a><h2> <span id="Tag5"> 5 最佳买卖股票时机含冷冻期 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" title="309. 最佳买卖股票时机含冷冻期">309. 最佳买卖股票时机含冷冻期</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定一个整数数组<code>prices</code>，其中第  <code>prices[i]</code> 表示第 <code>i</code> 天的股票价格 。​</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><p>卖出股票后，你无法在第二天买入股票 (即冷冻期为 <code>1</code> 天)。<br>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,2,3,0,2]<br><strong>输出:</strong> 3<br><strong>解释:</strong> 对应的交易状态为: [买入, 卖出, 冷冻期, 买入, 卖出]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1]<br><strong>输出:</strong> 0</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;股票问题一般有两个状态：当天结束后手里有股票和手里没股票。这一题多了一个状态，即<strong>当天结束后</strong>是否为冷却期，因而定义dp数组时，其第二维应该设为3，即<code>dp[n][3]</code>:</p><ul><li><code>dp[i][0]</code> 代表第<code>i</code>天手里没有股票且不处于冷却期时的收益，由前一天没有股票和前一天处于冷却期两种情况转移而来。</li><li><code>dp[i][1]</code> 代表第<code>i</code>天手里有股票时的收益，由前一天有股票和前一天为没有股票且非冷却期转移而来。</li><li><code>dp[i][2]</code> 代表第<code>i</code>天手里没有股票且处于冷却期时的收益，由前一天有股票且卖出转移而来。</li></ul><p>&emsp;&emsp;状态转移方程为：</p><script type="math/tex; mode=display">\begin{equation*}\begin{cases}\begin{split}dp[i][0] &= max(dp[i-1][0], dp[i-1][2])\\dp[i][1] &= max(dp[i-1][1], dp[i-1][0] - prices[i])\\dp[i][2] &= dp[i-1][1] + prices[i]\end{split}\end{cases}\end{equation*}</script><p>&emsp;&emsp;<strong>注意</strong>， <code>dp</code>数组的含义是第<code>i</code>天结束后的价值，可以理解为当天进行操作后第二天的状态。这也就是<code>dp[i][0]</code>为什么是从前一天没有股票和前一天处于冷却期两种情况转移而来，前一种情况很好理解，就是前一天不买股票，所以前一天之后的状态就是<code>0</code>,而当天之后为<code>0</code>就是在当天状态为<code>0</code>的情况下不买股票转移而来；第二种情况则是前一天操作过后为冷却期，也就是当天是冷却期，那肯定不能买入股票，因而当天过后的状态就是<code>0</code>.</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//未经优化</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//0表示当天过后无股票，1表示有股票，2表示当天过后为冷却期</span>        <span class="token comment">/*dp[0][0] = 0;        dp[0][1] = -prices[0];        dp[0][2] = 0;        bool flag = false;        for(int i = 1; i &lt; n; ++i)&#123;            dp[i][0] = max(dp[i-1][2], dp[i-1][0]);             //无股票且非冷却期            dp[i][1] = max(dp[i-1][1], dp[i-1][0]-prices[i]);   //有股票            dp[i][2] = dp[i-1][1] + prices[i];                  //无股票且处于冷却期        &#125;        return max(dp[n-1][0], dp[n-1][2]);*/</span>                <span class="token comment">//空间优化后</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp1 <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> next_dp0 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> next_dp1 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp0 <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp1<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp2 <span class="token operator">=</span> dp1 <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            dp0 <span class="token operator">=</span> next_dp0<span class="token punctuation">,</span> dp1 <span class="token operator">=</span> next_dp1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//未优化</span>    <span class="token comment">/*int dp[pricesSize][3];    dp[0][0] = 0, dp[0][1] = -prices[0], dp[0][2] = 0;    for(int i = 1; i&lt;pricesSize; i++)&#123;        dp[i][0] = fmax(dp[i-1][0], dp[i-1][2]);            //没股票,不冷冻        dp[i][1] = fmax(dp[i-1][1], dp[i-1][0]-prices[i]);    //有股票        dp[i][2] = dp[i-1][1]+prices[i];                    //没股票，冷冻    &#125;    return fmax(dp[pricesSize-1][0], dp[pricesSize-1][2]);*/</span>    <span class="token comment">//优化后</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//没股票,不冷冻</span>        <span class="token keyword">int</span> dp1 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//有股票</span>        <span class="token keyword">int</span> dp2 <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment">//没股票，冷冻</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp0<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp1<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-买卖股票的最佳时机含手续费"><a href="#6-买卖股票的最佳时机含手续费" class="headerlink" title="  6 买卖股票的最佳时机含手续费 "></a><h2> <span id="Tag6"> 6 买卖股票的最佳时机含手续费 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" title="714. 买卖股票的最佳时机含手续费">714. 买卖股票的最佳时机含手续费</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p><strong>注意</strong>：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2<br><strong>输出:</strong> 8<br><strong>解释:</strong> 能够达到的最大利润:<br>在此处买入 prices[0] = 1<br>在此处卖出 prices[3] = 8<br>在此处买入 prices[4] = 4<br>在此处卖出 prices[5] = 9<br>总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,3,7,5,10,3], fee = 3<br><strong>输出:</strong> 6</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">/*        int dp[2] = &#123;0, -prices[0]&#125;;        for(int i = 1; i &lt; n; ++i)&#123;            int new_dp0 = max(dp[0], dp[1] + prices[i] - fee);            int new_dp1 = max(dp[1], dp[0] - prices[i]);            dp[0] = new_dp0, dp[1] = new_dp1;        &#125;        return dp[0];        */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">/*int dp[pricesSize][2];    dp[0][0] = 0, dp[0][1] = -prices[0];    for(int i = 1; i &lt; pricesSize; i++)&#123;        dp[i][0] = fmax(dp[i-1][1]+prices[i]-fee, dp[i-1][0]);        dp[i][1] = fmax(dp[i-1][1], dp[i-1][0]-prices[i]);    &#125;    return dp[pricesSize-1][0];*/</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newdp0 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>fee<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newdp1 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newdp0<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newdp1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-最长递增子序列"><a href="#7-最长递增子序列" class="headerlink" title="  7 最长递增子序列 "></a><h2> <span id="Tag7"> 7 最长递增子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/" title="300. 最长递增子序列">300. 最长递增子序列</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，找到其中最长严格递增子序列的长度。</p><p>子序列 是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [10,9,2,5,3,7,101,18]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0,1,0,3,2,3]<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [7,7,7,7,7,7,7]<br><strong>输出:</strong> 1</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;定义一个dp数组，其含义为包括当前遍历到的数字在内的最长递增子序列长度，因而需要用一个<code>ans</code>变量来记录整个数组中所出现的最长递增子序列长度(不一定是在最后一位出现，因此遍历过程中需要更新答案<code>ans</code>，而不是最后直接返回<code>dp[n-1]</code>)。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-最长连续递增序列"><a href="#8-最长连续递增序列" class="headerlink" title="  8 最长连续递增序列 "></a><h2> <span id="Tag8"> 8 最长连续递增序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/longest-continuous-increasing-subsequence/" title="674. 最长连续递增序列">674. 最长连续递增序列</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给定一个未经排序的整数数组，找到最长且 <strong>连续递增的子序列</strong>，并返回该序列的长度。</p><p>连续递增的子序列 可以由两个下标 <code>l</code> 和 <code>r</code>（<code>l &lt; r</code>）确定，如果对于每个 <code>l &lt;= i &lt; r</code>，都有 <code>nums[i] &lt; nums[i + 1]</code> ，那么子序列 <code>[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]</code> 就是连续递增子序列。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,3,5,4,7]<br><strong>输出:</strong> 3<br><strong>解释:</strong> 最长连续递增序列是 [1,3,5], 长度为3。<br>尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为 5 和 7 在原数组里被 4 隔开。 </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,2,2,2,2]<br><strong>输出:</strong> 1<br><strong>解释:</strong> 最长连续递增序列是 [2], 长度为1。</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;相比<code>DP</code>, 用滑动窗口更为简单。</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findLengthOfLCIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> curlen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            curlen<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment">//if(i == 8) return curlen;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> curlen<span class="token punctuation">)</span><span class="token punctuation">;</span>            curlen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> curlen<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-最长重复子数组"><a href="#9-最长重复子数组" class="headerlink" title="  9 最长重复子数组 "></a><h2> <span id="Tag9"> 9 最长重复子数组 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/" title="718. 最长重复子数组">718. 最长重复子数组</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>给两个整数数组 <code>nums1</code> 和 <code>nums2</code> ，返回 两个数组中 <strong>公共的</strong> 、<em>长度最长的子数组的长度</em> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]<br><strong>输出:</strong> 3<br><strong>解释:</strong> 长度最长的公共子数组是 [3,2,1] 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]<br><strong>输出:</strong> 5 </p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;<code>dp[i][j]</code>的含义：nums1中前<code>i</code>个数字和nums2中前<code>j</code>个数字中重叠的长度。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findLength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//二维dp数组</span>        <span class="token comment">/*        int dp[n1+1][n2+1];        memset(dp, 0, sizeof(dp));        for(int i = 1; i &lt;= n1; ++i)&#123;            for(int j = 1; j &lt;= n2; ++j)&#123;                if(nums1[i-1] == nums2[j-1])&#123;                    dp[i][j] = dp[i-1][j-1] + 1;                    ans = max(ans, dp[i][j]);                    if(ans == n1 || ans == n2) return ans;                &#125;            &#125;        &#125;*/</span>        <span class="token comment">//滚动数组</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> n1 <span class="token operator">||</span> ans <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> nums1Size<span class="token punctuation">,</span> n2 <span class="token operator">=</span> nums2Size<span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n2<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                    ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> n1 <span class="token operator">||</span> ans <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-最长公共子序列"><a href="#10-最长公共子序列" class="headerlink" title="  10 最长公共子序列 "></a><h2> <span id="Tag10"> 10 最长公共子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/longest-common-subsequence/" title="1143. 最长公共子序列">1143. 最长公共子序列</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。<br>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> text1 = “abcde”, text2 = “ace”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 最长公共子序列是 “ace” ，它的长度为 3 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> text1 = “abc”, text2 = “abc”<br><strong>输出:</strong> 3<br><strong>解释:</strong> 最长公共子序列是 “abc” ，它的长度为 3 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> text1 = “abc”, text2 = “def”<br><strong>输出:</strong> 0<br><strong>解释:</strong> 两个字符串没有公共子序列，返回 0 。</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>&emsp;&emsp;<code>dp[i][j]</code>的含义为<code>text1[0...i]</code>和<code>text2[0...j]</code>的最长公共子序列长度。</p><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span>string text1<span class="token punctuation">,</span> string text2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> text1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> text2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">longestCommonSubsequence</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> text1<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> text2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>text1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> text2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>text1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>text2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch10-of-programmercarl-2</title>
      <link href="/2022/04/19/ch10-of-programmercarl-2/"/>
      <url>/2022/04/19/ch10-of-programmercarl-2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">474. 一和零</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">518. 零钱兑换 II</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">377. 组合总和 Ⅳ</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">70. 爬楼梯</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">322. 零钱兑换</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">279. 完全平方数</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">139. 单词拆分</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">198. 打家劫舍</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">213. 打家劫舍 II</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">337. 打家劫舍 III</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-一和零"><a href="#1-一和零" class="headerlink" title="  1 一和零 "></a><h2> <span id="Tag1"> 1 一和零 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/ones-and-zeroes/" title="474. 一和零">474. 一和零</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给你一个二进制字符串数组 <code>strs</code> 和两个整数 <code>m</code> 和 <code>n</code> 。</p><p>请你找出并返回 <code>strs</code> 的最大子集的长度，该子集中 <strong>最多</strong> 有 <code>m</code> 个 <code>0</code> 和 <code>n</code> 个 <code>1</code> 。</p><p>如果 <code>x</code> 的所有元素也是 <code>y</code> 的元素，集合 <code>x</code> 是集合 <code>y</code> 的 <strong>子集</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> strs = [“10”, “0001”, “111001”, “1”, “0”], m = 5, n = 3<br><strong>输出:</strong> 4<br><strong>解释:</strong> 最多有 5 个 0 和 3 个 1 的最大子集是 {“10”,”0001”,”1”,”0”} ，因此答案是 4 。<br>其他满足题意但较小的子集包括 {“0001”,”1”} 和 {“10”,”1”,”0”} 。{“111001”} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> strs = [“10”, “0”, “1”], m = 1, n = 1<br><strong>输出:</strong> 2<br><strong>解释:</strong> 最大的子集是 {“0”, “1”} ，所以答案是 2 。</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;其实就是两重<code>01</code>背包，看作有两个背包，一个装<code>0</code>一个装<code>1</code>, 其容量分别为<code>m</code>和<code>n</code>，某个物品放入背包的条件是同时可以被放入<code>0</code>背包和<code>1</code>背包中。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countOnes</span><span class="token punctuation">(</span>string strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ones <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>ones<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ones<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> weight<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string str<span class="token operator">:</span> strs<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> ones <span class="token operator">=</span> <span class="token function">countOnes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            weight<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>ones<span class="token punctuation">,</span> ones<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> m<span class="token punctuation">;</span> j <span class="token operator">>=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> n<span class="token punctuation">;</span> k <span class="token operator">>=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token operator">--</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>first<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span>weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> strsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//遍历字符串数组，统计每个字符串的0和1的个数</span>    <span class="token keyword">int</span> cost<span class="token punctuation">[</span>strsSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//0,1两种cost</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//将每个字符串的0和1提取出来</span>        cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//cost[.][0]存放0的个数</span>                cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                          <span class="token comment">//cost[.][1]存放1的个数</span>                cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//dp数组初始化</span>    <span class="token comment">/*int dp[m+1][n+1][strsSize];             //row为0的容量, col为1的容量    for(int row = 0; row &lt;= m; row++)&#123;        for(int col = 0; col &lt;= n; col++)&#123;            if(row >= cost[0][0] &amp;&amp; col >= cost[0][1])&#123; //当背包两种容量都超过当前的物品的体积时才能放入                dp[row][col][0] = 1;                    &#125;else&#123;                          dp[row][col][0] = 0;            &#125;        &#125;    &#125;    //求解背包问题    for(int layer = 1; layer &lt; strsSize; layer++)&#123;  //layer即01背包中的物品        for(int row = 0; row &lt;= m; row++)&#123;                for(int col = 0; col &lt;= n; col++)&#123;                if(row>=cost[layer][0]&amp;&amp;col >= cost[layer][1])&#123; //防止索引出现负数报错                    dp[row][col][layer] = fmax(dp[row][col][layer-1],dp[row-cost[layer][0]][col-cost[layer][1]][layer-1]+1);                &#125;else&#123;                    dp[row][col][layer] = dp[row][col][layer-1];                &#125;            &#125;        &#125;    &#125;*/</span>    <span class="token comment">//求解过程降维</span>    <span class="token comment">//dp数组初始化</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">//row为0的容量, col为1的容量</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">>=</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">>=</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//当背包两种容量都超过当前的物品的体积时才能放入</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                          dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> layer <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> layer <span class="token operator">&lt;</span> strsSize<span class="token punctuation">;</span> layer<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//layer即01背包中的物品</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> m<span class="token punctuation">;</span> row <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> n<span class="token punctuation">;</span> col <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> col<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>row<span class="token operator">>=</span>cost<span class="token punctuation">[</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>col <span class="token operator">>=</span> cost<span class="token punctuation">[</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//防止索引出现负数报错</span>                    dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>row<span class="token operator">-</span>cost<span class="token punctuation">[</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span>cost<span class="token punctuation">[</span>layer<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-零钱兑换-II"><a href="#2-零钱兑换-II" class="headerlink" title="  2 零钱兑换 II "></a><h2> <span id="Tag2"> 2 零钱兑换 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/coin-change-2/" title="518. 零钱兑换 II">518. 零钱兑换 II</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一个整数数组 <code>coins</code> 表示不同面额的硬币，另给一个整数 <code>amount</code> 表示总金额。</p><p>请你计算并返回可以凑成总金额的硬币组合数。如果任何硬币组合都无法凑出总金额，返回 <code>0</code> 。</p><p>假设每一种面额的硬币有无限个。 </p><p>题目数据保证结果符合 <code>32</code> 位带符号整数。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> amount = 5, coins = [1, 2, 5]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 有四种方式可以凑成总金额：<br>5=5<br>5=2+2+1<br>5=2+1+1+1<br>5=1+1+1+1+1</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> amount = 3, coins = [2]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 只用面额 2 的硬币不能凑成总金额 3 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> amount = 10, coins = [10]<br><strong>输出:</strong> 1</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;这一题与前边那些背包问题区别最大的是物品个数无限。当用滚动数组去求解时对背包容量进行遍历时不需要反过来遍历。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//未优化</span>        <span class="token comment">/*int dp[n][amount+1];        memset(dp, 0, sizeof(dp));        for(int c = 0; c &lt;= amount; ++c)&#123;            if(c % coins[0] == 0 || c == 0)&#123;                dp[0][c] = 1;            &#125;        &#125;        for(int r = 1; r &lt; n; ++r)&#123;            for(int c = 0; c &lt;= amount; ++c)&#123;                for(int k = 0; k &lt;= c/coins[r]; ++k)&#123;                    dp[r][c] += dp[r-1][c-k*coins[r]];                &#125;            &#125;        &#125;        return dp[n-1][amount];*/</span>        <span class="token comment">//优化后</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coinsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-组合总和-Ⅳ"><a href="#3-组合总和-Ⅳ" class="headerlink" title="  3 组合总和 Ⅳ "></a><h2> <span id="Tag3"> 3 组合总和 Ⅳ </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combination-sum-iv/" title="377. 组合总和 Ⅳ">377. 组合总和 Ⅳ</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个由 不同 整数组成的数组 <code>nums</code> ，和一个目标整数 <code>target</code> 。请你从 <code>nums</code> 中找出并返回总和为 <code>target</code> 的元素组合的个数。</p><p>题目数据保证答案符合 <code>32</code> 位整数范围。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3], target = 4<br><strong>输出:</strong> 7<br><strong>解释:</strong><br>所有可能的组合为：<br>(1, 1, 1, 1)<br>(1, 1, 2)<br>(1, 2, 1)<br>(1, 3)<br>(2, 1, 1)<br>(2, 2)<br>(3, 1)<br>请注意，顺序不同的序列被视作不同的组合。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [9], target = 3<br><strong>输出:</strong> 0</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><ul><li><p>回溯：和其他组合问题一样，直接回溯非常简单，但会<strong>超时</strong>！</p></li><li><p>动态规划：</p></li></ul><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> INT_MAX<span class="token operator">-</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>c <span class="token operator">-</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> INT_MAX<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-爬楼梯"><a href="#4-爬楼梯" class="headerlink" title="  4 爬楼梯 "></a><h2> <span id="Tag4"> 4 爬楼梯 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/climbing-stairs/" title="70. 爬楼梯">70. 爬楼梯</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n =2<br><strong>输出:</strong> 2<br><strong>解释:</strong> 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 3<br><strong>解释:</strong> 有三种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶</li></ol></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>简单题，没啥好写。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-零钱兑换"><a href="#5-零钱兑换" class="headerlink" title="  5 零钱兑换 "></a><h2> <span id="Tag5"> 5 零钱兑换 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/coin-change/" title="322. 零钱兑换">322. 零钱兑换</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给你一个整数数组 <code>coins</code> ，表示不同面额的硬币；以及一个整数 <code>amount</code> ，表示总金额。</p><p>计算并返回可以凑成总金额所需的 <strong>最少的硬币个数</strong> 。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code> 。</p><p>你可以认为每种硬币的数量是无限的。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> coins = [1, 2, 5], amount = 11<br><strong>输出:</strong> 3<br><strong>解释:</strong> 11 = 5 + 5 + 1</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> coins = [2], amount = 3<br><strong>输出:</strong> -1</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> coins = [1], amount = 0<br><strong>输出:</strong> 0</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;先创建一个dp数组，先用<code>coins[0]</code>去初始化dp数组，然后遍历整个<code>coins</code>数组。这里dp数组的含义是前<code>i-1</code>个硬币中构成当前整数的最少硬币数。设遍历coins数组的下标为<code>i</code>, 遍历amount的下标为<code>j</code>：</p><ul><li><p>当<code>j &lt; coins[i]</code>时，当前硬币不可取，因此构成<code>j</code>的最少硬币数就等于前<code>i-1</code>构成<code>j</code>的最少硬币数，即<code>dp[i][j] = dp[i-1][j]</code>.</p></li><li><p>当<code>j &gt;= coins[i]</code>时,说明当前的硬币可取：</p><ul><li>如果前<code>i-1</code>种硬币无法构成当前的<code>j</code>，即<code>dp[i-1][j] == -1</code>, 那么考虑取完当前的遍历到的硬币后，剩下部分是否能由前i种硬币构成，即检测<code>dp[j-coins[i]]</code>是否为<code>-1</code>，如果是，则说明前<code>i</code>种硬币无法构成<code>j</code>，因此置为<code>-1</code>；若否，则<code>dp[i]</code>应该更新为<code>dp[j-coins[i]] + 1</code>。</li><li>如果<code>dp[i-1][j] != -1</code>则取原来的硬币数和<code>[]dp[j-coins[i]] + 1</code>中的较小值,即<code>dp[i][j] = min(dp[i-1][j], dp[i][j - coins[i]]+1)</code>.</li></ul></li></ul><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">%</span> coins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token operator">/</span>coins<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">=</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> coinsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> coinsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  c <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">>=</span> coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>c<span class="token operator">-</span>coins<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-完全平方数"><a href="#6-完全平方数" class="headerlink" title="  6 完全平方数 "></a><h2> <span id="Tag6"> 6 完全平方数 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/perfect-squares/" title="279. 完全平方数">279. 完全平方数</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个整数 <code>n</code> ，返回 和为 <code>n</code> 的完全平方数的最少数量 。</p><p><strong>完全平方数</strong> 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，<code>1</code>、<code>4</code>、<code>9</code> 和 <code>16</code> 都是完全平方数，而 <code>3</code> 和 <code>11</code> 不是。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 12<br><strong>输出:</strong> 3<br><strong>解释:</strong> 12 = 4 + 4 + 4</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 13<br><strong>输出:</strong> 2<br><strong>解释:</strong> 13 = 4 + 9</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;本题可以转化为背包容量为<code>n</code>，物品的质量依次为$1^2, 2^2, 3^2, …, (\sqrt{n})^2$,价值则均为1，目标是最小化价值的<code>01</code>背包问题。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">*</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//物品</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//背包</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> i<span class="token operator">*</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> i<span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">*</span>j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token operator">*</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-单词拆分"><a href="#7-单词拆分" class="headerlink" title="  7 单词拆分 "></a><h2> <span id="Tag7"> 7 单词拆分 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/word-break/" title="139. 单词拆分">139. 单词拆分</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code> 作为字典。请你判断是否可以利用字典中出现的单词拼接出 <code>s</code> 。</p><p><strong>注意</strong>：不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “leetcode”, wordDict = [“leet”, “code”]<br><strong>输出:</strong> true<br><strong>解释:</strong> 返回 true 因为 “leetcode” 可以由 “leet” 和 “code” 拼接成。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “applepenapple”, wordDict = [“apple”, “pen”]<br><strong>输出:</strong> true<br><strong>解释:</strong> 返回 true 因为 “applepenapple” 可以由 “apple” “pen” “apple” 拼接成。<br>   注意，你可以重复使用字典中的单词。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “catsandog”, wordDict = [“cats”, “dog”, “sand”, “and”, “cat”]<br><strong>输出:</strong> false</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><ul><li><p>首先想到用字典树来解。</p><ol><li><p>首先定义如下字典树结构体<code>struct Tries</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Tries</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化</span>        is_end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后遍历整个<code>wordDict</code>，将所有的单词插入到字典树中。</p></li><li>创建一个栈用来存放字符串<code>s</code>中包含的<code>wordDict</code>完整单词的位置(结尾位置).当遇到结点的<code>is_end</code>为<code>true</code>,说明找到了一个完整单词，将当前的下标入栈。</li><li>当当前遍历到的字符在字典树中查找不到时，则将遍历位置更改为上一个完整单词的结尾在<code>s</code>中的位置，即出栈（这里有点贪心那味，优先遍历到叶节点），并从字典树根节点继续查找。</li><li><p>如果当前字符查找不到，且栈为空，则此时直接返回<code>false</code>。</p><blockquote><p>注意，当遍历完整个字符串时，当前结点的<code>is_end</code>为false时，此时不应该返回<code>true</code>，而应该重新继续查找，因为要完整的单词组成<code>s</code>。</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Tries</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化</span>        end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建字典树</span>        <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordDict<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> wordDict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> ptr <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">-></span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> ptr <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur <span class="token operator">||</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    cur <span class="token operator">=</span> root<span class="token punctuation">;</span>                    i <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur <span class="token operator">=</span> root<span class="token punctuation">;</span>                    i <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token operator">-></span>end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>实际上，遇到下边算例时，上述代码将退化为暴力搜索，进而导致超时：<pre><code class="lang-&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab&quot;```">```[&quot;a&quot;, &quot;aa&quot;, &quot;aaa&quot;, &quot;aaaa&quot;, &quot;aaaaa&quot;, &quot;aaaaaa&quot;,&quot;aaaaaaa&quot;, &quot;aaaaaaaa&quot;, &quot;aaaaaaaaa&quot;, &quot;aaaaaaaaaa&quot;]</code></pre></li></ul></li></ol><ul><li><p>因此，需要引入“记忆化搜索”机制。增加一个布尔数组用于表示以某一位为查找起点会将会导致查找失败。具体的代码如下<span id="codeof_tag7"></span>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Tries</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> end<span class="token punctuation">;</span>    <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 初始化</span>        end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    Tries<span class="token operator">*</span> root<span class="token punctuation">;</span>    <span class="token keyword">bool</span> fail<span class="token punctuation">[</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fail<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">||</span> startIndex <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fail<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> ptr <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>end <span class="token operator">&amp;&amp;</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        fail<span class="token punctuation">[</span>startIndex<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//构建字典树</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordDict<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">Tries</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> wordDict<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> ptr <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">-></span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>动态规划</p><ul><li>首先创建一个<code>set</code>作为字典，将wordDict中的单词全部插入到其中。</li><li>创建一个dp数组，表示前<code>i</code>位的子串是否能用字典中的单词来表示。遍历字符串，截取长度为<code>j</code>的子串，则有前<code>i</code>位是否能用字典中的单词来表示可以转换为前<code>j</code>位能否用字典中的单词来表示以及第<code>j+1</code>到<code>i</code>位(注意第<code>j+1</code>位下标对应<code>j</code>)的子串能否用字典中的单词来表示两个子问题，当且仅当两个子问题均为<code>true</code>，则该问题为<code>true</code>.</li><li><p>前<code>i</code>位为<code>dp[i]</code>，则前<code>j</code>位为<code>dp[j]</code>、第<code>j+1</code>到<code>i</code>位的子串为<code>s.substr(j, i-j)</code>,则状态转移方程位:</p><script type="math/tex; mode=display">\begin{equation*}dp[i] = dp[j] \&\& check(s[j...i-1])\end{equation*}</script><p>其中$check(s[j…i-1])$表示子串$s[j…i-1]$是否存在字典中。</p><blockquote><p>优化：前边所述，<code>j</code>其实是从<code>0</code>开始，其实可以对这个地方进行优化，内循环中只要判断到最长单词的长度即可，即<code>s[j...i-1]</code>的长度至多为$max(s[i].length)$.</p></blockquote><p>优化后的完整代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//unordered_set&lt;string> wordDictset(wordDict.begin(), wordDict.end());</span>        unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> wordDictset<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxlen <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> word<span class="token operator">:</span> wordDict<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            wordDictset<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>            maxlen <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>maxlen<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> i <span class="token operator">-</span> maxlen<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> wordDictset<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="8-打家劫舍"><a href="#8-打家劫舍" class="headerlink" title="  8 打家劫舍 "></a><h2> <span id="Tag8"> 8 打家劫舍 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/house-robber/" title="198. 打家劫舍">198. 打家劫舍</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [1,2,3,1]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> [2,7,9,3,1]<br><strong>输出:</strong> 12<br><strong>解释:</strong> 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>    偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;创建一个dp数组<code>dp[n][2]</code>，其含义为当前位取与不取的情况下的最大获利，其中第二维为<code>0</code>时不取，为<code>1</code>时则取。状态转移为当前位置取的条件是前一个位置不取，因此易得状态转移方程为:</p><script type="math/tex; mode=display">\begin{equation*}\begin{cases}\begin{split}dp[i][1] &= dp[i-1][0] + nums[i]\\dp[i][0] &= max(dp[i-1][0], dp[i-1][1])\end{split}\end{cases}\end{equation*}</script><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*        int dp0 = 0, dp1 = 0;        for(int i = 0; i &lt; n; ++i)&#123;            int new_dp0 = max(dp0, dp1);            int new_dp1 = dp0 + nums[i];            dp0 = new_dp0, dp1 = new_dp1;        &#125;        return max(dp0, dp1);        */</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-打家劫舍-II"><a href="#9-打家劫舍-II" class="headerlink" title="  9 打家劫舍 II "></a><h2> <span id="Tag9"> 9 打家劫舍 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/house-robber-ii/" title="213. 打家劫舍 II">213. 打家劫舍 II</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 <strong>围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong> 。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>在不触动警报装置的情况下</strong> ，今晚能够偷窃到的最高金额。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,3,2]<br><strong>输出:</strong> 3<br><strong>解释:</strong> 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3,1]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3]<br><strong>输出:</strong> 3</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;数组围成一圈，而连续的两个位置不能同时取，因此，这一题比上一题多了一个约束，就是<strong>数组第一位和最后一位不能同时取</strong>。很明显，最重要的就是开头和结尾取不取，可以分为下面四种情况(下标从<code>0</code>开始)：</p><ol><li>开头取：求<code>[2, n-2]</code>区间的最大值, 即<code>0+[2， n-2]</code>的最大值</li><li>开头不取：求<code>[1, n-1]</code>区间的最大值, 即<code>[1， n-1]</code>的最大值</li><li>结尾取：求<code>[1, n-3]</code>区间的最大值, 即<code>(n-1) + [1， n-3]</code>的最大值</li><li>结尾不取：求<code>[0, n-2]</code>区间的最大值, 即<code>[0， n-2]</code>的最大值</li></ol><p>上边第<code>1</code>和第<code>4</code>其实可以变成求<code>[0, n-2]</code>区间的最大值，因为第<code>1</code>种相当于<code>0</code>取第<code>4</code>种对应<code>0</code>不取，而两者的区间的结尾都是<code>n-2</code>; 同理，第<code>2</code>和第<code>3</code>种可以转化为求<code>[1, n-1]</code>的最大值。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">myrob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">myrob</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">myrob</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-打家劫舍-III"><a href="#10-打家劫舍-III" class="headerlink" title="  10 打家劫舍 III "></a><h2> <span id="Tag10"> 10 打家劫舍 III </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/house-robber-iii/" title="337. 打家劫舍 III">337. 打家劫舍 III</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为 <code>root</code> 。</p><p>除了 <code>root</code> 之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。 如果 <strong>两个直接相连的房子在同一天晚上被打劫</strong> ，房屋将自动报警。</p><p>给定二叉树的 <code>root</code> 。返回 <strong>在不触动警报的情况下</strong> ，<em>小偷能够盗取的最高金额</em> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch10-of-programmercarl-2/337_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [3,2,3,null,3,null,1]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 3 + 3 + 1 = 7</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch10-of-programmercarl-2/337_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [3,4,5,1,3,null,1]<br><strong>输出:</strong> 9<br><strong>解释:</strong> 小偷一晚能够盗取的最高金额 4 + 5 = 9</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>&emsp;&emsp;用 <code>f(o)</code> 表示选择 <code>o</code> 节点的情况下，<code>o</code> 节点的子树上被选择的节点的最大权值和；<code>g(o)</code> 表示不选择 <code>o</code> 节点的情况下，<code>o</code> 节点的子树上被选择的节点的最大权值和；<code>l</code> 和 <code>r</code> 代表 <code>o</code> 的左右孩子。</p><ul><li>当 <code>o</code> 被选中时，<code>o</code> 的左右孩子都不能被选中，故 <code>o</code> 被选中情况下子树上被选中点的最大权值和为 <code>l</code> 和 <code>r</code> 不被选中的最大权值和相加，即 <code>f(o) = g(l) + g(r)</code>。</li><li>当 <code>o</code> 不被选中时，<code>o</code> 的左右孩子可以被选中，也可以不被选中。对于 <code>o</code> 的某个具体的孩子 <code>x</code>，它对 <code>o</code> 的贡献是 <code>x</code> 被选中和不被选中情况下权值和的较大值。故 <code>g(o)=max&#123;f(l),g(l)&#125;+max&#123;f(r),g(r)&#125;</code>。</li></ul><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>first<span class="token punctuation">,</span> a<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> <span class="token function">myRob</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> left <span class="token operator">=</span> <span class="token function">myRob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> right <span class="token operator">=</span> <span class="token function">myRob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">getMax</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp1 <span class="token operator">=</span> root<span class="token operator">-></span>val <span class="token operator">+</span> left<span class="token punctuation">.</span>first <span class="token operator">+</span> right<span class="token punctuation">.</span>first<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">make_pair</span><span class="token punctuation">(</span>dp0<span class="token punctuation">,</span> dp1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token function">myRob</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">:</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">myrob</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token function">myrob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>right <span class="token operator">=</span> <span class="token function">myrob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">getMax</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token function">myrob</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><ul><li><ol><li>背包分类</li></ol><ul><li><code>01</code>背包：外循环物品（正序），内循环背包（倒序）</li><li>完全背包：如若不考虑顺序问题，则无所谓先物品还是先背包，遍历顺序均为正序；若考虑顺序问题(即相同组成不同排列视为同一种)，则应当先遍历背包，后边遍历物品，而找零钱(相同组成不同排列视为多种)则应该先背包后物品。</li><li>组合背包：如若不考虑顺序问题，则无所谓先物品还是先背包，遍历顺序均为正序；若考虑顺序问题，则应当先遍历背包，后边遍历物品。</li><li>分组背包：外循环背包，内循环为上边三种背包之一</li></ul></li><li>问题分类：<ul><li>求最值：<ul><li>物品价值恒为<code>1</code>，常见于组成目标数的数字数量最少、找零钱使得零钱张数最少等，状态转移方程为：<code>dp[i] = max/min(dp[i], dp[i-weight[j]]+1)</code>.</li><li>物品价值为数组元素，常见于寻找数组中是否有子数列的加和/差等为目标值等，状态转移方程为：<code>dp[i] = max/min(dp[i], dp[i-weight[j]]+val[j])</code>.</li></ul></li><li>是否存在：<ul><li>常见于字符串匹配问题，状态转移方程为：<code>dp[i] = dp[j]&amp;&amp;...</code>或<code>dp[i] = dp[i]||dp[i-weight[j]]</code>.</li></ul></li><li>组合问题：<ul><li>求构成目标的种类数量，状态转移方程为：<code>dp[i] += dp[i-nums[j]</code>].</li></ul></li></ul></li></ul><ul><li><ol><li>树形<code>DP</code></li></ol><ul><li>树形<code>DP</code>实现时一般都是用子树更新父亲（即<strong>从下向上更新</strong>）</li></ul></li></ul></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch9-of-programmercarl-2</title>
      <link href="/2022/04/19/ch9-of-programmercarl-2/"/>
      <url>/2022/04/19/ch9-of-programmercarl-2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">406. 根据身高重建队列</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">452. 用最少数量的箭引爆气球</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">435. 无重叠区间</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">763. 划分字母区间</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">56. 合并区间</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">738. 单调递增的数字</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">714. 买卖股票的最佳时机含手续费</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">968. 监控二叉树</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-根据身高重建队列"><a href="#1-根据身高重建队列" class="headerlink" title="  1 根据身高重建队列 "></a><h2> <span id="Tag1"> 1 根据身高重建队列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/queue-reconstruction-by-height/" title="406. 根据身高重建队列">406. 根据身高重建队列</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>假设有打乱顺序的一群人站成一个队列，数组 <code>people</code> 表示队列中一些人的属性（不一定按顺序）。每个 <code>people[i] = [hi, ki]</code> 表示第 <code>i</code> 个人的身高为 <code>hi</code> ，前面 <strong>正好</strong> 有 <code>ki</code> 个身高大于或等于 <code>hi</code> 的人。</p><p>请你重新构造并返回输入数组 <code>people</code> 所表示的队列。返回的队列应该格式化为数组 <code>queue</code> ，其中 <code>queue[j] = [hj, kj]</code>是队列中第 <code>j</code> 个人的属性（<code>queue[0]</code> 是排在队列前面的人）。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]<br><strong>输出:</strong> [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]<br><strong>解释:</strong><br>编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。<br>编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。<br>编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。<br>编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。<br>编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。<br>编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。<br>因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]<br><strong>输出:</strong> [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>先对身高序列按第一维进行降序排序，若第一维相等，则按第二维升序排序。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code></li></ul><pre class="line-numbers language-CPP" data-language="CPP"><code class="language-CPP">class Solution &#123;public:    vector&lt;vector&lt;int&gt;&gt; reconstructQueue(vector&lt;vector&lt;int&gt;&gt;&amp; people) &#123;        vector&lt;vector&lt;int&gt;&gt; res;        sort(people.begin(), people.end(),[](vector&lt;int&gt;&amp; a, vector&lt;int&gt;&amp;b)&#123;            if(a[0] &#x3D;&#x3D; b[0])&#123;                return a[1] &lt; b[1];            &#125;            return a[0] &gt; b[0];        &#125;);        for(vector&lt;int&gt; iter: people)&#123;            int pos &#x3D; iter[1];            res.insert(res.begin()+pos, iter);        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code></li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">typedef struct MyListNode &#123;    int val;    int cnt;    struct MyListNode *next;&#125;;int cmp(const void *a, const void *b)&#123;    int *a_ &#x3D; *(int **)a, *b_ &#x3D; *(int **)b;    if(a_[1] &#x3D;&#x3D; b_[1])&#123;        return (a_[0] &lt; b_[0]);    &#125;    return a_[1] &gt; b_[1];&#125;int** reconstructQueue(int** people, int peopleSize, int* peopleColSize, int* returnSize, int** returnColumnSizes)&#123;    *returnColumnSizes &#x3D; (int *)malloc(sizeof(int)*peopleSize);    int** ret &#x3D; (int**)malloc(sizeof(int*)*peopleSize);    *returnSize &#x3D; 0;    if(peopleSize &#x3D;&#x3D; 1)&#123;        *returnSize &#x3D; 1;        (*returnColumnSizes)[0] &#x3D; 2;        return people;    &#125;    qsort(people, peopleSize, sizeof(int *), cmp);    struct MyListNode *dummyHead &#x3D; (struct MyListNode *)malloc(sizeof(struct MyListNode)), *cur;    struct MyListNode *node &#x3D; (struct MyListNode *)malloc(sizeof(struct MyListNode));    node-&gt;val &#x3D; people[0][0];    node-&gt;cnt &#x3D; people[0][1];    node-&gt;next &#x3D; NULL;    dummyHead-&gt;next &#x3D; node;    cur &#x3D; dummyHead;    int cnt;    for(int i &#x3D; 1; i &lt; peopleSize; i++)&#123;        struct MyListNode *newNode &#x3D; (struct MyListNode *)malloc(sizeof(struct MyListNode));        cur &#x3D; dummyHead;        cnt &#x3D; people[i][1];        if(cnt)&#123;            while(cnt)&#123;                if(cur &amp;&amp; cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val &gt;&#x3D; people[i][0])&#123;                    cnt--;                &#125;                cur &#x3D; cur-&gt;next;            &#125;        &#125;else&#123;            while(cur &amp;&amp; cur-&gt;next &amp;&amp; cur-&gt;next-&gt;val &lt; people[i][0])&#123;                cur &#x3D; cur-&gt;next;            &#125;        &#125;        newNode-&gt;val &#x3D; people[i][0];        newNode-&gt;cnt &#x3D; people[i][1];        newNode-&gt;next &#x3D; cur-&gt;next;        cur-&gt;next &#x3D; newNode;    &#125;    cur &#x3D; dummyHead-&gt;next;    while(cur!&#x3D; NULL)&#123;        ret[*returnSize] &#x3D; (int *)malloc(sizeof(int)*2);        ret[*returnSize][0] &#x3D; cur-&gt;val;        ret[*returnSize][1] &#x3D; cur-&gt;cnt;        (*returnColumnSizes)[(*returnSize)++] &#x3D; 2;        cur &#x3D; cur-&gt;next;    &#125;    return ret;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用最少数量的箭引爆气球"><a href="#2-用最少数量的箭引爆气球" class="headerlink" title="  2 用最少数量的箭引爆气球 "></a><h2> <span id="Tag2"> 2 用最少数量的箭引爆气球 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" title="452. 用最少数量的箭引爆气球">452. 用最少数量的箭引爆气球</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>有一些球形气球贴在一堵用 <code>XY</code> 平面表示的墙面上。墙面上的气球记录在整数数组 <code>points</code> ，其中<code>points[i] = [xstart, xend]</code> 表示水平直径在 <code>xstart</code> 和 <code>xend</code>之间的气球。你不知道气球的确切 <code>y</code> 坐标。</p><p>一支弓箭可以沿着 <code>x</code> 轴从不同点 <strong>完全垂直</strong> 地射出。在坐标 <code>x</code> 处射出一支箭，若有一个气球的直径的开始和结束坐标为 <code>xstart，xend</code>， 且满足  <code>xstart ≤ x ≤ xend</code>，则该气球会被 <strong>引爆</strong> 。可以射出的弓箭的数量 <strong>没有限制</strong> 。 弓箭一旦被射出之后，可以无限地前进。</p><p>给你一个数组 <code>points</code> ，返回引爆所有气球所必须射出的 <strong>最小</strong> 弓箭数 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> points = [[10,16],[2,8],[1,6],[7,12]]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 气球可以用2支箭来爆破:<br>-在x = 6处射出箭，击破气球[2,8]和[1,6]。<br>-在x = 11处发射箭，击破气球[10,16]和[7,12]。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> points = [[1,2],[3,4],[5,6],[7,8]]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 每个气球需要射出一支箭，总共需要4支箭。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> points = [[1,2],[2,3],[3,4],[4,5]]<br><strong>输出:</strong> 2<br><strong>解释:</strong><br>解释：气球可以用2支箭来爆破:</p><ul><li>在x = 2处发射箭，击破气球[1,2]和[2,3]。</li><li>在x = 4处射出箭，击破气球[3,4]和[4,5]。</li></ul></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>先对<code>points</code>按某一维进行排序，排完序遍历数组，求相邻两个区间的交集，当交集不为空时则说明截止目前的区间可以被消去，当为空时说明需要再多一个操作才可以把当前的消去。</p><p>简单一点，就是按区间左端点或右端点进行排序：</p><ol><li>以左端点排序: 遍历数组，创建一个变量<code>right</code>用于记录当前的交集的右端点。当当前的区间的左端点小于当前交集的右端点时，说明有交集，更新交集右端点为<code>min(right, points[i][1])</code>; 当当前的区间的左端点大于当前交集的右端点时，说明无交集，计数器<code>cnt</code>加1，然后将交集右端点置为当前区间右端点，继续遍历数组。</li><li>以右端点排序：遍历数组，创建一个变量<code>right</code>用于记录当前的交集的右端点。当当前的区间的左端点小于当前交集的右端点时，说明有交集，继续遍历(<strong>注意，这里按区间右端点排序，因而交集的右端点必定还是原来的那个右端点</strong>)；当当前的区间的左端点大于当前交集的右端点时，说明无交集，计数器<code>cnt</code>加1，然后将交集右端点置为当前区间右端点，继续遍历数组。</li></ol><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> points<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>points<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> points<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p <span class="token operator">:</span> points<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                right <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findMinArrowShots</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> points<span class="token punctuation">,</span> <span class="token keyword">int</span> pointsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> pointsColSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> pointsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> pointsSize<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> pointsSize <span class="token operator">&amp;&amp;</span> right <span class="token operator">>=</span> points<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-无重叠区间"><a href="#3-无重叠区间" class="headerlink" title="  3 无重叠区间 "></a><h2> <span id="Tag3"> 3 无重叠区间 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/non-overlapping-intervals/" title="435. 无重叠区间">435. 无重叠区间</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个区间的集合 <code>intervals</code> ，其中 <code>intervals[i] = [starti, endi]</code> 。返回 <strong>需要移除区间的最小数量，使剩余区间互不重叠</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> intervals = [[1,2],[2,3],[3,4],[1,3]]<br><strong>输出:</strong> 1<br><strong>解释:</strong> 移除 [1,3] 后，剩下的区间没有重叠。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> intervals = [ [1,2], [1,2], [1,2] ]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 你需要移除两个 [1,2] 来使剩下的区间没有重叠。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> intervals = [ [1,2], [2,3] ]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 你不需要移除任何区间，因为它们已经是无重叠的了。</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;按左端点进行排序，当左端点相等时，则按右端点进行排序。然后创建一个变量<code>right</code>记录当前区间的右端点，当<code>right &lt;= intervals[i][0]</code>时说明无重叠，将<code>right``intervals[i][1]</code>;否则结果<code>+1</code>，并<strong>将<code>right</code>更新为<code>min(right, p[1])</code></strong>，贪心的思想就体现在这，为什么是更新为<code>min(right, p[1])</code>？相比小区间，我们更偏向于删去区间较大的那个，这才能使得删去后区间的重复概率更小。(代码见<code>Cpp</code>实现)</p><p>&emsp;&emsp;另一种做法是按区间右端点排序，然后遍历数组，如果当相邻的区间没交集，则计数器加1，然后将右端点更新为当前遍历到的区间右端点。这里的计数器实际上是计算没有重叠区间的个数，那么最后需要删去的区间数就是<code>intervals.size() - cnt</code>。但需要注意的是，计数器<code>cnt</code>需要初始化为<code>1</code>而不是<code>0</code>，因为只有一个区间的时候，是没有重复区间的。(代码见<code>C</code>实现)</p><p><span id="codeof_tag3">完整代码如下：</span></p><p><code>Cpp</code>实现</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> p<span class="token operator">:</span> intervals<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//注意这里是从下标0开始</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//所以要减1，从下标1开始就不用减1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>C</code>实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">eraseOverlapIntervals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> intervals<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> intervalsColSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> end <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervalsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>end <span class="token operator">&lt;=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> intervalsSize <span class="token operator">-</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-划分字母区间"><a href="#4-划分字母区间" class="headerlink" title="  4 划分字母区间 "></a><h2> <span id="Tag4"> 4 划分字母区间 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/partition-labels/" title="763. 划分字母区间">763. 划分字母区间</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>字符串 <code>S</code> 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一字母最多出现在一个片段中。返回一个表示每个字符串片段的长度的列表。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> S = “ababcbacadefegdehijhklij”<br><strong>输出:</strong> [9,8,7]<br><strong>解释:</strong> 划分结果为 “ababcbaca”, “defegde”, “hijhklij”。<br>每个字母最多出现在一个片段中。<br>像 “ababcbacadefegde”, “hijhklij” 的划分是错误的，因为划分的片段数较少。</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;遍历字符串<code>map[26]</code>,将当前遍历到的字符的下标插入到<code>map</code>中，最后就相当于得到字符串中每个字符的最远位置。然后创建两个变量，一个表示当前片段的起始位置<code>left</code>，另一个表示当前片段的终点位置<code>right</code>，遍历该字符串，如果当前字符的最远位置大于<code>right</code>,则将<code>right</code>更新为当前字符的最远位置；而当当前遍历的字符的下标刚好等于<code>right</code>，说明从<code>left</code>到<code>right</code>刚好就是题目所要求的一个片段，将当前片段的长度<code>right - left + 1</code>插入到答案中，然后将片段起始位置移动到<code>right</code>的下一个位置，继续遍历字符串。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> map<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> map<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">partitionLabels</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//第一个的最远</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> pos<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> right <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-合并区间"><a href="#5-合并区间" class="headerlink" title="  5 合并区间 "></a><h2> <span id="Tag5"> 5 合并区间 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/merge-intervals/" title="56. 合并区间">56. 合并区间</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>以数组 <code>intervals</code> 表示若干个区间的集合，其中单个区间为 <code>intervals[i] = [starti, endi]</code> 。请你合并所有重叠的区间，并返回 一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> intervals = [[1,3],[2,6],[8,10],[15,18]]<br><strong>输出:</strong> [[1,6],[8,10],[15,18]]<br><strong>解释:</strong> 区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> intervals = [[1,4],[4,5]]<br><strong>输出:</strong> [[1,5]]<br><strong>解释:</strong> 区间 [1,4] 和 [4,5] 可被视为重叠区间。</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;先按区间左端点进行排序，然后找交集，如果有交集则更新右端点，否则将合并后的区间加入到答案中并更新左右端点为当前遍历的区间的左右端点。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>           <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                 right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> intervals<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> intervalsColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> intervalsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>intervalsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> intervalsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> intervalsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//重叠</span>            right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-单调递增的数字"><a href="#6-单调递增的数字" class="headerlink" title="  6 单调递增的数字 "></a><h2> <span id="Tag6"> 6 单调递增的数字 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/monotone-increasing-digits/" title="738. 单调递增的数字">738. 单调递增的数字</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>当且仅当每个相邻位数上的数字 <code>x</code> 和 <code>y</code> 满足 <code>x &lt;= y</code> 时，我们称这个整数是单调递增的。</p><p>给定一个整数 <code>n</code> ，返回 <strong>小于或等于</strong> <code>n</code> 的最大数字，且数字呈 <strong>单调递增</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 10<br><strong>输出:</strong> 9</p></blockquote><p><strong>示例2:</strong> </p><blockquote><p><strong>输入:</strong> n = 1234<br><strong>输出:</strong> 1234</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> 332<br><strong>输出:</strong> 299</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>由低位到高位遍历数字，当找到当前位小于其高一位，则将高一位减1，当前位及其低位均置为9，然后继续遍历直至满足条件即可。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">monotoneIncreasingDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> n<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//最低位</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            tmp <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">></span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">=</span> tmp <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> cnt<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                tmp <span class="token operator">=</span> ans<span class="token punctuation">;</span>                cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">num2str</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>index<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token operator">+</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">monotoneIncreasingDigits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token operator">=</span> <span class="token function">num2str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> len<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            str<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            pos <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> pos<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'9'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">atoi</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*    int i = 0;    for(; i &lt; len-1; ++i)&#123;        if(str[i] > str[i+1])&#123;            while(i &amp;&amp; str[i-1] == str[i]) --i;            str[i]--;            break;        &#125;    &#125;    for(i += 1; i &lt; len; ++i)&#123;        str[i] = '9';    &#125;    return atoi(str);    */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-买卖股票的最佳时机含手续费"><a href="#7-买卖股票的最佳时机含手续费" class="headerlink" title="  7 买卖股票的最佳时机含手续费 "></a><h2> <span id="Tag7"> 7 买卖股票的最佳时机含手续费 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/" title="714. 买卖股票的最佳时机含手续费">714. 买卖股票的最佳时机含手续费</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给定一个整数数组 <code>prices</code>，其中 <code>prices[i]</code>表示第 <code>i</code> 天的股票价格 ；整数 <code>fee</code> 代表了交易股票的手续费用。</p><p>你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。</p><p>返回获得利润的最大值。</p><p><strong>注意</strong>：这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [1, 3, 2, 8, 4, 9], fee = 2<br><strong>输出:</strong> 8<br><strong>解释:</strong> 能够达到的最大利润:<br>在此处买入 prices[0] = 1<br>在此处卖出 prices[3] = 8<br>在此处买入 prices[4] = 4<br>在此处卖出 prices[5] = 9<br>总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,3,7,5,10,3], fee = 3<br><strong>输出:</strong> 6</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><ul><li><p>动态规划: 这题用DP很好做，创建一个dp数组<code>dp[n][2]</code>，每天有两个状态，<code>dp[i][0]</code>表示第<code>i</code>天手上没有股票，<code>dp[i][1]</code>表示第<code>i</code>天手上有股票。<code>dp[i][0]</code>由前一天有股票但第<code>i</code>天卖出或前一天没有股票这两种状态转化而来，而<code>dp[i][1]</code>由前一天有股票或前一天没有股票第<code>i</code>天买入这两种状态转化而来，因而状态转换方程为：</p><script type="math/tex; mode=display">\begin{equation*}\begin{split}dp[i][0] = max(dp[i-1][0], dp[i-1][1] + prices[i] - fee)\\dp[i][1] = max(dp[i-1][0] - prices[i], dp[i-1][1])\end{split}\end{equation*}</script></li><li><p>贪心: 将手续费在买入股票时就算入到股票的价格中，以<code>prices[i]+fee</code>作为股票的价格，用<code>price</code>来记录当前手里有股票时其最低的买入价格，然后遍历数组，如果<code>prices[i]+fee &lt; price</code>说明前边买股票不如今天买，则将最低买入价格更新为<code>prices[i]+fee</code>；而当<code>prices[i] &gt; price</code>时说明此时卖出可以获得利润，将二者的差值加到答案中，然后更新买入价格，<strong>注意</strong>，一找到<code>prices[i] &gt; price</code>就卖出，而后如果有更大的获利空间，如果跟121题一样，连续买入卖出将会多次结算手续费，因而卖出时将最低价格置为当天的股票价格，这么一来，如果后边有买入价格<code>prices[i]+fee&lt;price</code>时则自动更新为下一天再买股票，否则相当于股票还没卖出。这个思路要多想几次，想通透一点。</p></li></ul><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code>实现(DP)</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><code>C</code>实现(优化DP)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> newdp0 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>fee<span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> newdp1 <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> newdp0<span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> newdp1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>Cpp</code>实现(贪心)</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> price <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>fee<span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> fee <span class="token operator">&lt;</span> price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>fee<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                profit <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">;</span>                price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现(贪心)<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> price <span class="token operator">=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> fee<span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pricesSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>fee <span class="token operator">&lt;</span> price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>fee<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> price<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            profit <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> price<span class="token punctuation">;</span>            price <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> profit<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="8-监控二叉树"><a href="#8-监控二叉树" class="headerlink" title="  8 监控二叉树 "></a><h2> <span id="Tag8"> 8 监控二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-cameras/" title="968. 监控二叉树">968. 监控二叉树</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给定一个二叉树，我们在树的节点上安装摄像头。</p><p>节点上的每个摄影头都可以监视<strong>其父对象、自身及其直接子对象</strong>。</p><p>计算监控树的所有节点所需的最小摄像头数量。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [0,0,null,0,0]<br><strong>输出:</strong> 1<br><strong>解释:</strong> 如图所示，一台摄像头足以监控所有节点。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> [0,0,null,0,null,0,null,null,0]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 需要至少两个摄像头来监视树的所有节点。 上图显示了摄像头放置的有效位置之一。</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><ul><li>0：无覆盖</li><li>1：当前结点有摄像头</li><li>2：有覆盖</li></ul><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>ans<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">minCameraCover</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ans<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> ans<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">++</span>ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> right <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">minCameraCover</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">++</span>ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch8-of-programmercarl-2</title>
      <link href="/2022/04/19/ch8-of-programmercarl-2/"/>
      <url>/2022/04/19/ch8-of-programmercarl-2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">46. 全排列</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">47. 全排列 II</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">332. 重新安排行程</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">51. N 皇后</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">37. 解数独</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-全排列"><a href="#1-全排列" class="headerlink" title="  1 全排列 "></a><h2> <span id="Tag1"> 1 全排列 </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/permutations/">46. 全排列</a> “46. 全排列”)</li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定一个不含重复数字的数组 nums ，返回其 所有可能的全排列 。你可以 按任意顺序 返回答案。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3]<br><strong>输出:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0,1]<br><strong>输出:</strong> [[0,1],[1,0]]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [1]<br><strong>输出:</strong> [[1]]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token comment">//检测是否用过该数字以及当前数字加入后是否还是递增的</span>            <span class="token punctuation">&#125;</span>            used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//已经访问过该数字，哈希置为true</span>            path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">;</span>bool used<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> pathSize<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        path<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    size <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">46656</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">46656</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-全排列-II"><a href="#2-全排列-II" class="headerlink" title="  2 全排列 II "></a><h2> <span id="Tag2"> 2 全排列 II </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/permutations-ii/">47. 全排列 II</a> “47. 全排列 II”)</li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定一个可包含重复数字的序列 <code>nums</code> ，按 <strong>任意顺序</strong> 返回所有不重复的全排列。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,1,2]<br><strong>输出:</strong><br>[[1,1,2],<br>[1,2,1],<br>[2,1,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3]<br><strong>输出:</strong> [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token comment">//检测是否用过该数字以及当前数字加入后是否还是递增的</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//已经访问过该数字，哈希置为true</span>            path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span>bool <span class="token operator">*</span>used<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> pathSize<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        path<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">></span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    size <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">pow</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    used <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>bool<span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-重新安排行程"><a href="#3-重新安排行程" class="headerlink" title="  3 重新安排行程 "></a><h2> <span id="Tag3"> 3 重新安排行程 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reconstruct-itinerary/" title="332. 重新安排行程">332. 重新安排行程</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [fromi, toi]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><p>例如，行程 <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> 与 <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code> 相比就更小，排序更靠前。<br>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch8-of-programmercarl-2/332_1.jpg" alt></p><blockquote><p><strong>输入:</strong> tickets = [[“MUC”,”LHR”],[“JFK”,”MUC”],[“SFO”,”SJC”],[“LHR”,”SFO”]]<br><strong>输出:</strong> [“JFK”,”MUC”,”LHR”,”SFO”,”SJC”]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch8-of-programmercarl-2/332_2.jpg" alt></p><blockquote><p><strong>输入:</strong> tickets = [[“JFK”,”SFO”],[“JFK”,”ATL”],[“SFO”,”ATL”],[“ATL”,”JFK”],[“ATL”,”SFO”]]<br><strong>输出:</strong> [“JFK”,”ATL”,”JFK”,”SFO”,”ATL”,”SFO”]<br><strong>解释:</strong> 另一种有效的行程是 [“JFK”,”SFO”,”ATL”,”JFK”,”ATL”,”SFO”] ，但是它字典排序更大更靠后。</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;上来直接回溯，先按票的第二个排个序，然后就是回溯，然后喜提双5％.~</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> tickets<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> visited<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">||</span> rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> tickets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tickets<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> rest <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span><span class="token operator">&amp;</span> tickets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> tickets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">visited</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token string">"JFK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>tickets<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tickets<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>             <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//lambda表达式，进行排序  </span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>tickets<span class="token punctuation">,</span> visited<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-N-皇后"><a href="#4-N-皇后" class="headerlink" title="  4 N 皇后 "></a><h2> <span id="Tag4"> 4 N 皇后 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/n-queens/" title="51. N 皇后">51. N 皇后</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>&#39;Q&#39;</code> 和 <code>&#39;.&#39;</code> 分别代表了皇后和空位。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch8-of-programmercarl-2/51.jpg" alt></p><blockquote><p><strong>输入:</strong> n = 4<br><strong>输出:</strong> [[“.Q..”,”…Q”,”Q…”,”..Q.”],[“..Q.”,”Q…”,”…Q”,”.Q..”]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 1<br><strong>输出:</strong> [[“Q”]] </p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;先创建一个<code>vector visited</code>，元素为<code>pair</code>，<code>pair</code>中的元素分别代表已经访问过的行和列. <code>N</code>皇后要求每一行、每一列、每个45°角上的格子有且仅有一个皇后<code>Q</code>. </p><ul><li><p>用一个变量来存储还有多少个皇后没被放到棋盘上，这里定义为<code>rest</code>，初始化为<code>n</code>(因为一开始还没放皇后的时候就还剩<code>n</code>个皇后要放). 当某次递归开始前检测到<code>rest == 0</code>时说明皇后已经放完了，将结果插入到答案<code>vector</code>中。</p></li><li><p>用一个变量来表示当前的皇后要放的行数，这里定义为<code>row</code>，很显然，当<code>row &gt;= n</code>这个条件成立时说明越界，直接返回即可。</p></li><li><p>递归过程进行列数的选择，即循环遍历列，并判断当前行中所遍历的列数是否可以放皇后，可以的话，则将行数、列数作为一个<code>pair</code>插入到<code>visited</code>中，并进行下一层递归。</p></li></ul><blockquote><p>要注意，每一行为一个<code>string</code>，这个<code>string</code>要初始化为<code>n</code>个<code>.</code>,然后当当前位置可行时则将对应位置置为<code>Q</code>表示在这个格子放皇后。回溯后需要将这个格重新赋值为<code>.</code>。</p></blockquote><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> visited<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//检测位置是否可行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">:</span> visited<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">==</span> iter<span class="token punctuation">.</span>first    <span class="token comment">//同列</span>              <span class="token operator">||</span> col <span class="token operator">==</span> iter<span class="token punctuation">.</span>second <span class="token comment">//同行 </span>              <span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>row <span class="token operator">-</span> iter<span class="token punctuation">.</span>first<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">abs</span><span class="token punctuation">(</span>col <span class="token operator">-</span> iter<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//45°角</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> visited<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">>=</span> n<span class="token operator">||</span> rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            str <span class="token operator">+=</span> <span class="token string">"."</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>c<span class="token punctuation">,</span> visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                visited<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'Q'</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> rest<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                str<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span>                visited<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> visited<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> visited<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-解数独"><a href="#5-解数独" class="headerlink" title="  5 解数独 "></a><h2> <span id="Tag5"> 5 解数独 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/sudoku-solver/" title="37. 解数独">37. 解数独</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><p>数字 <code>1-9</code> 在每一行只能出现一次。<br>数字 <code>1-9</code> 在每一列只能出现一次。<br>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）<br>数独部分空格内已填入了数字，空白格用 <code>&#39;.&#39;</code> 表示。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch8-of-programmercarl-2/37.png" alt></p><blockquote><p><strong>输入:</strong> board = [[“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”],[“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”],[“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”],[“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”],[“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”],[“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”],[“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”],[“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”],[“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]<br><strong>输出:</strong> [[“5”,”3”,”4”,”6”,”7”,”8”,”9”,”1”,”2”],[“6”,”7”,”2”,”1”,”9”,”5”,”3”,”4”,”8”],[“1”,”9”,”8”,”3”,”4”,”2”,”5”,”6”,”7”],[“8”,”5”,”9”,”7”,”6”,”1”,”4”,”2”,”3”],[“4”,”2”,”6”,”8”,”5”,”3”,”7”,”9”,”1”],[“7”,”1”,”3”,”9”,”2”,”4”,”8”,”5”,”6”],[“9”,”6”,”1”,”5”,”3”,”7”,”2”,”8”,”4”],[“2”,”8”,”7”,”4”,”1”,”9”,”6”,”3”,”5”],[“3”,”4”,”5”,”2”,”8”,”6”,”1”,”7”,”9”]]<br><img src="/2022/04/19/ch8-of-programmercarl-2/37_1.png" alt></p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> new_r <span class="token operator">=</span> row<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">,</span> new_c <span class="token operator">=</span> col<span class="token operator">/</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            new_r <span class="token operator">+=</span> i<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span> new_c <span class="token operator">+=</span> i<span class="token operator">%</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ch <span class="token operator">||</span>              board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> ch <span class="token operator">||</span>              board<span class="token punctuation">[</span>new_r<span class="token punctuation">]</span><span class="token punctuation">[</span>new_c<span class="token punctuation">]</span> <span class="token operator">==</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'.'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">char</span> ch <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'.'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;这五道题加上第1部分的第10题值得再刷两三遍！</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> DFS </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch7-of-programmercarl-3</title>
      <link href="/2022/04/19/ch7-of-programmercarl-3/"/>
      <url>/2022/04/19/ch7-of-programmercarl-3/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">701.二叉搜索树中的插入操作</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">450.删除二叉搜索树中的节点</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">669. 修剪二叉搜索树</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">108.将有序数组转换为二叉搜索树</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">538.把二叉搜索树转换为累加树</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-二叉搜索树中的插入操作"><a href="#1-二叉搜索树中的插入操作" class="headerlink" title="  1 二叉搜索树中的插入操作 "></a><h2> <span id="Tag1"> 1 二叉搜索树中的插入操作 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="701. 二叉搜索树中的插入操作">701. 二叉搜索树中的插入操作</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和要插入树中的值 <code>value</code> ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 保证 ，新值和原始二叉搜索树中的任意节点值都不同。</p><p><strong>注意</strong>，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 <strong>任意有效的结果</strong> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/701_1_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3], val = 5<br><strong>输出:</strong> [4,2,7,1,3,5]<br><strong>解释:</strong> 另一个满足题目要求可以通过的树是：<br><img src="/2022/04/19/ch7-of-programmercarl-3/701_1_2.jpg" alt></p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [40,20,60,10,30,50,70], val = 25<br><strong>输出:</strong> [40,20,60,10,30,50,70,null,null,25]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3,null,null,null,null,null,null], val = 5<br><strong>输出:</strong> [4,2,7,1,3,5]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;<code>BST</code>插入结点只需要按照<code>BST</code>的性质寻找插入位置即可。</p><ul><li>当待插入的树为空树时，直接将待插入节点作为根节点返回即可。</li><li>当待插入的树不为空时，按照BST性质查找位置：<ul><li>当待插入节点的值小于当前节点值时，则插入位置在当前节点的左子树中。</li><li>当待插入节点的值大于当前节点值时，则插入位置在当前节点的右子树中。</li><li>当待插入节点的值等于当前节点值时，插入失败。</li></ul></li></ul><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-删除二叉搜索树中的节点"><a href="#2-删除二叉搜索树中的节点" class="headerlink" title="  2 删除二叉搜索树中的节点 "></a><h2> <span id="Tag2"> 2 删除二叉搜索树中的节点 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/" title="450. 删除二叉搜索树中的节点">450. 删除二叉搜索树中的节点</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定一个二叉搜索树的根节点 <strong>root</strong> 和一个值 <strong>key</strong>，删除二叉搜索树中的 <strong>key</strong> 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。</p><p>一般来说，删除节点可分为两个步骤：</p><ol><li>首先找到需要删除的节点；</li><li>如果找到了，删除它。</li></ol><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/450_1_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [5,3,6,2,4,null,7], key = 3<br><strong>输出:</strong> [5,4,6,2,null,null,7]<br><strong>解释:</strong> 给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。<br>一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。<br>另一个正确答案是 [5,2,6,null,4,null,7]。<br><img src="/2022/04/19/ch7-of-programmercarl-3/450_1_2.jpg" alt></p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [5,3,6,2,4,null,7], key = 0<br><strong>输出:</strong> [5,3,6,2,4,null,7]<br><strong>解释:</strong> 二叉树不包含值为 0 的节点</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = [], key = 0<br><strong>输出:</strong> []</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;二叉树删除操作相对插入操作较为复杂。首先需要查找待删除节点位置，如果节点不在树中，则返回<code>false</code>表明删除失败即可。当找到待插入节点的位置时，有以下三种情况：</p><ul><li>待删除结点的左子树为空：将该节点的双亲结点指向其的指针改为指向其右子树，然后将该节点释放即可。</li><li>待删除结点的右子树为空：将该节点的双亲结点指向其的指针改为指向其左子树，然后将该节点释放即可。</li><li>待删除结点的左右子树均不为空：将该节点的值修改为其左子树中最大值或右子树中最小值，并将对应的结点删去即可。</li></ul><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//当这个条件满足时说明删去的是根节点</span>                <span class="token keyword">return</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//当这个条件满足时说明删去的是根节点</span>                <span class="token keyword">return</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>cur1 <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>             parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//找右侧最小值</span>                parent <span class="token operator">=</span> cur1<span class="token punctuation">;</span>                cur1 <span class="token operator">=</span> cur1<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">-></span>val <span class="token operator">=</span> cur1<span class="token operator">-></span>val<span class="token punctuation">;</span>       <span class="token comment">//将待删除结点的值改为右侧最小</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>right <span class="token operator">==</span> cur1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//说明待删除结点右侧最小即为其右孩子</span>                parent<span class="token operator">-></span>right <span class="token operator">=</span> cur1<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                parent<span class="token operator">-></span>left <span class="token operator">=</span> cur1<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">delete</span><span class="token punctuation">(</span>cur1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">></span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//当这个条件满足时说明删去的是根节点</span>            <span class="token keyword">return</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>parent<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//当这个条件满足时说明删去的是根节点</span>            <span class="token keyword">return</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur1 <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>         parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//找右侧最小值</span>            parent <span class="token operator">=</span> cur1<span class="token punctuation">;</span>            cur1 <span class="token operator">=</span> cur1<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token operator">-></span>val <span class="token operator">=</span> cur1<span class="token operator">-></span>val<span class="token punctuation">;</span>       <span class="token comment">//将待删除结点的值改为右侧最小</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>right <span class="token operator">==</span> cur1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//说明待删除结点右侧最小即为其右孩子</span>            parent<span class="token operator">-></span>right <span class="token operator">=</span> cur1<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>left <span class="token operator">=</span> cur1<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>cur1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-修剪二叉搜索树"><a href="#3-修剪二叉搜索树" class="headerlink" title="  3 修剪二叉搜索树 "></a><h2> <span id="Tag3"> 3 修剪二叉搜索树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/trim-a-binary-search-tree/" title="669. 修剪二叉搜索树">669. 修剪二叉搜索树</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你二叉搜索树的根节点 <code>root</code> ，同时给定最小边界<code>low</code> 和最大边界 <code>high</code>。通过修剪二叉搜索树，使得所有节点的值在<code>[low, high]</code>中。修剪树 不应该 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 <strong>唯一的答案</strong> 。</p><p>所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/669_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,0,2], low = 1, high = 2<br><strong>输出:</strong> [1,null,2]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/669_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [3,0,4,null,2,null,null,1], low = 1, high = 3<br><strong>输出:</strong> [3,2,null,1]</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><ul><li>递归：当根节点值小于<code>low</code>则递归其右子树，若大于<code>high</code>则递归其左子树，否则分别在左右子树中寻找，并将下一层的递归结果返回给当前结点的左右孩子。</li></ul><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> low<span class="token punctuation">)</span>     <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//递归右子树</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">></span> high<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//递归左子树</span>        root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重连左孩子</span>        root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//重连右孩子</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>迭代：</p><ul><li>首先先把根节点<code>root</code>移动到目标范围中，然后分别对左、右子树进行修剪。</li><li>由于第一步我们已经把<code>root</code>移动到目标范围中,那么小于<code>low</code>的只会在左子树中出现。遍历左子树，<strong>当所遍历的结点的左孩子的值小于<code>low</code>，则该节点的左孩子及其左子树都将小于<code>low</code></strong>，因而应该<strong>在该节点的左孩子的右子树中寻找</strong>，即将当前结点的左孩子连到原来的左孩子的右孩子:<code>cur-&gt;left = cur-&gt;left-&gt;right</code>直至访问的结点为空。</li><li>第二步完成了左子树的修剪，右子树的修剪也是类似的。对右子树进行遍历，当<strong>当前的结点的右孩子的值大于<code>high</code>，说明该节点的右孩子及其右子树的值都大于<code>high</code></strong>，因而我们需要<strong>在该节点的右孩子的左子树中寻找</strong>符合要求的结点，因此：<code>cur-&gt;right = cur-&gt;right-&gt;left</code>.</li></ul></li><li><p><code>Cpp</code> 实现</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//下边第一种写法最后可能会导致root->val > high</span>        <span class="token comment">/*while(root &amp;&amp; root->val > high)&#123;            root = root->left;        &#125;        while(root &amp;&amp; root->val &lt; low)&#123;            root = root->right;        &#125;*/</span>                <span class="token comment">//将根节点移动到目标范围内</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> low <span class="token operator">||</span> root<span class="token operator">-></span>val <span class="token operator">></span> high<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> low<span class="token punctuation">)</span> root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token keyword">else</span> root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">//移动后如果根节点为空则说明整棵树都不在范围内</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>left<span class="token operator">-></span>val <span class="token operator">&lt;</span> low<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>right<span class="token operator">-></span>val <span class="token operator">></span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-将有序数组转换为二叉搜索树"><a href="#4-将有序数组转换为二叉搜索树" class="headerlink" title="  4 将有序数组转换为二叉搜索树 "></a><h2> <span id="Tag4"> 4 将有序数组转换为二叉搜索树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" title="108. 将有序数组转换为二叉搜索树">108. 将有序数组转换为二叉搜索树</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，其中元素已经按 <strong>升序</strong> 排列，请你将其转换为一棵 <strong>高度平衡</strong> 二叉搜索树。</p><p><strong>高度平衡</strong> 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/108_1.jpg" alt></p><blockquote><p><strong>输入:</strong> nums = [-10,-3,0,5,9]<br><strong>输出:</strong> [0,-3,9,-10,null,5]<br><strong>解释:</strong> [0,-10,5,null,-3,null,9] 也将被视为正确答案：<br><img src="/2022/04/19/ch7-of-programmercarl-3/108_1_2.jpg" alt></p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/108_2.jpg" alt></p><blockquote><p><strong>输入:</strong> nums = [1,3]<br><strong>输出:</strong> [3,1]</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;取数组中间那个值为根节点，然后左右两侧各为左右子树进行构建即可。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">construct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">></span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">addNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">></span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>val <span class="token operator">=</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">addNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">addNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">addNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-把二叉搜索树转换为累加树"><a href="#5-把二叉搜索树转换为累加树" class="headerlink" title="  5 把二叉搜索树转换为累加树 "></a><h2> <span id="Tag5"> 5 把二叉搜索树转换为累加树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/convert-bst-to-greater-tree/" title="538. 把二叉搜索树转换为累加树">538. 把二叉搜索树转换为累加树</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给出二叉 <strong>搜索</strong> 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 <code>node</code> 的新值等于原树中大于或等于 <code>node.val</code> 的值之和。</p><p>提醒一下，二叉搜索树满足下列约束条件：</p><p>节点的左子树仅包含键 <strong>小于</strong> 节点键的节点。<br>节点的右子树仅包含键 <strong>大于</strong> 节点键的节点。<br>左右子树也必须是二叉搜索树。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-3/538_1.png" alt></p><blockquote><p><strong>输入:</strong> [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]<br><strong>输出:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [0,null,1]<br><strong>输出:</strong> [1,null,1]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = [1,0,2]<br><strong>输出:</strong> [3,3,2]</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> root = [3,2,4,1]<br><strong>输出:</strong> [7,9,4,10]</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;其实就是树的遍历罢了，只是要创建一个变量用于存储上一个访问的结点的值，然后将其加到当前结点上，并更新该变量即可。遍历顺序就是中序遍历的镜像，即“右-根-左”.</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> s<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                s<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cur<span class="token operator">-></span>val <span class="token operator">+=</span> val<span class="token punctuation">;</span>                val <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> <span class="token function">convertBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">convertBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span>root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            cur<span class="token operator">-></span>val <span class="token operator">+=</span> sum<span class="token punctuation">;</span>            sum <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch7-of-programmercarl-2</title>
      <link href="/2022/04/19/ch7-of-programmercarl-2/"/>
      <url>/2022/04/19/ch7-of-programmercarl-2/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">112. 路径总和</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">106.从中序与后序遍历序列构造二叉树</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">654.最大二叉树</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">617.合并二叉树</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">700.二叉搜索树中的搜索</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">98.验证二叉搜索树</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">530.二叉搜索树的最小绝对差</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">501.二叉搜索树中的众数</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">236. 二叉树的最近公共祖先</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">235. 二叉搜索树的最近公共祖先</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-路径总和"><a href="#1-路径总和" class="headerlink" title="  1 路径总和 "></a><h2> <span id="Tag1"> 1 路径总和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/path-sum/" title="112. 路径总和">112. 路径总和</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给你二叉树的根节点 <code>root</code> 和一个表示目标和的整数 <code>targetSum</code> 。判断该树中是否存在 <strong>根节点到叶子节点</strong> 的路径，这条路径上所有节点值相加等于目标和 <code>targetSum</code> 。如果存在，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>叶子节点 是指没有子节点的节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/112_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/112_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,3], targetSum = 5<br><strong>输出:</strong> false</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = [], targetSum = 0<br><strong>输出:</strong> false</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><ul><li><p><code>DFS</code>: 结束循环的条件是找到叶节点或当前结点为<code>NULL</code>，而找到叶节点的条件为<code>root &amp;&amp; !root-&gt;left &amp;&amp; !root-&gt;right</code>为<code>true</code>。<code>DFS</code>也可以转为前序遍历。</p></li><li><p><code>BFS</code>: 需要创建多余的队列来存储当前层的路径和，没有<code>DFS</code>方便。</p></li></ul><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> flag<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">||</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">&amp;&amp;</span> sum<span class="token operator">+</span>root<span class="token operator">-></span>val <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> sum <span class="token operator">+</span> root<span class="token operator">-></span>val<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> sum <span class="token operator">+</span> root<span class="token operator">-></span>val<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> flag<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">hasPathSum</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">5001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> sums<span class="token punctuation">[</span><span class="token number">5001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stack_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            sums<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>            cur <span class="token operator">=</span>cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        sum <span class="token operator">=</span> sums<span class="token punctuation">[</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>right <span class="token operator">&amp;&amp;</span> sum <span class="token operator">==</span> targetSum<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-从中序与后序遍历序列构造二叉树"><a href="#2-从中序与后序遍历序列构造二叉树" class="headerlink" title="  2 从中序与后序遍历序列构造二叉树 "></a><h2> <span id="Tag2"> 2 从中序与后序遍历序列构造二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" title="106. 从中序与后序遍历序列构造二叉树">106. 从中序与后序遍历序列构造二叉树</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定两个整数数组 <code>inorder</code> 和 <code>postorder</code> ，其中 <code>inorder</code> 是二叉树的中序遍历， <code>postorder</code> 是同一棵树的后序遍历，请你构造并返回这颗 <em>二叉树</em> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/106.jpg" alt></p><blockquote><p><strong>输入:</strong> inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]<br><strong>输出:</strong> [3,9,20,null,null,15,7]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> inorder = [-1], postorder = [-1]<br><strong>输出:</strong> [-1]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><ul><li>递归</li></ul><p>&emsp;&emsp;直接模拟即可。后序遍历的顺序是“左-右-根”，根节点在数组的最右边，左子树在前，右子树为左子树与根节点之间；而中序遍历是“左-根-右”，根节点位于数组中间(位置不确定)，左子树和右子树位于根节点两端。因此，容易知道，树的根就是<code>postorder</code>的最后一位，然后在<code>inorder</code>中找到对应的下标<code>i</code>，则<code>inorder</code>中左子树范围为<code>0~i-1</code>,因而左子树结点数位<code>i</code>,右子树为<code>i+1~n-1</code>(n为size),数量为<code>n-1-i</code>;由于不同遍历对树的左右子树结点数不影响，因而<code>postorder</code>中左子树的范围同样为<code>0-i-1</code>, 右子树为<code>i~n-2</code>.这样就把树的创建分为根节点-找左子树范围与右子树范围-进入下一层循环。</p><p>&emsp;&emsp;上述的过程是第一层循环，而往后的循环其区间不再是<code>0~size-1</code>，而是左右边界均会改变。记<code>inorder</code>中根节点下标为<code>i</code>，左界限为<code>in_left</code>、右界限为<code>in_right</code>(第一层循环y有<code>in_left = 0</code>和<code>in_right = size-1</code>)，<code>postorder</code>中根节点下标为<code>size-1</code>，左界限为<code>post_left</code>、右界限为<code>psot_right</code>(第一层循环y有<code>post_left = 0</code>和<code>post_right = size-1</code>). 进入下一层循环时，构建左子树时有：<code>in_left = in_left, in_right = i-1</code> 和 <code>post_left = post_left, post_right = post_left + i - 1- in_left</code>；右子树时有：<code>in_left = i+1, in_right = in_right</code> 和 <code>post_left = post_left + i- in_left, post_right = post_right-1</code>(按照相对关系和结点数即可得到左右边界).</p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">construct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> il<span class="token punctuation">,</span> <span class="token keyword">int</span> ir<span class="token punctuation">,</span> <span class="token keyword">int</span> pl<span class="token punctuation">,</span> <span class="token keyword">int</span> pr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pl <span class="token operator">></span> pr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>pr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> il<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ir<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> postorder<span class="token punctuation">[</span>pr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> il<span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pl<span class="token punctuation">,</span> pl<span class="token operator">+</span>i<span class="token operator">-</span>il<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> ir<span class="token punctuation">,</span> pl<span class="token operator">+</span>i<span class="token operator">-</span>il<span class="token punctuation">,</span> pr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">construct</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> postorder<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//if(size == 1) return node;</span>    <span class="token keyword">int</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> pos <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> pos<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> postorder<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder <span class="token operator">+</span> <span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postorder <span class="token operator">+</span> pos<span class="token punctuation">,</span> size<span class="token operator">-</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> inorder<span class="token punctuation">,</span> <span class="token keyword">int</span> inorderSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> postorder<span class="token punctuation">,</span> <span class="token keyword">int</span> postorderSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">construct</span><span class="token punctuation">(</span>inorder<span class="token punctuation">,</span> postorder<span class="token punctuation">,</span> inorderSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>C</code>实现中直接通过修改数组的偏置来作为左边界，右边界则是通过结点数和左边界得到，因而传入的变量只需要两个数组(加了偏置)和子树的结点数量即可。</p></blockquote><ul><li>迭代</li></ul><p>&emsp;&emsp;后序遍历中，根节点为数组中最后一个数，然后前边的分成左子树和右子树两个部分。由于后序遍历的顺序为“左-右-根”，因而右子树部分中靠后部分其实就是根节点的右孩子；而中序遍历中，数组最后的部分同样也为右孩子，当右子树中的结点都没有左孩子时，那么后序遍历的右子树部分将于中序遍历中对应的部分呈现相反的方向，即中序遍历为从上往下，而后序遍历则是从下往上。当右子树中的结点有左孩子时，中序遍历中左孩子将位于其双亲结点的左侧，即将其双亲结点与其“祖宗”结点们隔开，而后序遍历中仍然保持数组最后一部分为根节点的右孩子、根节点的右孩子的右孩子…(根节点右系)。见下图图解。</p><p><img src="/2022/04/19/ch7-of-programmercarl-2/106_.png" alt></p><p>&emsp;&emsp;按照后序遍历数组自后而前创建二叉树，先是一直创建右系直至右系创建完成，如何检测创建完成与否呢？创建完成即创建完右系中最后一个结点，即二叉树中最右侧的结点，而这个结点正好为中序遍历数组中的最后一个数，因而只需判断当前结点的值是否等于中序遍历最后的数；右系创建完成后，我们需要在右系的基础上把其余部分添加到上边，这时候就得用到前边提到的“<strong>如果右子树中的结点没有左孩子时中序和后序是相反</strong>”这个性质，自中序从后而前遍历，当遍历到的数字还没有创建时，说明该数字为某个结点的左孩子，那么其双亲结点如何确定呢？双亲结点其实就是它在<code>inorder</code>中的右侧挨着它的那个数。</p><p>&emsp;&emsp;为实现以上思路，需要用一个栈，将已经创建完成的但还没顾及左孩子的结点入栈，当栈顶结点的值与中序数组中最后一个的值一样时说明右系创建完成，开始解决左孩子结点：用一个指针指向中序数组最后一位，当栈顶结点值等于该指针指向的值时，则该指针向前移动，并将该节点出栈；当检测到二者不同时，说明指针指向的值即为刚出栈的结点的左孩子。</p><p><span id="codeof_tag2">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> inorderIndex <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> postorderIndex <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> postorderIndex <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>postorderIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">!=</span> inorder<span class="token punctuation">[</span>inorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>postorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span>val <span class="token operator">==</span> inorder<span class="token punctuation">[</span>inorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token operator">--</span>inorderIndex<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                cur<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">[</span>postorderIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-最大二叉树"><a href="#3-最大二叉树" class="headerlink" title="  3 最大二叉树 "></a><h2> <span id="Tag3"> 3 最大二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-binary-tree/" title="654. 最大二叉树">654. 最大二叉树</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个不重复的整数数组 <code>nums</code> 。 <strong>最大二叉树</strong> 可以用下面的算法从 <code>nums</code> 递归地构建:</p><ol><li>创建一个根节点，其值为 <code>nums</code> 中的最大值。</li><li>递归地在最大值 <strong>左边</strong> 的 <strong>子数组前缀上</strong> 构建左子树。</li><li>递归地在最大值 <strong>右边</strong> 的 <strong>子数组后缀上</strong> 构建右子树。</li></ol><p>返回 <code>nums</code> 构建的 <strong>最大二叉树</strong> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/654.jpg" alt></p><blockquote><p><strong>输入:</strong> nums = [3,2,1,6,0,5]<br><strong>输出:</strong> [6,3,5,null,2,0,null,null,1]<br><strong>解释:</strong> 递归调用如下所示：</p><ul><li>[3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。<ul><li>[3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。<ul><li>空数组，无子节点。<ul><li>[2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。<ul><li>空数组，无子节点。</li><li>只有一个元素，所以子节点是一个值为 1 的节点。</li></ul></li></ul></li></ul></li><li>[0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。<ul><li>只有一个元素，所以子节点是一个值为 0 的节点。</li><li>空数组，无子节点。</li></ul></li></ul></li></ul></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/654_1.jpg" alt></p><blockquote><p><strong>输入:</strong> nums = [3,2,1]<br><strong>输出:</strong> [3,null,2,null,1]</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;题目已经给出提示了，用递归做。先遍历整个数组找到最大值则创建结点，然后该节点的左孩子就是下一层循环，左边界为上一层的左边界，右边界为上一层最大值对应的下标，而右孩子的左边界则时最大值下标<code>+1</code>，右边界为上一层的右边界。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">construct</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> left<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">construct</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">Traversal</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> left<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span>        maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">Traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> left<span class="token punctuation">,</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">Traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> maxIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-合并二叉树"><a href="#4-合并二叉树" class="headerlink" title="  4 合并二叉树 "></a><h2> <span id="Tag4"> 4 合并二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/merge-two-binary-trees/" title="617. 合并二叉树">617. 合并二叉树</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你两棵二叉树： <code>root1</code> 和 <code>root2</code> 。</p><p>想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，<strong>不为</strong> null 的节点将直接作为新二叉树的节点。</p><p>返回合并后的二叉树。</p><p><strong>注意</strong>: 合并过程必须从两个树的根节点开始。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/617.jpg" alt></p><blockquote><p><strong>输入:</strong> root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]<br><strong>输出:</strong> [3,4,5,5,4,null,7]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3], val = 5<br><strong>输出:</strong> [2,2]</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p><code>DFS</code>直接解决。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root2<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token punctuation">)</span>         <span class="token keyword">return</span> root2<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2<span class="token punctuation">)</span>         <span class="token keyword">return</span> root1<span class="token punctuation">;</span>        root1<span class="token operator">-></span>val <span class="token operator">+=</span> root2<span class="token operator">-></span>val<span class="token punctuation">;</span>        root1<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>left<span class="token punctuation">,</span> root2<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        root1<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>right<span class="token punctuation">,</span> root2<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token punctuation">)</span> <span class="token keyword">return</span> root2<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root2<span class="token punctuation">)</span> <span class="token keyword">return</span> root1<span class="token punctuation">;</span>    root1<span class="token operator">-></span>val <span class="token operator">+=</span> root2<span class="token operator">-></span>val<span class="token punctuation">;</span>    root1<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>left<span class="token punctuation">,</span> root2<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    root1<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>right<span class="token punctuation">,</span> root2<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>root1<span class="token punctuation">,</span> root2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-二叉搜索树中的搜索"><a href="#5-二叉搜索树中的搜索" class="headerlink" title="  5 二叉搜索树中的搜索 "></a><h2> <span id="Tag5"> 5 二叉搜索树中的搜索 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/" title="700. 二叉搜索树中的搜索">700. 二叉搜索树中的搜索</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定二叉搜索树（BST）的根节点 <code>root</code> 和一个整数值 <code>val</code>。</p><p>你需要在 <code>BST</code> 中找到节点值等于 <code>val</code> 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 <code>null</code> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/700_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3], val = 2<br><strong>输出:</strong> [2,1,3]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/700_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3], val = 5<br><strong>输出:</strong> []</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><ul><li>递归大法好。</li><li>按照BST的性质进行搜索。</li></ul><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//递归</span>        <span class="token comment">/*if(!root) return nullptr;        if(root->val == val) return root;        TreeNode *ans = searchBST(root->left, val);        if(!ans) ans = searchBST(root->right, val);        return ans;*/</span>        <span class="token comment">//迭代</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> root<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                root <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">searchBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-验证二叉搜索树"><a href="#6-验证二叉搜索树" class="headerlink" title="  6 验证二叉搜索树 "></a><h2> <span id="Tag6"> 6 验证二叉搜索树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/validate-binary-search-tree/" title="98. 验证二叉搜索树">98. 验证二叉搜索树</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个二叉树的根节点 <code>root</code> ，判断其是否是一个有效的二叉搜索树。</p><p><strong>有效</strong> 二叉搜索树定义如下：</p><ul><li>节点的左子树只包含 <strong>小于</strong> 当前节点的数。</li><li>节点的右子树只包含 <strong>大于</strong> 当前节点的数。</li><li>所有左子树和右子树自身必须也是二叉搜索树。</li></ul><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/98_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [2,1,3]<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/98_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [5,1,4,null,null,3,6]<br><strong>输出:</strong> false</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>中序遍历二叉树，维护一个最小值，最小值即为上一个遍历的结点的值，当当前结点的值小于等于最小值，说明不是二叉搜索树，返回<code>true</code>。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> <span class="token keyword">long</span> minVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token punctuation">)</span>INT_MIN <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;=</span> minVal<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                minVal <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isValidBST</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> minVal <span class="token operator">=</span> LONG_MIN<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;=</span> minVal<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>           minVal <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-二叉搜索树的最小绝对差"><a href="#7-二叉搜索树的最小绝对差" class="headerlink" title="  7 二叉搜索树的最小绝对差 "></a><h2> <span id="Tag7"> 7 二叉搜索树的最小绝对差 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/minimum-absolute-difference-in-bst/" title="530. 二叉搜索树的最小绝对差">530. 二叉搜索树的最小绝对差</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个二叉搜索树的根节点 <code>root</code> ，返回 <strong>树中任意两不同节点值之间的最小差值</strong> 。</p><p>差值是一个正数，其数值等于两值之差的绝对值。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/530_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [4,2,6,1,3]<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/530_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,0,48,null,null,12,49]<br><strong>输出:</strong> 1</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>二叉搜索树中任意两个节点的值差的绝对值最小必定是两个相邻的结点(或者是左子树中最右端结点与根节点之间)，直接通过中序遍历确定上一个结点的值，然后将当前遍历的节点值与上一个节点值做差并于答案作比较，然后用当前节点值更新上一个节点值，循环遍历整棵树即可。这里有一个小<code>tips</code>，由于都是整数，那么最小差大于等于<code>1</code>，所以当检测到答案为<code>1</code>时就直接返回即可。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> lastVal <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lastVal <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">-</span> lastVal<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                lastVal <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> prev_val <span class="token operator">=</span> INT_MAX<span class="token punctuation">,</span> ans <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stack_top<span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">abs</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">-</span> prev_val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            prev_val <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-二叉搜索树中的众数"><a href="#8-二叉搜索树中的众数" class="headerlink" title="  8 二叉搜索树中的众数 "></a><h2> <span id="Tag8"> 8 二叉搜索树中的众数 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/find-mode-in-binary-search-tree/" title="501. 二叉搜索树中的众数">501. 二叉搜索树中的众数</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个含重复值的二叉搜索树（BST）的根节点 <code>root</code> ，找出并返回 <code>BST</code> 中的所有 <strong>众数</strong>（即，出现频率最高的元素）。</p><p>如果树中有不止一个众数，可以按 <strong>任意顺序</strong> 返回。</p><p>假定 <code>BST</code> 满足如下定义：</p><ul><li>结点左子树中所含节点的值 <strong>小于等于</strong> 当前节点的值</li><li>结点右子树中所含节点的值 <strong>大于等于</strong> 当前节点的值</li><li>左子树和右子树都是二叉搜索树</li></ul><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/501.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,null,2,2]<br><strong>输出:</strong> [2]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [0]<br><strong>输出:</strong> [0]</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;进行中序遍历，用一个计数器计算当前遍历到的数字出现的次数，并用两个变量分别存放截止至当前出现次数最多的数字和其出现的次数，当检测到当前的数字出现的次数等于最大次数时，就把该数字加入到答案中，如果大于最大次数，则将答案清空并将该数字插入答案，如果遍历到的数字与前一个数字不同时，则将出现次数重置为1.</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ans<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> maxtimes<span class="token punctuation">,</span> preVal<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>val <span class="token operator">==</span> preVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            preVal <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">==</span> maxtimes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> maxtimes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            maxtimes <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">update</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findMode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        maxtimes <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        preVal <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>preval<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>Cnt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>maxCnt<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span>preval<span class="token punctuation">,</span> Cnt<span class="token punctuation">,</span> maxCnt<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>preval <span class="token operator">==</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>Cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>preval <span class="token operator">==</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>Cnt<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>Cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>preval <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>Cnt <span class="token operator">></span> <span class="token operator">*</span>maxCnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>maxCnt <span class="token operator">=</span> <span class="token operator">*</span>Cnt<span class="token punctuation">;</span>        <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>Cnt <span class="token operator">==</span> <span class="token operator">*</span>maxCnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> preval<span class="token punctuation">,</span> Cnt<span class="token punctuation">,</span> maxCnt<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">findMode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> preval <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">int</span> maxCnt  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>preval<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cnt<span class="token punctuation">,</span> <span class="token operator">&amp;</span>maxCnt<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-二叉树的最近公共祖先"><a href="#9-二叉树的最近公共祖先" class="headerlink" title="  9 二叉树的最近公共祖先 "></a><h2> <span id="Tag9"> 9 二叉树的最近公共祖先 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" title="236. 二叉树的最近公共祖先">236. 二叉树的最近公共祖先</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/236_1.png" alt></p><blockquote><p><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1<br><strong>输出:</strong> 3</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/236_2.png" alt></p><blockquote><p><strong>输入:</strong> root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br><strong>输出:</strong> 5</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = [1,2], p = 1, q = 2<br><strong>输出:</strong> 1</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;DFS搜索两个结点在树中的位置，如果一个在左一个在右则直接返回根节点，若在同一个子树中，则在那个子树中进行进一步的搜索。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isExist</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> node<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">==</span> node<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root <span class="token operator">==</span> p<span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q <span class="token operator">||</span> root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token keyword">return</span> left<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-二叉搜索树的最近公共祖先"><a href="#10-二叉搜索树的最近公共祖先" class="headerlink" title="  10 二叉搜索树的最近公共祖先 "></a><h2> <span id="Tag1"> 10 二叉搜索树的最近公共祖先 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/" title="235. 二叉搜索树的最近公共祖先">235. 二叉搜索树的最近公共祖先</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。</p><p>百度百科中最近公共祖先的定义为：“对于有根树 <code>T</code> 的两个结点 <code>p</code>、<code>q</code>，最近公共祖先表示为一个结点 x，满足 <code>x</code> 是 <code>p</code>、<code>q</code> 的祖先且 <code>x</code> 的深度尽可能大（<strong>一个节点也可以是它自己的祖先</strong>）。”</p><p>例如，给定如下二叉搜索树:  root = [6,2,8,0,4,7,9,null,null,3,5]</p><p><strong>示例1:</strong></p><p><img src="/2022/04/19/ch7-of-programmercarl-2/235.png" alt></p><blockquote><p><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8<br><strong>输出:</strong> 6</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4<br><strong>输出:</strong> 2</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><ul><li><code>DFS</code> 大法好，如果两个结点的值在<code>root</code>的同一侧则进入下一层递归，传入的结点为两个结点所在的那棵子树。</li><li>迭代思路类似，在同一侧则<code>root</code>往那一侧走，不同侧就直接返回<code>root</code>.</li></ul><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> q<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>val <span class="token operator">&lt;</span> p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">></span> q<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>val <span class="token operator">></span> p<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">&lt;</span> cur<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> q<span class="token operator">-></span>val <span class="token operator">&lt;</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//在左侧</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">></span> cur<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> q<span class="token operator">-></span>val <span class="token operator">></span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//在右侧</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch11-of-programmercarl</title>
      <link href="/2022/04/18/ch11-of-programmercarl/"/>
      <url>/2022/04/18/ch11-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">739. 每日温度</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">496. 下一个更大元素 I</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">503. 下一个更大元素 II</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">42. 接雨水</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">84. 柱状图中最大的矩形</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-每日温度"><a href="#1-每日温度" class="headerlink" title="  1 每日温度 "></a><h2> <span id="Tag1"> 1 每日温度 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/daily-temperatures/" title="739. 每日温度">739. 每日温度</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定一个整数数组 <code>temperatures</code> ，表示每天的温度，返回一个数组 <code>answer</code> ，其中 <code>answer[i]</code> 是指在第 <code>i</code> 天之后，才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> temperatures = [73,74,75,71,69,72,76,73]<br><strong>输出:</strong> [1,1,4,2,1,1,0,0]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> temperatures = [30,40,50,60]<br><strong>输出:</strong> [1,1,1,0]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> temperatures = [30,60,90]<br><strong>输出:</strong> [1,1,0]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> temperatures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> temperatures<span class="token punctuation">,</span> <span class="token keyword">int</span> temperaturesSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> temperaturesSize<span class="token punctuation">,</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            stk_top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-下一个更大元素-I"><a href="#2-下一个更大元素-I" class="headerlink" title="  2 下一个更大元素 I "></a><h2> <span id="Tag2"> 2 下一个更大元素 I </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/next-greater-element-i/" title="496. 下一个更大元素 I">496. 下一个更大元素 I</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p><code>nums1</code> 中数字 <code>x</code> 的 <strong>下一个更大元素</strong> 是指 <code>x</code> 在 <code>nums2</code> 中对应位置 <strong>右侧</strong> 的 <strong>第一个</strong> 比 <code>x</code> 大的元素。</p><p>给你两个 <strong>没有重复元素</strong> 的数组 <code>nums1</code> 和 <code>nums2</code> ，下标从 <code>0</code> 开始计数，其中<code>nums1</code> 是 <code>nums2</code> 的子集。</p><p>对于每个 <code>0 &lt;= i &lt; nums1.length</code> ，找出满足 <code>nums1[i] == nums2[j]</code> 的下标 <code>j</code> ，并且在 <code>nums2</code> 确定 <code>nums2[j]</code> 的 <strong>下一个更大元素</strong> 。如果不存在下一个更大元素，那么本次查询的答案是 <code>-1</code> 。</p><p>返回一个长度为 <code>nums1.length</code> 的数组 <code>ans</code> 作为答案，满足 <code>ans[i]</code> 是如上所述的 <strong>下一个更大元素</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [4,1,2], nums2 = [1,3,4,2].<br><strong>输出:</strong> [-1,3,-1]<br><strong>解释:</strong> nums1 中每个值的下一个更大元素如下所述：</p><ul><li>4 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</li><li>1 ，用加粗斜体标识，nums2 = [1,3,4,2]。下一个更大元素是 3 。</li><li>2 ，用加粗斜体标识，nums2 = [1,3,4,2]。不存在下一个更大元素，所以答案是 -1 。</li></ul></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [2,4], nums2 = [1,2,3,4].<br><strong>输出:</strong> [3,-1]<br><strong>解释:</strong> nums1 中每个值的下一个更大元素如下所述：</p><ul><li>2 ，用加粗斜体标识，nums2 = [1,2,3,4]。下一个更大元素是 3 。</li><li>4 ，用加粗斜体标识，nums2 = [1,2,3,4]。不存在下一个更大元素，所以答案是 -1 。</li></ul></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;先将<code>nums1</code>存到<code>map</code>中，创建一个单调栈以获取下一个更大元素(单调递减)，然后遍历<code>nums2</code>, 当当前元素大于栈顶元素时，说明栈顶元素找到了其下一个更大元素，则查看栈顶元素是否存在于<code>map</code>中(即查看<code>nums1</code>中是否存在该元素)，若存在则将其更大元素插入到答案数组的对应位置上。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> um<span class="token punctuation">;</span>        <span class="token keyword">int</span> n1<span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n2 <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            um<span class="token punctuation">[</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n2<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>um<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">[</span>um<span class="token punctuation">[</span>nums2<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>HashMap<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>nums1Size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>nums1Size<span class="token punctuation">)</span><span class="token punctuation">;</span>    HashMap <span class="token operator">*</span>set <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums1Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        HashMap <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>key <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>index <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2Size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            HashMap <span class="token operator">*</span>tmp<span class="token punctuation">;</span>            <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums2<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans<span class="token punctuation">[</span>tmp<span class="token operator">-></span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk_top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> nums1Size<span class="token punctuation">;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-下一个更大元素-II"><a href="#3-下一个更大元素-II" class="headerlink" title="  3 下一个更大元素 II "></a><h2> <span id="Tag3"> 3 下一个更大元素 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/next-greater-element-ii/" title="503. 下一个更大元素 II">503. 下一个更大元素 II</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个循环数组 <code>nums</code> （ <code>nums[nums.length - 1]</code> 的下一个元素是 <code>nums[0]</code> ），返回 <code>nums</code> 中每个元素的 <strong>下一个更大元素</strong> 。</p><p>数字 <code>x</code> 的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 <code>-1</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,1]<br><strong>输出:</strong> [2,-1,2]<br><strong>解释:</strong> 第一个 1 的下一个更大的数是 2；<br>数字 2 找不到下一个更大的数；<br>第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3,4,3]<br><strong>输出:</strong> [2,3,4,-1,4]</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>其实就是上一题，没啥大区别。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">,</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>             <span class="token comment">//要遍历两次，栈的容量要两倍，以防止溢出</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ans <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token operator">*</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>numsSize<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>            stk_top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">%</span>numsSize<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-接雨水"><a href="#4-接雨水" class="headerlink" title="  4 接雨水 "></a><h2> <span id="Tag4"> 4 接雨水 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/trapping-rain-water/" title="42. 接雨水">42. 接雨水</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定 <code>n</code> 个非负整数表示每个宽度为 <code>1</code> 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch11-of-programmercarl/42.png" alt></p><blockquote><p><strong>输入:</strong> height = [0,1,0,2,1,0,1,3,2,1,2,1]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> height = [4,2,0,3,2,5]<br><strong>输出:</strong> 9</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p><img src="/2022/04/18/ch11-of-programmercarl/42_.png" alt></p><p>&emsp;&emsp;遍历整个数组，维护一个单调递减栈，当当前遍历到的元素不满足单调递减时，说明有位置可以装水，因而将当前位置的高记为<code>rHeight</code>（桶的右高度）、下标为<code>r</code>，然后栈顶元素记为<code>mHeight</code>（其实就是桶底）,然后将出栈后的栈顶元素记为<code>lHeight</code>、下标为<code>l</code>（桶的左高度），则当前的桶的容量即为：<code>(min(rHeight, lHegiht)-mHeight)*(r-l-1)</code>.</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> lHeight <span class="token operator">=</span> height<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ans <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>lHeight<span class="token punctuation">,</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> mHeight<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">emplace</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> heightSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>heightSize <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span>heightSize<span class="token punctuation">]</span><span class="token punctuation">,</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heightSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> mid <span class="token operator">=</span> stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                stk_top<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> left <span class="token operator">=</span> stack<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    ans <span class="token operator">+=</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">fmin</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> height<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-柱状图中最大的矩形"><a href="#5-柱状图中最大的矩形" class="headerlink" title="  5 柱状图中最大的矩形 "></a><h2> <span id="Tag5"> 5 柱状图中最大的矩形 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/largest-rectangle-in-histogram/" title="84. 柱状图中最大的矩形">84. 柱状图中最大的矩形</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定 <code>n</code> 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 <code>1</code> 。</p><p>求在该柱状图中，能够勾勒出来的矩形的最大面积。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch11-of-programmercarl/84_1.jpg" alt></p><blockquote><p><strong>输入:</strong> heights = [2,1,5,6,2,3]<br><strong>输出:</strong> 10<br><strong>解释:</strong> 最大的矩形为图中红色区域，面积为 10</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch11-of-programmercarl/84_2.jpg" alt></p><blockquote><p><strong>输入:</strong> heights = [2,4]<br><strong>输出:</strong> 4</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>思路类似上一题。遍历数组，维护一个单调递增栈。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heights<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>heights<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        heights<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">// 第一个元素已经入栈，从下标1开始</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 注意是while</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> heights<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> w <span class="token operator">=</span> i <span class="token operator">-</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> w<span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> heights<span class="token punctuation">,</span> <span class="token keyword">int</span> heightsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span>heightsSize<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> heightsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>stack_top <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>heightsSize <span class="token operator">||</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>stack_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> heights<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> stack<span class="token punctuation">[</span>stack_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch10-of-programmercarl-1</title>
      <link href="/2022/04/18/ch10-of-programmercarl-1/"/>
      <url>/2022/04/18/ch10-of-programmercarl-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">509. 斐波那契数</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">70. 爬楼梯</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">746. 使用最小花费爬楼梯</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">62.不同路径</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">63. 不同路径 II</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">343. 整数拆分</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">96. 不同的二叉搜索树</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">416. 分割等和子集</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">1049. 最后一块石头的重量 II</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">494. 目标和</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-斐波那契数"><a href="#1-斐波那契数" class="headerlink" title="  1 斐波那契数 "></a><h2> <span id="Tag1"> 1 斐波那契数 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/fibonacci-number/" title="509. 斐波那契数">509. 斐波那契数</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>斐波那契数 （通常用 <code>F(n)</code> 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 <code>0</code> 和 <code>1</code> 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><blockquote><p>F(0) = 0，F(1) = 1<br>F(n) = F(n - 1) + F(n - 2)，其中 n &gt; 1</p></blockquote><p>给定 <code>n</code> ，请计算 <code>F(n)</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 2<br><strong>输出:</strong> 1<br><strong>解释:</strong> F(2) = F(1) + F(0) = 1 + 0 = 1 </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 2<br><strong>解释:</strong> F(3) = F(2) + F(1) = 1 + 1 = 2 </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> n = 4<br><strong>输出:</strong> 3<br><strong>解释:</strong> F(4) = F(3) + F(2) = 2 + 1 = 3 </p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-爬楼梯"><a href="#2-爬楼梯" class="headerlink" title="  2 爬楼梯 "></a><h2> <span id="Tag2"> 2 爬楼梯 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/climbing-stairs/" title="70. 爬楼梯">70. 爬楼梯</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>假设你正在爬楼梯。需要 <code>n</code> 阶你才能到达楼顶。</p><p>每次你可以爬 <code>1</code> 或 <code>2</code> 个台阶。你有多少种不同的方法可以爬到楼顶呢？</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 2<br><strong>输出:</strong> 2<br><strong>解释:</strong> 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶</li><li>2 阶</li></ol></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 3<br><strong>解释:</strong> 有两种方法可以爬到楼顶。</p><ol><li>1 阶 + 1 阶 + 1 阶</li><li>1 阶 + 2 阶</li><li>2 阶 + 1 阶 </li></ol></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;到达第<code>i</code>阶有两种办法：由第<code>i-1</code>阶跳一阶，由第<code>i-2</code>阶跳两阶，因此，有<code>F(N) = F(N-1)+F(N-2)</code>， 其实就是斐波那契数，只是起始条件不一样，这题的<code>F(0) = 1, F(1) = 1</code>,即跳到第<code>0</code>阶一共有一种办法，即原地不动。</p><p><span id="codeof_tag2">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            c <span class="token operator">=</span> b <span class="token operator">+</span> a<span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-使用最小花费爬楼梯"><a href="#3-使用最小花费爬楼梯" class="headerlink" title="  3 使用最小花费爬楼梯 "></a><h2> <span id="Tag3"> 3 使用最小花费爬楼梯 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/min-cost-climbing-stairs/" title="746. 使用最小花费爬楼梯">746. 使用最小花费爬楼梯</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code>个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> cost = [10,15,20]<br><strong>输出:</strong> 15<br><strong>解释:</strong> 你将从下标为 1 的台阶开始。</p><ul><li>支付 15 ，向上爬两个台阶，到达楼梯顶部。<br>总花费为 15 。</li></ul></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> cost = [1,100,1,1,1,100,1,1,100,1]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 你将从下标为 0 的台阶开始。</p><ul><li>支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。</li><li>支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。</li><li>支付 1 ，向上爬一个台阶，到达楼梯顶部。<br>总花费为 6 。</li></ul></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;创建一个DP数组，然后初始化为<code>0</code>。当我们跳到某个台阶时，需要支付那个台阶的费用<code>cost[i]</code>后可以往上跳<code>1</code>或<code>2</code>个台阶，我们在跳的时候再把费用加进来，因而有下面的状态转移方程：</p><script type="math/tex; mode=display">dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2])</script><p>那起始点为下标<code>0</code>和<code>1</code>任选，那么起点如何处理呢？这里其实就是题目帮你统一了过程，可以直接把起点看作<code>-1</code>，然后往上跳<code>1</code>阶到达下标为<code>0</code>的台阶，或者往上跳<code>2</code>阶到达下标为<code>1</code>的台阶，注意，这一跳是不需要花费的，因而初始化<code>DP</code>为<code>0</code>，然后最后返回<code>dp[n]</code>即可.</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minCostClimbingStairs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//int dp[n+1];</span>        <span class="token comment">//dp[0] = 0, dp[1] = 0;</span>        <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> dp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> new_dp1 <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp1<span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp0<span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp0 <span class="token operator">=</span> dp1<span class="token punctuation">,</span> dp1 <span class="token operator">=</span> new_dp1<span class="token punctuation">;</span>            <span class="token comment">//dp[i] = min(dp[i-1]+cost[i-1], dp[i-2]+cost[i-2]);</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">minCostClimbingStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> costSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//下面两种都是动态规划</span>        <span class="token comment">//时间复杂度O(n), 空间复杂度O(n)</span>    <span class="token comment">/*int dp[costSize + 1];    dp[0] = 0;    dp[1] = 0;    for(int i = 2; i &lt;= costSize; i++)&#123;        dp[i] = fmin(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2]);    &#125;    return dp[costSize];*/</span>    <span class="token comment">//时间复杂度O(n), 空间复杂度O(1)</span>    <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> costSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> next <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>prev <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cur <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cur<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-不同路径"><a href="#4-不同路径" class="headerlink" title="  4 不同路径 "></a><h2> <span id="Tag4"> 4 不同路径 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/unique-paths/" title="62. 不同路径">62. 不同路径</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch10-of-programmercarl-1/62.png" alt></p><blockquote><p><strong>输入:</strong> m = 3, n = 7<br><strong>输出:</strong> 28</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> m = 3, n = 2<br><strong>输出:</strong> 3</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> m = 7, n = 3<br><strong>输出:</strong> 28</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> m = 3, n = 3<br><strong>输出:</strong> 6</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;机器人的移动方向有两个：向下or向右。因此，机器人到达某个格子<code>(x,y)</code>有两种办法：从<code>(x-1,y)</code>向下；从<code>(x,y-1)</code>向右。建立一个<code>dp</code>数组用来存储机器人到达格子<code>(x,y)</code>的路径数, 易得到状态转移方程为：</p><script type="math/tex; mode=display">dp[x][y] = dp[x-1][y] + dp[x][y-1]</script><p>&emsp;&emsp;<code>dp</code>数组的初始化：第<code>0</code>列和第<code>0</code>行都只有一种路径，即一直向下和一直向右。</p><p><span id="codeof_tag4">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-不同路径-II"><a href="#5-不同路径-II" class="headerlink" title="  5 不同路径 II "></a><h2> <span id="Tag5"> 5 不同路径 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/unique-paths-ii/" title="63. 不同路径 II">63. 不同路径 II</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch10-of-programmercarl-1/63_1.jpg" alt></p><blockquote><p><strong>输入:</strong> obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]<br><strong>输出:</strong> 2</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch10-of-programmercarl-1/63_2.jpg" alt></p><blockquote><p><strong>输入:</strong> obstacleGrid = [[0,1],[0,0]]<br><strong>输出:</strong> 1</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;思路和上一题一样，只是这一题要额外对当前遍历的格子的状态进行判断，当当前格子<code>(x,y)</code>为<code>1</code>时说明该格子无法到达，因此，<code>dp[x][y]=0</code>；否则跟上一题一样对状态进行更新：</p><script type="math/tex; mode=display">dp[x][y] = dp[x-1][y] + dp[x][y-1]</script><p>&emsp;&emsp;<code>dp</code>数组的初始化：一样也要注意判断格子的状态，当发现第<code>0</code>列上某个格子为<code>1</code>时，则再往下就无法继续到达，该格子及往后格子均置为0，和第<code>0</code>行也类似。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> obstacleGrid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> obstacleGrid<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">+</span> dp<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> obstacleGrid<span class="token punctuation">,</span> <span class="token keyword">int</span> obstacleGridSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> obstacleGridColSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>obstacleGridSize<span class="token punctuation">]</span><span class="token punctuation">[</span>obstacleGridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rowSize <span class="token operator">=</span> obstacleGridSize<span class="token punctuation">,</span> colSize <span class="token operator">=</span> obstacleGridColSize<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> colSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> i<span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> colSize<span class="token punctuation">;</span> ii<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>ii<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii <span class="token operator">=</span> i<span class="token punctuation">;</span> ii <span class="token operator">&lt;</span> rowSize<span class="token punctuation">;</span> ii<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>ii<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> rowSize<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> colSize<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>rowSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>colSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-整数拆分"><a href="#6-整数拆分" class="headerlink" title="  6 整数拆分 "></a><h2> <span id="Tag6"> 6 整数拆分 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/integer-break/" title="343. 整数拆分">343. 整数拆分</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给定一个正整数 <code>n</code>，将其拆分为 <code>k</code> 个 <strong>正整数</strong> 的和（ <code>k &gt;= 2</code> ），并使这些整数的乘积最大化。</p><p>返回 <em>你可以获得的最大乘积</em> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 2<br><strong>输出:</strong> 1<br><strong>解释:</strong> 2 = 1 + 1, 1 × 1 = 1。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 10<br><strong>输出:</strong> 36<br><strong>解释:</strong> 10 = 3 + 3 + 4, 3 × 3 × 4 = 36。</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><ul><li>将 <code>i</code> 拆分成 <code>j</code> 和 <code>i−j</code> 的和，且 <code>i−j</code> 不再拆分成多个正整数，此时的乘积是 <code>j×(i−j)</code>;</li><li>将 <code>i</code> 拆分成 <code>j</code> 和 <code>i−j</code> 的和，且 <code>i-j</code> 继续拆分成多个正整数，此时的乘积是 <code>j×dp[i−j]</code>。</li></ul><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*if(n &lt;= 3) return n-1;        int ans = 0;        if(n % 3 == 1)&#123;            ans = pow(3, n/3-1) * 4;        &#125;else if(n % 3 == 2)&#123;            ans = pow(3, n/3) * 2;        &#125;else&#123;            ans = pow(3, n/3);        &#125;        return ans;*/</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token operator">*</span>j<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getMax</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token function">fmax</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//n==2</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//n==3</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getMax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-不同的二叉搜索树"><a href="#7-不同的二叉搜索树" class="headerlink" title="  7 不同的二叉搜索树 "></a><h2> <span id="Tag7"> 7 不同的二叉搜索树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" title="96. 不同的二叉搜索树">96. 不同的二叉搜索树</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个整数 <code>n</code> ，求恰由 <code>n</code> 个节点组成且节点值从 <code>1</code> 到 <code>n</code> 互不相同的 <strong>二叉搜索树</strong> 有多少种？返回满足题意的二叉搜索树的种数。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch10-of-programmercarl-1/96.jpg" alt></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 5</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 1<br><strong>输出:</strong> 1</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;动态规划，画几个图可以发现：</p><ul><li>一个结点的为<code>1</code></li><li>两个结点可以看作先选1为根剩下的就是<code>dp[1]</code>，然后选<code>2</code>为根剩下的也为<code>dp[1]</code>;</li><li>三个结点，先选<code>1</code>，剩下的其实就是<code>dp[2]</code>，然后选<code>2</code>，剩下的就是dp[1]*dp[1]，再选<code>3</code>，左边的就是<code>dp[2]</code></li><li>四个结点，先选<code>1</code>，有<code>dp[3]</code>个，然后选<code>2</code>，有<code>dp[1]*dp[2]</code>, 然后选<code>3</code>，有<code>dp[2]*dp[1]</code>个，最后选<code>4</code>,有<code>dp[3]</code>个</li><li>…</li></ul><p>总结上边的规律，可以得到：n个结点的二叉搜索树，可以按照根结点的位置，将左右分为两个子树，然后计算两个子树总共的种类和最终就是其本身的种类数。如结点数为5时，根节点选择1，则左子树为结点数为0的子树，右子树为结点数为4的子树；根节点选择2，则左子树为结点数为1的子树，右子树为结点数为3的子树…则有</p><script type="math/tex; mode=display">dp[5] = dp[0]*dp[4]+dp[1]*dp[3]+dp[2]*dp[2]+dp[3][1]+dp[4]*dp[0]</script><p>因此，有：</p><script type="math/tex; mode=display">\begin{equation*}\begin{split}dp[i] &= \sum \limits_{j=0}\limits^{j=i-1}dp[j]*dp[i-j-1]\\&= \sum \limits_{j=1}\limits^{j=i}dp[j-1]*dp[i-j]\end{split}\end{equation*}</script><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>优化</li></ul><p>容易发现，上边的计算过程其实是有重复计算的过程，即根节点在小于等于<code>n/2</code>的一边时的种类数是等于根节点在大于等于<code>(n+1)/2+1</code>的种类数，但需要注意，当结点数为奇数时需要特殊处理。因此，我们可以对上边的代码进行优化，优化后的代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-分割等和子集"><a href="#8-分割等和子集" class="headerlink" title="  8 分割等和子集 "></a><h2> <span id="Tag8"> 8 分割等和子集 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/partition-equal-subset-sum/" title="416. 分割等和子集">416. 分割等和子集</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,5,11,5]<br><strong>输出:</strong> true<br><strong>解释:</strong> 数组可以分割成 [1, 5, 5] 和 [11] 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3,5]<br><strong>输出:</strong> false</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;<code>01</code>背包问题，物品重量为<code>nums[i]</code>，对应的价值也为<code>nums[i]</code>，而背包容量则是整个数组的加和的一半。这里求背包的容量应该先判断数组加和是否为奇数，若是则直接返回<code>false</code>.</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">canPartition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">2</span>  <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-最后一块石头的重量-II"><a href="#9-最后一块石头的重量-II" class="headerlink" title="  9 最后一块石头的重量 II "></a><h2> <span id="Tag9"> 9 最后一块石头的重量 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/last-stone-weight-ii/" title="1049. 最后一块石头的重量 II">1049. 最后一块石头的重量 II</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>有一堆石头，用整数数组 <code>stones</code> 表示。其中 <code>stones[i]</code> 表示第 <code>i</code> 块石头的重量。</p><p>每一回合，从中选出<strong>任意两块石头</strong>，然后将它们一起粉碎。假设石头的重量分别为 x 和 y，且 x &lt;= y。那么粉碎的可能结果如下：</p><ul><li>如果 <code>x == y</code>，那么两块石头都会被完全粉碎；</li><li>如果 <code>x != y</code>，那么重量为 <code>x</code> 的石头将会完全粉碎，而重量为 <code>y</code> 的石头新重量为 <code>y-x</code>。<br>最后，<strong>最多只会剩下一块</strong> 石头。返回此石头 <strong>最小的可能重量</strong> 。如果没有石头剩下，就返回 <code>0</code>。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> stones = [2,7,4,1,8,1]<br><strong>输出:</strong> 1<br><strong>解释:</strong><br>组合 2 和 4，得到 2，所以数组转化为 [2,7,1,8,1]，<br>组合 7 和 8，得到 1，所以数组转化为 [2,1,1,1]，<br>组合 2 和 1，得到 1，所以数组转化为 [1,1,1]，<br>组合 1 和 1，得到 0，所以数组转化为 [1]，这就是最优值。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> stones = [31,26,33,21,40]<br><strong>输出:</strong> 5</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;其实就是<code>01</code>背包，将石头分成加和尽可能接近的两堆，因此先遍历数组求整个数组的加和，然后背包容量为加和的一半，求解背包所能装的物品最大价值，这里物品的价值和重量均为<code>stones[i]</code>。最后整个数组的加和减去两倍背包最大价值即为答案。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">lastStoneWeightII</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> stones<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stones<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum <span class="token operator">-</span> <span class="token number">2</span><span class="token operator">*</span>dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">lastStoneWeightII</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> stones<span class="token punctuation">,</span> <span class="token keyword">int</span> stonesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//分成尽可能相等的两堆</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stonesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stonesSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">>=</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum <span class="token operator">-</span> dp<span class="token punctuation">[</span>sum<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-目标和"><a href="#10-目标和" class="headerlink" title="  10 目标和 "></a><h2> <span id="Tag10"> 10 目标和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/target-sum/" title="494. 目标和">494. 目标和</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>target</code> 。</p><p>向数组中的每个整数前添加 <code>&#39;+&#39;</code> 或 <code>&#39;-&#39;</code> ，然后串联起所有整数，可以构造一个 <strong>表达式</strong> ：</p><p>例如，<code>nums = [2, 1]</code> ，可以在 <code>2</code> 之前添加 <code>&#39;+&#39;</code> ，在 <code>1</code> 之前添加 <code>&#39;-&#39;</code> ，然后串联起来得到表达式 <code>&quot;+2-1&quot;</code> 。<br>返回可以通过上述方法构造的、运算结果等于 <code>target</code> 的不同 <strong>表达式</strong> 的数目。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,1,1,1,1], target = 3<br><strong>输出:</strong> 5<br><strong>解释:</strong> 一共有 5 种方法让最终目标和为 3 。<br>-1 + 1 + 1 + 1 + 1 = 3<br>+1 - 1 + 1 + 1 + 1 = 3<br>+1 + 1 - 1 + 1 + 1 = 3<br>+1 + 1 + 1 - 1 + 1 = 3<br>+1 + 1 + 1 + 1 - 1 = 3</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1], target = 1<br><strong>输出:</strong> 1</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>&emsp;&emsp;为获得目标和，由于我们可以添加的符号是<code>+</code>和<code>-</code>，因而可以将获得目标和转换为两个背包的加和，其中一个背包用来添加负号，另一个背包用来添加正好。更进一步的，我们需要考虑其中一个背包即可，只要其中一个背包满足相应的条件，则另一个背包也将必定满足。</p><ul><li>先遍历整个数组，求数组加和<code>sum</code>，如果<code>target</code>大于<code>sum</code>或小于<code>-sum</code>，则说明即使数组中全部用相加或相减都无法达到<code>target</code>，因而返回<code>0</code>.</li><li>要满足两个背包的加和等于<code>target</code>，我们只需要让其中一个背包的加和为<code>(sum - target)/2</code>,则另一个背包的加和则为<code>(sum + target)/2</code>, 此时两个背包相加即为<code>target</code>，满足题目需求。</li><li>创建一个<code>DP</code>数组<code>dp[n+1][(sum - target)/2+1]</code>,其含义为<strong>前<code>i</code>个数中加和为<code>j</code>的种数</strong>。那么，<code>DP</code>数组如何初始化呢？当背包容量为<code>0</code>时，其最大价值为<code>0</code>的种数为<code>1</code>，即不放入任何数字，因而<code>dp[i][0] = 1</code>. </li><li>那么<code>DP</code>数组的状态转移方程如何获得呢？考虑<code>dp[i][j]</code>的含义为<strong>前<code>i</code>个数中加和为<code>j</code>的种数</strong>，它可以由前<code>i-1</code>个数中加和为<code>j</code>转移而来，也可以由前<code>i-1</code>个数中加和为<code>j-nums[i]</code>转移而来，因此，可以得到状态转移方程：</li></ul><script type="math/tex; mode=display">\begin{equation*}\begin{split}dp[i][j] = dp[i-1][j] + dp[i-1][j-nums[i]] \quad if \quad j \ge nums[i]\\dp[i][j] = dp[i-1][j] \quad if \quad j < nums[i]\\\end{split}\end{equation*}</script><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token operator">-</span>sum <span class="token operator">||</span> target <span class="token operator">></span> sum <span class="token operator">||</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现(优化后)</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span>tmp<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>dp<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> tmp<span class="token punctuation">;</span> j<span class="token operator">>=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p><code>01</code>背包问题求解：</p><ul><li><p>多维数组：物品和背包容量的两个循环先后顺序无影响，当背包容量大于当前遍历的物品的体积时，当前的背包所能装的最大价值就是不选该物品时的价值<code>dp[i-1][j]</code>和选择该物品(容量为当前背包容量)的价值<code>dp[i-1][j-Weight[i]]+Val[i]</code>中的大者；当背包容量小于该物品的体积时，则背包的最大价值就是遍历到上一个物品的等容量背包的价值<code>dp[i-1][j]</code>。具体的模板如下：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WeightSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagMin<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>Val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>滚动数组：通过对上边的模板进行观察可以发现，上一层的数据在当前层的更新时起作用，而再前边的层的数据已经没用了，所以可以在这个地方进行修改，直接将第一维去掉，代码如下：</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WeightSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagMin<span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">>=</span> Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>Val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>但如果直接这样修改，那么背包容量时，会重复将物品<code>i</code>加入背包中，对于<code>01</code>背包，每个物品只有一个，所以需要将背包容量的遍历过程反过来；另外，修改背包的价值更新，观察上边的代码，背包的价值仅在<code>j &gt;= Weight[i]</code>时才会发生改变，因而可以当<code>j &lt; Weight[i]</code>时直接不进行循环。修改后的代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> WeightSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagSize<span class="token punctuation">;</span> j <span class="token operator">>=</span> Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token operator">-</span>Weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span>Val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>当<code>01背包</code>用来求解最大价值时，<code>dp</code>数组的含义是背包内的最大价值，状态转移方程为：<script type="math/tex; mode=display">\begin{equation*}\begin{split}dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight[i]]+val[i]) \quad if \quad j \ge weight[i]\\dp[i][j] = dp[i-1][j] \quad if \quad j < weight[i]\\\end{split}\end{equation*}</script></li><li>而当用来求解最大种类数时，<code>dp</code>数组的含义为背包中的物品价值为当前背包容量的种类数，其状态转移方程为：<script type="math/tex; mode=display">\begin{equation*}\begin{split}dp[i][j] = dp[i-1][j] + dp[i-1][j-weight[i]] \quad if \quad j \ge weight[i]\\dp[i][j] = dp[i-1][j] \quad if \quad j < weight[i]\\\end{split}\end{equation*}</script></li></ul></blockquote></li></ul></li></ul></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 背包问题 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch9-of-programmercarl-1</title>
      <link href="/2022/04/18/ch9-of-programmercarl-1/"/>
      <url>/2022/04/18/ch9-of-programmercarl-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">455. 分发饼干</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">376. 摆动序列</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">53. 最大子数组和</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">122. 买卖股票的最佳时机 II</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">55. 跳跃游戏</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">45. 跳跃游戏 II</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">1005. K 次取反后最大化的数组和</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">134. 加油站</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">135. 分发糖果</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">860. 柠檬水找零</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-分发饼干"><a href="#1-分发饼干" class="headerlink" title="  1 分发饼干 "></a><h2> <span id="Tag1"> 1 分发饼干 </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/assign-cookies/">455. 分发饼干</a> “455. 分发饼干”)</li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> g = [1,2,3], s = [1,1]<br><strong>输出:</strong> 1<br><strong>解释:</strong><br>你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。<br>虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。<br>所以你应该输出1。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> g = [1,2], s = [1,2,3]<br><strong>输出:</strong> 2<br><strong>解释:</strong><br>你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。<br>你拥有的饼干数量和尺寸都足以让所有孩子满足。<br>所以你应该输出2.</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>对两个数组先进行排序，然后优先满足胃口小的孩子(即两个数组均从头开始遍历，<code>s[i] &gt;= g[j]</code>时则<code>++i</code>),或者优先满足胃口大的孩子(即两个数组从最后一位开始遍历，<code>s[i] &gt;= g[j]</code>时则<code>--i</code>)。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> g<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>g<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> g<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> g<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>i<span class="token punctuation">;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> g<span class="token punctuation">,</span> <span class="token keyword">int</span> gSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> sSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> gSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> sSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> g<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> gSize<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-摆动序列"><a href="#2-摆动序列" class="headerlink" title="  2 摆动序列 "></a><h2> <span id="Tag2"> 2 摆动序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/wiggle-subsequence/" title="376. 摆动序列">376. 摆动序列</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 摆动序列 。第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><p>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</p><p>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。<br>子序列 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,7,4,9,2,5]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,17,5,10,13,15,10,5,16,8]<br><strong>输出:</strong> 7<br><strong>解释:</strong> 这个序列包含几个长度为 7 摆动序列。<br>其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3,4,5,6,7,8,9]<br><strong>输出:</strong> 2<br><strong>解释:</strong> </p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>局部最优：<strong>删除单调坡度上的节点</strong>（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值。</p><p>整体最优：整个序列有<strong>最多的局部峰值</strong>，从而达到最长摆动序列</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pre <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token operator">||</span> cur <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pre <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numsSize <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> curDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前一对差值</span>    <span class="token keyword">int</span> preDiff <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 前一对差值</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 记录峰值个数，序列默认序列最右边有一个峰值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// 出现峰值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>curDiff <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> preDiff <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>preDiff <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curDiff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result<span class="token operator">++</span><span class="token punctuation">;</span>            preDiff <span class="token operator">=</span> curDiff<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-最大子数组和"><a href="#3-最大子数组和" class="headerlink" title="  3 最大子数组和"></a><h2> <span id="Tag3"> 3 最大子数组和</span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-subarray/" title="53. 最大子数组和">53. 最大子数组和</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。</p><p><strong>子数组</strong> 是数组中的一个连续部分。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [-2,1,-3,4,-1,2,1,-5,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 连续子数组 [4,-1,2,1] 的和最大，为 6 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1]<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [5,4,-1,7,8]<br><strong>输出:</strong> 23</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;遍历整个数组，用<code>sum</code>变量来存储序列的加和，当<code>sum &lt; 0</code>时说明从下一位再开始取比在原有已取的序列基础上继续取所能获得的序列和更大，因而将<code>sum</code>置为<code>0</code>，即以当前位为序列起始重新取连续子序列求和。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxSubArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MIN<span class="token punctuation">,</span>tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        tmp <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-买卖股票的最佳时机-II"><a href="#4-买卖股票的最佳时机-II" class="headerlink" title="  4 买卖股票的最佳时机 II "></a><h2> <span id="Tag4"> 4 买卖股票的最佳时机 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/" title="122. 买卖股票的最佳时机 II">122. 买卖股票的最佳时机 II</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 你能获得的 最大 利润 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> prices = [7,1,5,3,6,4]<br><strong>输出:</strong> 7</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> prices = [1,2,3,4,5]<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> prices = [7,6,4,3,1]<br><strong>输出:</strong> 0</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;遍历整个数组，当当前的价格比前一个价格大时说明前一天买入然后今天卖出是有利润的，如果连续几天都满足这个条件时，可以视为连续几天前一天买入后一天卖出，最终取得的利润和即为所求的答案。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> profit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                profit <span class="token operator">+=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> profit<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> pricesSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>pricesSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> ans<span class="token operator">+</span>tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-跳跃游戏"><a href="#5-跳跃游戏" class="headerlink" title="  5 跳跃游戏 "></a><h2> <span id="Tag5"> 5 跳跃游戏 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/jump-game/" title="55. 跳跃游戏">55. 跳跃游戏</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定一个非负整数数组 <code>nums</code> ，你最初位于数组的 第一个下标 。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>判断你是否能够到达最后一个下标。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,3,1,1,4]<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [3,2,1,0,4]<br><strong>输出:</strong> false</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;创建一个变量<code>right</code>表示当前最远可以到达的位置，初始化为<code>0</code>，即初始状态下最远可以到达下标为<code>0</code>的位置。然后遍历数组，同时对<code>right</code>进行更新，更新规则为：上一个位置的最远距离和这个位置的最远距离中的最大值，前者为<code>right</code>，后者为<code>i + nums[i]</code>. 当最远距离大于等于最后一个位置的下标时说明可以到达，返回<code>true</code>，否则继续遍历直至遍历到最远到达的地方，如果此时还没到终点，而最远距离已经走完，说明无法到达终点，返回<code>false</code>.</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">canJump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> ans<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans <span class="token operator">>=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-跳跃游戏-II"><a href="#6-跳跃游戏-II" class="headerlink" title="  6 跳跃游戏 II "></a><h2> <span id="Tag6"> 6 跳跃游戏 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/jump-game-ii/" title="45. 跳跃游戏 II">45. 跳跃游戏 II</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个非负整数数组 <code>nums</code> ，你最初位于数组的第一个位置。</p><p>数组中的每个元素代表你在该位置可以跳跃的最大长度。</p><p>你的目标是使用最少的跳跃次数到达数组的最后一个位置。</p><p>假设你总是可以到达数组的最后一个位置。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,3,1,1,4]<br><strong>输出:</strong> 2<br><strong>解释:</strong> 跳到最后一个位置的最小跳跃数是 2。<br>从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,3,0,1,4]<br><strong>输出:</strong> 2</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;用一个变量来存储当前步可以走的最远距离<code>right</code>， 用另一个变量来存储下一步可以走的最远距离<code>next_right</code>，当走到<code>right</code>包括了终点时直接返回结果，否则判断是否到达当前步最远距离，若是则步数加1并将下一步的最远距离赋给当前步最远距离并进行遍历。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> next_right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            next_right <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> next_right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                right <span class="token operator">=</span> next_right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">jump</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> curCover <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> nextCover <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//当前步的最远距离/下一步最远距离</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nextCover <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>nextCover<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//更新下一步最远距离</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> curCover<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//等于时说明已经走到当前步的最远处</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>curCover <span class="token operator">==</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//如果最远处为终点，则return</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                              <span class="token comment">//否则说明还没到终点，继续跳</span>                cnt<span class="token operator">++</span><span class="token punctuation">;</span>                          <span class="token comment">//由于当前步已经走完，所以步数加1</span>                curCover <span class="token operator">=</span> nextCover<span class="token punctuation">;</span>           <span class="token comment">//更新当前步的最远距离</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-K-次取反后最大化的数组和"><a href="#7-K-次取反后最大化的数组和" class="headerlink" title="  7 K 次取反后最大化的数组和 "></a><h2> <span id="Tag7"> 7 K 次取反后最大化的数组和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/" title="1005. K 次取反后最大化的数组和">1005. K 次取反后最大化的数组和</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，按以下方法修改该数组：</p><p>选择某个下标 <code>i</code> 并将 <code>nums[i]</code> 替换为 <code>-nums[i]</code> 。<br>重复这个过程恰好 <code>k</code> 次。可以多次选择同一个下标 <code>i</code> 。</p><p>以这种方式修改数组后，返回数组 <strong>可能的最大和</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [4,2,3], k = 1<br><strong>输出:</strong> 5<br><strong>解释:</strong> 选择下标 1 ，nums 变为 [4,-2,3] 。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [3,-1,0,2], k = 3<br><strong>输出:</strong> 6<br><strong>解释:</strong> 选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,-3,-1,5,-4], k = 2<br><strong>输出:</strong> 13<br><strong>解释:</strong> 选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;先排序，然后遍历数组，当数组为负数时进行翻转并将<code>k</code>减去<code>1</code>，当<code>k == 0</code>结束遍历，或完成遍历后<code>k</code>仍大于零。然后再对翻转过后的数组进行排序，如果<code>k</code>大于零，注意，此时的数组中的数字均为非负数，那么我们将剩余翻转次数全用在排序后的数组的第一个数，即<code>nums[0]</code>，如果<code>k</code>为奇数则翻转<code>nums[0]</code>，为偶数则不变，然后算数组加和; 当<code>k</code>为零则不用管，直接求数组加和即可。</p><p>这里需要进行两次排序，可以进行优化处理来避免第二次排序。在翻转过程中用一个变量来存储当前遍历过的数(包括翻转过后的数)中最小数对应的索引，然后翻转后如果<code>k</code>为奇数则将最小值索引对应的值翻转然后再进行求和即可。但很奇怪，这样优化后内存反而用得多。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">largestSumAfterKNegations</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">--</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">largestSumAfterKNegations</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize <span class="token operator">&amp;&amp;</span> k <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            k<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-加油站"><a href="#8-加油站" class="headerlink" title="  8 加油站 "></a><h2> <span id="Tag8"> 8 加油站 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/gas-station/" title="134. 加油站">134. 加油站</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>在一条环路上有 <code>n</code> 个加油站，其中第 <code>i</code> 个加油站有汽油 <code>gas[i]</code> 升。</p><p>你有一辆油箱容量无限的的汽车，从第 <code>i</code> 个加油站开往第 <code>i+1</code> 个加油站需要消耗汽油 <code>cost[i]</code> 升。你从其中的一个加油站出发，开始时油箱为空。</p><p>给定两个整数数组 <code>gas</code> 和 <code>cost</code> ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 <code>-1</code> 。如果存在解，则 <strong>保证</strong> 它是 <strong>唯一</strong> 的。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> gas = [1,2,3,4,5], cost = [3,4,5,1,2]<br><strong>输出:</strong> 3<br><strong>解释:</strong><br>从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油<br>开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油<br>开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油<br>开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油<br>开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油<br>开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。<br>因此，3 可为起始索引。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> gas = [2,3,4], cost = [3,4,3]<br><strong>输出:</strong> -1<br><strong>解释:</strong><br>你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。<br>我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油<br>开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油<br>开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油<br>你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。<br>因此，无论怎样，你都不可能绕环路行驶一周。</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;用一个变量<code>sum</code>记录起始点到当前遍历到的位置的剩余油量，当<code>sum &lt; 0</code>时说明从当前起始点无法到达当前位置，且此时当前位置必不能作为起点(此时<code>gas</code>和<code>cost</code>的差为负),因而起始点更新为当前位置的下个位置；同时用一个变量<code>total_rest</code>来记录全程的油量剩余，如果最后<code>total_rest &lt; 0</code>则说明比不可能走完一圈，因而返回<code>-1</code>；否则返回当前起始点。</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> gas<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> total_rest <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> rest <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            total_rest <span class="token operator">+=</span> rest<span class="token punctuation">;</span>            sum <span class="token operator">+=</span> rest<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                index <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>total_rest <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> index <span class="token operator">>=</span> gas<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">canCompleteCircuit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> gas<span class="token punctuation">,</span> <span class="token keyword">int</span> gasSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> cost<span class="token punctuation">,</span> <span class="token keyword">int</span> costSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>gasSize<span class="token punctuation">]</span><span class="token punctuation">,</span> last <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> minVal <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> gasSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> gas<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        last <span class="token operator">+=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        minVal <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>minVal<span class="token punctuation">,</span> last<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>minVal <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gasSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        minVal <span class="token operator">+=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minVal <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-分发糖果"><a href="#9-分发糖果" class="headerlink" title="  9 分发糖果 "></a><h2> <span id="Tag9"> 9 分发糖果 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/candy/" title="135. 分发糖果">135. 分发糖果</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p><code>n</code> 个孩子站成一排。给你一个整数数组 <code>ratings</code> 表示每个孩子的评分。</p><p>你需要按照以下要求，给这些孩子分发糖果：</p><p>每个孩子至少分配到 <code>1</code> 个糖果。<br>相邻两个孩子评分更高的孩子会获得更多的糖果。<br>请你给每个孩子分发糖果，计算并返回需要准备的 <strong>最少糖果数目</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> ratings = [1,0,2]<br><strong>输出:</strong> 5<br><strong>解释:</strong> 你可以分别给第一个、第二个、第三个孩子分发 2、1、2 颗糖果。<br><strong>示例2:</strong></p><p><strong>输入:</strong> ratings = [1,2,2]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 你可以分别给第一个、第二个、第三个孩子分发 1、2、1 颗糖果。<br>第三个孩子只得到 1 颗糖果，这满足题面中的两个条件。</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;贪心，遇到<strong>单调</strong>上升序列就逐位加<code>1</code>颗糖果，遇到相等的，把该位的糖果置为<code>1</code>;同样的，遇到<strong>单调</strong>下降序列就逐位加<code>1</code>颗(实际上是反过来的),当当前的单调下降序列的长度大于前一个单调上升序列时，要额外加<code>1</code>颗糖果，因为单调下降序列前一个(记为<code>last</code>同学)必定要比单调下降序列的起始位置大<code>1</code>，当当前的单调下降序列的长度大于前一个单调上升序列时说明原来分配给<code>last</code>同学的糖果少了。</p><p>用一个变量<code>inc</code>来记录当前的上升序列长度，用<code>des</code>来记录下降序列长度，当上升序列结束后需要将<code>inc</code>的值记录下来，这里用<code>last_inc</code>来保存，然后在下降序列中检测<code>des &gt;= last_inc</code>是否满足，如果是则要给<code>last</code>同学多加<code>1</code>颗，体现在代码中就是直接让答案自加<code>1</code>. 注意相邻两个同学评分相等的情况，两个相等，不论前一个给了多少，下一个只给<code>1</code>颗，并且更新<code>inc</code>和<code>des</code>以及<code>last_inc</code>.</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ratings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> des <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> last_inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ratings<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>inc<span class="token punctuation">;</span>                res <span class="token operator">+=</span> inc<span class="token punctuation">;</span>                des <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                last_inc <span class="token operator">=</span> inc<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                des <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                last_inc <span class="token operator">=</span> inc<span class="token punctuation">;</span>                res<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>des<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>des <span class="token operator">>=</span> last_inc<span class="token punctuation">)</span> <span class="token operator">++</span>res<span class="token punctuation">;</span>                res <span class="token operator">+=</span> des<span class="token punctuation">;</span>                inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*int candy(int* ratings, int ratingsSize)&#123;    int candy[ratingsSize];    candy[0] = 1;    for(int i = 1; i &lt; ratingsSize; i++)&#123;   //从前向后遍历，当后一个比前一个评分高则后一个比前一个多一个        if(ratings[i] > ratings[i-1])&#123;            candy[i] = candy[i-1]+1;        &#125;else&#123;              candy[i] = 1;                   //否则只给最少的数量，即1颗        &#125;    &#125;    int ans = candy[ratingsSize-1];         //从后向前遍历，如果前一个比后一个评分高，则前一个给比后一个多一个    for(int i = ratingsSize-1; i>= 1; i--)&#123; //，但是要取原来的值与后一个+1中的最大，即fmax(candy[i], candy[i+1]+1)        if(ratings[i-1] > ratings[i])&#123;            candy[i-1] = fmax(candy[i-1], candy[i] + 1);        &#125;        ans += candy[i-1];    &#125;    return ans;&#125;*/</span><span class="token keyword">int</span> <span class="token function">candy</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> ratings<span class="token punctuation">,</span> <span class="token keyword">int</span> ratingsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> dec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> inc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>ratingsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            pre <span class="token operator">=</span> ratings<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>ratings<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> pre <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            inc <span class="token operator">=</span> pre<span class="token punctuation">;</span>            ans <span class="token operator">+=</span> pre<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            dec<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>dec <span class="token operator">==</span> inc<span class="token punctuation">)</span> dec <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            ans <span class="token operator">+=</span> dec<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-柠檬水找零"><a href="#10-柠檬水找零" class="headerlink" title="  10 柠檬水找零 "></a><h2> <span id="Tag1"> 10 柠檬水找零 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/lemonade-change/" title="860. 柠檬水找零">860. 柠檬水找零</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>在柠檬水摊上，每一杯柠檬水的售价为 <code>5</code> 美元。顾客排队购买你的产品，（按账单 <code>bills</code> 支付的顺序）一次购买一杯。</p><p>每位顾客只买一杯柠檬水，然后向你付 <code>5</code> 美元、<code>10</code> 美元或 <code>20</code> 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 <code>5</code> 美元。</p><p>注意，一开始你手头没有任何零钱。</p><p>给你一个整数数组 <code>bills</code> ，其中 <code>bills[i]</code> 是第 <code>i</code> 位顾客付的账。如果你能给每位顾客正确找零，返回 <code>true</code> ，否则返回 <code>false</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> bills = [5,5,5,10,20]<br><strong>输出:</strong> true<br><strong>解释:</strong><br>前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。<br>第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。<br>第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。<br>由于所有客户都得到了正确的找零，所以我们输出 true。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> bills = [5,5,10,10,20]<br><strong>输出:</strong> false<br><strong>解释:</strong><br>前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。<br>对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。<br>对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。<br>由于不是每位顾客都得到了正确的找零，所以答案是 false。</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>&emsp;&emsp;创建两个变量，一个记录剩余的<code>5</code>的个数<code>fives</code>，另一个记录<code>10</code>的个数<code>tens</code>。遍历数组，遇到<code>5</code>则<code>fives</code>加1，遇到<code>10</code>则<code>fives</code>减1且<code>tens</code>加1；<strong>遇到<code>20</code>时，优先把<code>10</code>找出去</strong>，这也就是这一题的贪心点所在，此时先判断，如果<code>fives</code>已经用光了，那么就没法找零直接返回<code>false</code>，然后判断<code>tens</code>的个数，如果有<code>tens</code>，则<code>tens</code>和<code>fives</code>均减1，否则<code>fives</code>减3(注意这里需要先判断<code>fives</code>大于3).</p><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">lemonadeChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> bills<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fives <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> tens <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span> bills<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>fives<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>fives<span class="token punctuation">;</span>                <span class="token operator">++</span>tens<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fives<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tens<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">--</span>tens<span class="token punctuation">;</span>                    <span class="token operator">--</span>fives<span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>fives <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    fives <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">lemonadeChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> bills<span class="token punctuation">,</span> <span class="token keyword">int</span> billsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cash<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>cash<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> billsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>bills<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            cash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> cash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>                cash<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cash<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch8-of-programmercarl-1</title>
      <link href="/2022/04/18/ch8-of-programmercarl-1/"/>
      <url>/2022/04/18/ch8-of-programmercarl-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">77. 组合</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">216. 组合总和 III</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">17. 电话号码的字母组合</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">39. 组合总和</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">40. 组合总和 II</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">131. 分割回文串</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">93. 复原 IP 地址</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">78. 子集</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">90. 子集 II</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">491. 递增子序列</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-组合"><a href="#1-组合" class="headerlink" title="  1 组合 "></a><h2> <span id="Tag1"> 1 组合 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combinations/" title="77. 组合">77. 组合</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 4, k = 2<br><strong>输出:</strong><br>[<br>&emsp;[2,4],<br>&emsp;[3,4],<br>&emsp;[2,3],<br>&emsp;[1,2],<br>&emsp;[1,3],<br>&emsp;[1,4],<br>]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 1, k = 1<br><strong>输出:</strong> [[1]]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">></span> n <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-组合总和-III"><a href="#2-组合总和-III" class="headerlink" title="  2 组合总和 III "></a><h2> <span id="Tag2"> 2 组合总和 III </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combination-sum-iii/" title="216. 组合总和 III">216. 组合总和 III</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> k = 3, n = 7<br><strong>输出:</strong> [[1,2,4]]<br><strong>解释:</strong><br>1 + 2 + 4 = 7<br>没有其他符合的组合了。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong>  k = 3, n = 9<br><strong>输出:</strong> [[1,2,6], [1,3,5], [2,3,4]]<br><strong>解释:</strong><br>1 + 2 + 6 = 9<br>1 + 3 + 5 = 9<br>2 + 3 + 4 = 9<br>没有其他符合的组合了。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> k = 4, n = 1<br><strong>输出:</strong> []</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">></span> <span class="token number">10</span> <span class="token operator">||</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">||</span> sum <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token operator">&amp;&amp;</span> sum <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sum <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//前一个条件为处理结果，后一个则是剪枝</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//判断是否满足要求</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token operator">-</span><span class="token punctuation">(</span>k<span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//剪枝</span>            tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>     <span class="token comment">//将当前值存入数组</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>           <span class="token comment">//用于判断当前暂存数组中的数是否为目标值n</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token comment">//回溯</span>            sum <span class="token operator">-=</span> i<span class="token punctuation">;</span>           <span class="token comment">//回溯</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-17-电话号码的字母组合"><a href="#3-17-电话号码的字母组合" class="headerlink" title="  3 17. 电话号码的字母组合 "></a><h2> <span id="Tag3"> 3 17. 电话号码的字母组合 </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a> “17. 电话号码的字母组合”)</li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个仅包含数字 <code>2-9</code> 的字符串，返回所有它能表示的字母组合。答案可以按 <strong>任意顺序</strong> 返回。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 <code>1</code> 不对应任何字母。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> digits = “23”<br><strong>输出:</strong> [“ad”,”ae”,”af”,”bd”,”be”,”bf”,”cd”,”ce”,”cf”]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> digits = “”<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> digits = “2”<br><strong>输出:</strong> [“a”,”b”,”c”]</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> str <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">"wxyz"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    string path<span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string digits<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path <span class="token operator">+=</span> str<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>string digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> digits<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span>list<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">,</span><span class="token string">"ghi"</span><span class="token punctuation">,</span><span class="token string">"jkl"</span><span class="token punctuation">,</span><span class="token string">"mno"</span><span class="token punctuation">,</span><span class="token string">"pqrs"</span><span class="token punctuation">,</span><span class="token string">"tuv"</span><span class="token punctuation">,</span><span class="token string">"wxyz"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>list<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            path<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>digits<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'2'</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-组合总和"><a href="#4-组合总和" class="headerlink" title="  4 组合总和 "></a><h2> <span id="Tag4"> 4 组合总和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combination-sum/" title="39. 组合总和">39. 组合总和</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个 无重复元素 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 target 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。 </p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> candidates = [2,3,6,7], target = 7<br><strong>输出:</strong> [[2,2,3],[7]]<br><strong>解释:</strong><br>2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。<br>7 也是一个候选， 7 = 7 。<br>仅有这两种组合。</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> candidates = [2,3,5], target = 8<br><strong>输出:</strong> [[2,2,2,2],[2,3,3],[3,5]]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> candidates = [2], target = 1<br><strong>输出:</strong> []</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">>=</span> size <span class="token operator">||</span> sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> i<span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> n<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> candidatesSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> candidatesSize<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-组合总和-II"><a href="#5-组合总和-II" class="headerlink" title="  5 组合总和 II "></a><h2> <span id="Tag5"> 5 组合总和 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combination-sum-ii/" title="40. 组合总和 II">40. 组合总和 II</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p><strong>注意</strong>：解集不能包含重复的组合。 </p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> candidates = [10,1,2,7,6,1,5], target = 8,<br><strong>输出:</strong><br>[<br>[1,1,6],<br>[1,2,5],<br>[1,7],<br>[2,6]<br>]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> candidates = [2,5,2,1,2], target = 5,<br><strong>输出:</strong><br>[<br>[1,2,2],<br>[5]<br>]</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;这题与上一题的区别在于数组中的元素是有相同的而非单一的，所以在<code>DFS</code>的时候应当要处理元素值一样的问题。首先先对数组进行排序，然后进行<code>DFS</code>, 当当前循环的元素下标不为当前递归层中的第一个时且其与其前一个数一样时说明这个可以跳过。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">>=</span> size <span class="token operator">||</span> sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>candidates<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> candidates<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        size <span class="token operator">=</span> candidates<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> candidates<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> n<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-分割回文串"><a href="#6-分割回文串" class="headerlink" title="  6 分割回文串 "></a><h2> <span id="Tag6"> 6 分割回文串 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="131. 分割回文串">131. 分割回文串</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “aab”<br><strong>输出:</strong> [[“a”,”a”,”b”],[“aa”,”b”]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “a”<br><strong>输出:</strong> [[“a”]]</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;采用回溯+回文串判断即可。思路总体上同组合问题一致，只是这一题我们需要对每个子串判断是否为回文串。创建一个<code>string</code>变量用来存储单个子串，创建一个<code>vector</code>用于存放整个字符串分割成的子串，这里要注意，题目要求这个字符串<strong>分割后所有子串都要是回文串</strong>，因而单个子串分割后先判断是否为回文串，是再把这个子串插入到暂存<code>vector</code>中，当整个字符串分割完成后暂存<code>vector</code>中的串就都是回文串，直接将其插入到答案中即可。</p><p>&emsp;&emsp;官方题解中采用动态规划预先对字符串进行处理，省去重复判断子串是否为回文串的步骤，大大降低时间复杂度。预处理如下;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> f<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rest <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> s<span class="token operator">:</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            string path<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size<span class="token operator">-</span>rest<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path <span class="token operator">+=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    tmp<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> size<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    tmp<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">partition</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><p>&emsp;&emsp;<code>C</code>处理字符串太麻烦了，后边有空再补上。。。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-复原-IP-地址"><a href="#7-复原-IP-地址" class="headerlink" title="  7 复原 IP 地址 "></a><h2> <span id="Tag7"> 7 复原 IP 地址 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/restore-ip-addresses/" title="93. 复原 IP 地址">93. 复原 IP 地址</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>有效 <code>IP</code> 地址 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>&#39;.&#39;</code> 分隔。</p><p>例如：<code>&quot;0.1.2.201&quot;</code> 和 <code>&quot;192.168.1.1&quot;</code> 是 <strong>有效 IP 地址</strong>，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。<br>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>&#39;.&#39;</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “25525511135”<br><strong>输出:</strong> [“255.255.11.135”,”255.255.111.35”]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “0000”<br><strong>输出:</strong> [“0.0.0.0”]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “101023”<br><strong>输出:</strong> [“1.0.10.23”,”1.0.102.3”,”10.1.0.23”,”10.10.2.3”,”101.0.2.3”]</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;回溯+剪枝。</p><ul><li><p>回溯：在<code>string</code>取若干位数字作为ip地址的一部分，然后进入下一层递归。由于ip地址由4个整数构成，每一个整数都位于<code>0</code>和<code>255</code>之间且不能有前缀<code>0</code>,因而每层递归中的循环设定为<code>3</code>，即最多取三位数。取完要对当前位整数进行判断，确定其是否在<code>0</code>和<code>255</code>之间以及是否有前缀<code>0</code>，判断函数如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//确定是否有前缀0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> ch <span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//判断当前整数是否处于区间中</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>剪枝：这里有两个可以优化的地方；</p><ul><li>首先是当前整数取完，剩余的字符串长度如果大于3倍的ip地址剩余位长度时，说明此时字符串太长了，无需进行下一层递归，要不就当前位继续取，要不就直接返回。</li><li>第二就是剩余的部分刚好等于3倍的ip地址剩余位长度且下一位大于2，这种情况相当于ip地址剩余位的整数都是3三位数，如果下一位大于2则说明后面的已经超过上述的区间，无需进行下一层递归，要不就当前位继续取，要不就直接返回。</li></ul></li></ul><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>        <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">//判断是否有前缀0</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> ch <span class="token operator">-</span><span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> string path<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">==</span> size <span class="token operator">||</span>  cnt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                     <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">==</span> size <span class="token operator">&amp;&amp;</span>  cnt <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//如果起始位不是最后一位说明字符串太长了</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            string str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>startIndex <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                str <span class="token operator">+=</span> s<span class="token punctuation">[</span>startIndex <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>                     <span class="token operator">||</span> <span class="token punctuation">(</span>size<span class="token operator">-</span>startIndex<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>startIndex<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token char">'2'</span>  <span class="token comment">//剪枝1：后边必须取3位且下一位大于2</span>                    <span class="token operator">||</span> <span class="token punctuation">(</span>size<span class="token operator">-</span>startIndex<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">3</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//剪枝2：后边取3位字符串还有剩</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> startIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> str<span class="token punctuation">,</span> cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> startIndex <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> str<span class="token punctuation">,</span> cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token number">4</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><p>&emsp;&emsp;<code>C</code>做字符串太烦人了，等有空再补上。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-子集"><a href="#8-子集" class="headerlink" title="  8 子集 "></a><h2> <span id="Tag8"> 8 子集 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/subsets/" title="78. 子集">78. 子集</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,3]<br><strong>输出:</strong> [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0]<br><strong>输出:</strong> [[],[0]]</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;直接回溯即可，和组合问题一个套路。</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> pathSize<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        path<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">subsets</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    size <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-子集-II"><a href="#9-子集-II" class="headerlink" title="  9 子集 II "></a><h2> <span id="Tag9"> 9 子集 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/subsets-ii/" title="90. 子集 II">90. 子集 II</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,2,2]<br><strong>输出:</strong> [[],[1],[1,2],[1,2,2],[2],[2,2]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0]<br><strong>输出:</strong> [[],[0]]</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;这一题和上一题的思路一致，只是这一题没有了<strong>数组中的数字都是唯一的</strong>这个限制，因而需要对数组中的重复数字进行滤除，滤除方式和<a href="#Tag5">40. 组合总和 II</a>是一致的，先排序，然后看是不是与上一个值相等，等于就跳过(前提是当前数字不是当前递归层的首个循环数)。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>startIndex <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> startIndex <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//滤去重复数字</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先排序</span>        res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> pathSize<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> startIndex <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//滤去重复数字</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        path<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    size <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> size<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//排序</span>    path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-递增子序列"><a href="#10-递增子序列" class="headerlink" title="  10 递增子序列 "></a><h2> <span id="Tag10"> 10 递增子序列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/increasing-subsequences/" title="491. 递增子序列">491. 递增子序列</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [4,6,7,7]<br><strong>输出:</strong> [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [4,4,3,2,1]<br><strong>输出:</strong> [[4,4]] </p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>&emsp;&emsp;这一题类似上一题，也是需要去重。但是这一题由于是要求原数组中的递增子序列，因而不能改变该数组（也就是不能像上一题一样直接排序然后去重）。这里采用一个哈希表来记录当前层已经用过的数字，然后循环中如果检测到当前层已经用过当前遍历的数字，则跳过这个数字。注意，哈希表应该在单层递归中定义，不能定义为全局，因为当前层用过哪个数字是不影响下一层的。</p><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//当暂存数组中size大于1时说明是一个答案，插到答案中</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">//哈希表，初始化为false</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token comment">//检测是否用过该数字以及当前数字加入后是否还是递增的</span>            <span class="token punctuation">&#125;</span>            used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">//已经访问过该数字，哈希置为true</span>            path<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> res<span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> path<span class="token punctuation">;</span><span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token keyword">int</span> pathSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>pathSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> pathSize<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> pathSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">copy</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    bool used<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>pos<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> path<span class="token punctuation">[</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> true<span class="token punctuation">;</span>        path<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    size <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">32768</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> DFS </tag>
            
            <tag> 回溯 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 去重 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch7-of-programmercarl-1</title>
      <link href="/2022/04/18/ch7-of-programmercarl-1/"/>
      <url>/2022/04/18/ch7-of-programmercarl-1/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">二叉树遍历</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">226. 翻转二叉树</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">101. 对称二叉树</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">104. 二叉树的最大深度</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">111. 二叉树的最小深度</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">222. 完全二叉树的节点个数</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">110. 平衡二叉树</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">257. 二叉树的所有路径</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">404. 左叶子之和</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">513. 找树左下角的值</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-树的遍历"><a href="#1-树的遍历" class="headerlink" title="  1 树的遍历 "></a><h2> <span id="Tag1"> 1 树的遍历 </span></h2></h3><p>&emsp;&emsp;移步至<code>Coding Tips</code>查看<code>C语言-3.各种数据结构-3.3 树</code>章节查看，包括树的建立以及四种遍历的实现方法，包括迭代遍历与递归遍历的实现，其中迭代遍历分为一般遍历和统一遍历两种，后者将前序遍历、中序遍历、后序遍历的代码进行了统一，仅需调整结点插入栈的顺序即可。</p><h3 id="2-翻转二叉树"><a href="#2-翻转二叉树" class="headerlink" title="  2 翻转二叉树 "></a><h2> <span id="Tag2"> 2 翻转二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/invert-binary-tree/" title="226. 翻转二叉树">226. 翻转二叉树</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一棵二叉树的根节点 <code>root</code> ，翻转这棵二叉树，并返回其根节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/226_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [4,2,7,1,3,6,9]<br><strong>输出:</strong> [4,7,2,9,6,3,1]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/226_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [2,1,3]<br><strong>输出:</strong> [2,3,2]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> root = []<br><strong>输出:</strong> []</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;最简单的思路，直接递归，由于翻转二叉树相当于交换两个数。交换两个数我们需要先保存其中一个数，然后先交换其中一个，再交换另一个。翻转二叉树同样需要先保存其中一个结点，否则直接更改某个结点的左孩子指向，那么就无法再访问其原来的左孩子结点。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-对称二叉树"><a href="#3-对称二叉树" class="headerlink" title="  3 对称二叉树 "></a><h2> <span id="Tag3"> 3 对称二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/symmetric-tree/" title="101. 对称二叉树">101. 对称二叉树</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个二叉树的根节点 <code>root</code> ， 检查它是否轴对称。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/101_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,2,3,4,4,3]<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/101_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,2,null,3,null,3]<br><strong>输出:</strong> false</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><ul><li>递归：没啥好写的。递归函数中，如果左右结点均为<code>NULL</code>则为<code>true</code>，如果其中一个结点为<code>NULL</code>或两个结点值不等则为<code>false</code>, 否则进入下一层判断。</li></ul><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> left<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> <span class="token operator">!</span>right <span class="token operator">||</span> left<span class="token operator">-></span>val <span class="token operator">!=</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>left<span class="token operator">-></span>left<span class="token punctuation">,</span> right<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">check</span><span class="token punctuation">(</span>left<span class="token operator">-></span>right<span class="token punctuation">,</span> right<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现  </li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root1 <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root2<span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>root1<span class="token operator">||</span><span class="token operator">!</span>root2<span class="token punctuation">)</span><span class="token operator">||</span>root1<span class="token operator">-></span>val<span class="token operator">!=</span>root2<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>left<span class="token punctuation">,</span> root2<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">judge</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>right<span class="token punctuation">,</span> root2<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">judge</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>双向队列：队列头加右子树，队列尾加左子树，循环对队头和队尾的结点值进行判断。其中，如果左右结点仅有一个为<code>NULL</code>或左右节点的值不等则直接返回<code>false</code>，反则将左右节点的左右孩子都加入到队列中，依然还是左边在队尾、右边在队头，而且左边应该先把左孩子插入然后插右孩子，而右边先右孩子后左孩子(或者左先右后左，右则先左后右). 这种思路其实是<code>DFS</code>. ps: 双向队列的作用感觉有点像栈。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">||</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        deque<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> deq<span class="token punctuation">;</span>        deq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        deq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> deq<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>right <span class="token operator">=</span> deq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            deq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> deq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> <span class="token operator">!</span>right <span class="token operator">||</span> <span class="token punctuation">(</span>left<span class="token operator">-></span>val <span class="token operator">!=</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            deq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>left<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            deq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            deq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>right<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            deq<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span>right<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>单向队列：类似双向队列，也是要注意插入顺序即可。先左左后右右再左右最后右左(或先左右后右左再左左最后右右)以保证队列中相邻位置为对称位置结点对。</p></li><li><p><code>Cpp</code> 实现</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">||</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TreeNode <span class="token operator">*</span>right <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> <span class="token operator">!</span>right <span class="token operator">||</span> left<span class="token operator">-></span>val <span class="token operator">!=</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isSymmetric</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>left<span class="token punctuation">,</span> <span class="token operator">*</span>right<span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>    tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//队列不为空</span>        left <span class="token operator">=</span> tmp<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> tmp<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span>             <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">||</span> <span class="token operator">!</span>right <span class="token operator">||</span> left<span class="token operator">-></span>val <span class="token operator">!=</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token operator">-></span>left<span class="token punctuation">;</span>         tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">-></span>right<span class="token punctuation">;</span>        tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token operator">-></span>right<span class="token punctuation">;</span>        tmp<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token operator">-></span>left<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-二叉树的最大深度"><a href="#4-二叉树的最大深度" class="headerlink" title="  4 二叉树的最大深度 "></a><h2> <span id="Tag4"> 4 二叉树的最大深度 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" title="104. 二叉树的最大深度">104. 二叉树的最大深度</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明</strong>: 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong></p><p>给定二叉树 [3,9,20,null,null,15,7]，</p><blockquote><p>&emsp;&ensp; 3<br>&emsp; /&emsp;\\<br>&emsp;9&emsp;20<br>&ensp; /&ensp; \\<br>  15&emsp;7</p><p>返回它的最大深度 3 。</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><ul><li><p>DFS: 递归.</p></li><li><p>BFS: 层序遍历，深度即为层数.</p></li></ul><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//dfs</span>        <span class="token comment">//return max(maxDepth(root->left),maxDepth(root->right)) + 1;</span>        <span class="token comment">//bfs</span>        <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> queue<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> cur<span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> rear<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//dfs</span>    <span class="token keyword">return</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">//bfs</span>    <span class="token comment">//return bfs(root);</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-二叉树的最小深度"><a href="#5-二叉树的最小深度" class="headerlink" title="  5 二叉树的最小深度 "></a><h2> <span id="Tag5"> 5 二叉树的最小深度 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="111. 二叉树的最小深度">111. 二叉树的最小深度</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明</strong>：叶子节点是指没有子节点的节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/111.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [3,9,20,null,null,15,7]<br><strong>输出:</strong> 2</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [2,null,3,null,4,null,5,null,6]<br><strong>输出:</strong> 5</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><ul><li><p>BFS：当有一层遍历到<code>NULL</code>就返回即可。</p></li><li><p>DFS: 递归，求树的最小深度可以转换为左右子树的深度的最小值。</p></li></ul><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>cnt<span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//dfs</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> mindepth <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mindepth <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mindepth<span class="token punctuation">,</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            mindepth <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>mindepth<span class="token punctuation">,</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> mindepth <span class="token operator">==</span> INT_MAX <span class="token operator">?</span> <span class="token number">1</span><span class="token operator">:</span> mindepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//bfs</span>        <span class="token comment">/*if(!root) return 0;        return bfs(root);*/</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>queue<span class="token punctuation">[</span><span class="token number">100000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur<span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> rear<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ans<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-完全二叉树的节点个数"><a href="#6-完全二叉树的节点个数" class="headerlink" title="  6 完全二叉树的节点个数 "></a><h2> <span id="Tag6"> 6 完全二叉树的节点个数 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/count-complete-tree-nodes/" title="222. 完全二叉树的节点个数">222. 完全二叉树的节点个数</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一棵 <strong>完全二叉树</strong> 的根节点 <code>root</code> ，求出该树的节点个数。</p><p><code>完全二叉树</code> 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 h 层，则该层包含 $1 - 2^h$ 个节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/222.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,3,4,5,6]<br><strong>输出:</strong> 6</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = []<br><strong>输出:</strong> 0</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> [1]<br><strong>输出:</strong> 1</p></blockquote><p><strong>进阶</strong>：遍历树来统计节点是一种时间复杂度为 <code>O(n)</code> 的简单解决方案。你可以设计一个更快的算法吗？</p><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><ul><li>最简单的就是直接遍历整棵二叉树。</li><li>第二种思路是二分查找。先找到二叉树的最大高度，即通过一直访问左孩子结点直至左结点为<code>NULL</code>时计数器即为树的高度。由于是完全二叉树，找到树的高度后，树的结点数就在$2^k$到$2^{(k+1)}-1$之间,因而可以在这个范围进行查找。应当注意到，<strong>完全二叉树中结点的编号可以反映结点的位置，将编号转为二进制，除去最高位的<code>1</code>，其他二进制位为<code>0</code>则向左走、为<code>1</code>则向右走</strong>。</li><li>递归，将树的节点数转换为求左子树的结点数、右子树的结点数以及根节点的加和。</li></ul><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li>二分查找<code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isExist</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> b <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>b <span class="token operator">&amp;</span> num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            b <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> height<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>height<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isExist</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> m<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>递归<code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rHeight <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token operator">++</span>lHeight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>            <span class="token operator">++</span>rHeight<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lHeight <span class="token operator">==</span> rHeight<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>lHeight<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-平衡二叉树"><a href="#7-平衡二叉树" class="headerlink" title="  7 平衡二叉树 "></a><h2> <span id="Tag7"> 7 平衡二叉树 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/balanced-binary-tree/" title="110. 平衡二叉树">110. 平衡二叉树</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给定一个二叉树，判断它是否是高度平衡的二叉树。</p><p>本题中，一棵高度平衡二叉树定义为：</p><p>&emsp;&emsp;一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/110_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [3,9,20,null,null,15,7]<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/110_2.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,2,3,3,null,null,4,4]<br><strong>输出:</strong> false</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> []<br><strong>输出:</strong> true</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><ul><li><p>自底而上: 计算树的深度即可。</p></li><li><p>自顶而下: 遍历树来求左右子树的高度(最底下高度为<code>0</code>)，如果当前结点为<code>NULL</code>则说明当前遍历的子树高度为<code>0</code>; 自下而上计算子树的高度，当左右高度差超过<code>1</code>时将子树高度置为<code>-1</code>(其他负数均可，或者用一个全局<code>bool</code>变量来作为标识)，主函数中检测到返回值为<code>-1</code>则说明不是高度平衡的二叉树，返回<code>false</code>，否则返回<code>true</code>.</p></li></ul><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">getDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>rHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>lHeight <span class="token operator">-</span> rHeight<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">max</span><span class="token punctuation">(</span>lHeight<span class="token punctuation">,</span> rHeight<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//自顶而下求深度</span>        <span class="token comment">/*if(!root) return true;        int l = getDepth(root->left), r = getDepth(root->right);        return (abs(l - r)&lt;=1)&amp;&amp;isBalanced(root->left)&amp;&amp;isBalanced(root->right);*/</span>        <span class="token comment">//自底而上求高度</span>        <span class="token keyword">return</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>leftHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightHeight <span class="token operator">=</span> <span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>rightHeight <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>leftHeight <span class="token operator">-</span> rightHeight<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">fmax</span><span class="token punctuation">(</span>leftHeight<span class="token punctuation">,</span> rightHeight<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>bool <span class="token function">isBalanced</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getHeight</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-二叉树的所有路径"><a href="#8-二叉树的所有路径" class="headerlink" title="  8 二叉树的所有路径 "></a><h2> <span id="Tag8"> 8 二叉树的所有路径 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/binary-tree-paths/" title="257. 二叉树的所有路径">257. 二叉树的所有路径</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个二叉树的根节点 <code>root</code> ，按 <strong>任意顺序</strong> ，返回所有从根节点到叶子节点的路径。</p><p><strong>叶子节点</strong> 是指没有子节点的节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/257.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [1,2,3,null,5]<br><strong>输出:</strong> [“1-&gt;2-&gt;5”,”1-&gt;3”]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [1]<br><strong>输出:</strong> [“1”]</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><ul><li><code>DFS</code>: 采用回溯算法，当遇到某个结点既没有左孩子也没有右孩子的时候就把暂存的路径插入到答案中，否则则将当前结点值插入暂存路径中并进行一下层结点的遍历。</li></ul><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> string path<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            path <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            path <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> path <span class="token operator">+</span> <span class="token string">"->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        string path <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//int cnt = 0;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tmpPath<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//void traversal(struct TreeNode* root, int *tmpPath, char **path, int* returnSize)&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    tmpPath<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            len <span class="token operator">+=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token operator">+</span>len<span class="token punctuation">,</span><span class="token string">"%d->"</span><span class="token punctuation">,</span>tmpPath<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sprintf</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token operator">+</span>len<span class="token punctuation">,</span><span class="token string">"%d"</span><span class="token punctuation">,</span>tmpPath<span class="token punctuation">[</span>cnt<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> tmpPath<span class="token punctuation">,</span> path<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//traversal(cur->left, tmpPath, path, returnSize);</span>        <span class="token comment">//cnt--;    //cnt是局部变量，递归过程不修改，不用-1</span>    <span class="token punctuation">&#125;</span>               <span class="token comment">//-1是为了把叶子点去掉，如果是全局变量就要减去1</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> tmpPath<span class="token punctuation">,</span> path<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//traversal(cur->right, tmpPath, path, returnSize);</span>        <span class="token comment">//cnt--;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>path <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> path<span class="token punctuation">,</span> ret<span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//traversal(root, path, ret, returnSize);</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-左叶子之和"><a href="#9-左叶子之和" class="headerlink" title="  9 左叶子之和 "></a><h2> <span id="Tag9"> 9 左叶子之和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/sum-of-left-leaves/" title="404. 左叶子之和">404. 左叶子之和</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>给定二叉树的根节点 <code>root</code> ，返回所有左叶子之和。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> root = [3,9,20,null,null,15,7]<br><strong>输出:</strong> 24<br><strong>解释:</strong> 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> root = [1]<br><strong>输出:</strong> 0</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;就是找到某个结点的左节点，其左右节点均为<code>NULL</code>时就把该节点的值加到答案中。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> cur<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>stack<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> stack_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stack_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-找树左下角的值"><a href="#10-找树左下角的值" class="headerlink" title="  10 找树左下角的值 "></a><h2> <span id="Tag10"> 10 找树左下角的值 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/" title="513. 找树左下角的值">513. 找树左下角的值</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给定一个二叉树的 <strong>根节点</strong> `root``，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/513_1.jpg" alt></p><blockquote><p><strong>输入:</strong> root = [2,1,3]<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch7-of-programmercarl-1/513_2.jpg" alt></p><blockquote><p><strong>输入:</strong> [1,2,3,4,null,5,6,null,null,7]<br><strong>输出:</strong> 7</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><ul><li><code>BFS</code>: 层序遍历，直至最后一层，返回队列的队头即可。</li></ul><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">bfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">bfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>queue<span class="token punctuation">[</span><span class="token number">10001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">int</span> last<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        last <span class="token operator">=</span> rear<span class="token punctuation">,</span> prev <span class="token operator">=</span> front<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> last<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> queue<span class="token punctuation">[</span>prev<span class="token punctuation">]</span><span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 二叉树 </tag>
            
            <tag> DFS </tag>
            
            <tag> BFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch6-of-programmercarl</title>
      <link href="/2022/04/18/ch6-of-programmercarl/"/>
      <url>/2022/04/18/ch6-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">232. 用栈实现队列</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">225. 用队列实现栈</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">20. 有效的括号</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">1047. 删除字符串中的所有相邻重复项</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">150. 逆波兰表达式求值</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">239. 滑动窗口最大值</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">347. 前 K 个高频元素</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-用栈实现队列"><a href="#1-用栈实现队列" class="headerlink" title="  1 用栈实现队列 "></a><h2> <span id="Tag1"> 1 用栈实现队列 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/" title="232. 用栈实现队列">232. 用栈实现队列</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（<code>push</code>、<code>pop</code>、<code>peek</code>、<code>empty</code>）：</p><p>实现 <code>MyQueue</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 推到队列的末尾</li><li><code>int pop()</code> 从队列的开头移除并返回元素</li><li><code>int peek()</code> 返回队列开头的元素</li><li><code>boolean empty()</code> 如果队列为空，返回 <code>true</code> ；否则，返回 <code>false</code></li></ul><p><strong>说明：</strong></p><ul><li>你 <strong>只能</strong> 使用标准的栈操作 —— 也就是只有 <code>push to top</code>, <code>peek/pop from top</code>, <code>size</code>, 和 <code>is empty</code> 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 <code>list</code> 或者 <code>deque</code>（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [“MyQueue”, “push”, “push”, “peek”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br><strong>输出:</strong> [null, null, null, 1, 1, false]<br><strong>解释:</strong><br>MyQueue myQueue = new MyQueue();<br>myQueue.push(1); // queue is: [1]<br>myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)<br>myQueue.peek(); // return 1<br>myQueue.pop(); // return 1, queue is [2]<br>myQueue.empty(); // return false</p></blockquote><p><strong>进阶：</strong></p><ul><li>你能否实现每个操作均摊时间复杂度为 <code>O(1)</code> 的队列？换句话说，执行 <code>n</code> 个操作的总时间复杂度为 <code>O(n)</code> ，即使其中一个操作可能花费较长时间。</li></ul><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;队列的原则是“先入先出”(FIFO)，而栈则相反，是“先入后出”(FILO), 因而通过栈来实现队列，需要实现将栈底元素先进行输出，因此需要建立两个栈，一个负责入队操作，另一个则负责出队操作。入队时直接将元素压入入队栈即可；出队时，将入队栈中的元素全部压入出队栈，然后将栈顶元素弹出，最后将出队栈中的元素重新压入入队栈即可。</p><p>&emsp;&emsp;但实际上并不需要每次要出队都进行元素的转移，<strong>元素入队还是直接压入入队栈即可，而出队时首先判断出队栈是否为空，此时出队栈不为空时实际上就是真实的队列顺序，直接弹出栈顶元素即可；而如果出队栈为空，那么将入队栈中元素压入出队栈再进行弹出即可</strong>。</p><p>&emsp;&emsp;&emsp;&emsp;此外，<code>peek()</code>和<code>pop()</code>其实只相差是否将队头元素弹出，因而<code>pop()</code>可以通过调用<code>peek()</code>函数然后弹出队头元素最后返回相应的结果即可。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk4In<span class="token punctuation">,</span> stk4Out<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">In2Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//实现入队栈中元素到出队栈的转移</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk4In<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stk4Out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stk4In<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将入队栈栈顶压入出队栈</span>            stk4In<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stk4In<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//入队操作，直接将元素压入入队栈</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//队列为空的条件是两个栈均为空</span>        <span class="token keyword">return</span> stk4In<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> stk4Out<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stk4Out<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">In2Out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//出队栈为空时需要先进行元素转移</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stk4Out<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//返回出队栈栈顶元素</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//获取出队栈栈顶元素</span>        stk4Out<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//将出队栈栈顶元素弹出，即将队头元素出队</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义栈结构体</span>    <span class="token keyword">int</span> <span class="token operator">*</span>stk<span class="token punctuation">;</span>       <span class="token comment">//用数组实现栈</span>    <span class="token keyword">int</span> stk_top<span class="token punctuation">;</span>    <span class="token comment">//定义栈顶指针</span>    <span class="token keyword">int</span> capacity<span class="token punctuation">;</span>   <span class="token comment">//定义栈的容量</span><span class="token punctuation">&#125;</span>Stack<span class="token punctuation">;</span>Stack <span class="token operator">*</span><span class="token function">myStackCreate</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Stack <span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token punctuation">(</span>Stack <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Stack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//申请栈</span>    stack<span class="token operator">-></span>stk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> capacity<span class="token punctuation">)</span><span class="token punctuation">;</span>    stack<span class="token operator">-></span>stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                             <span class="token comment">//初始化栈顶指针</span>    stack<span class="token operator">-></span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span>    <span class="token keyword">return</span> stack<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">StackPush</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//一般要加上是否栈已满的判断</span>    obj<span class="token operator">-></span>stk<span class="token punctuation">[</span>obj<span class="token operator">-></span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>     <span class="token comment">//入栈操作</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">StackPeek</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//获取栈顶元素</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>stk_top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token operator">-></span>stk<span class="token punctuation">[</span>obj<span class="token operator">-></span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">StackPop</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>obj<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>stk_top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token operator">*</span>ret <span class="token operator">=</span> obj<span class="token operator">-></span>stk<span class="token punctuation">[</span><span class="token operator">--</span>obj<span class="token operator">-></span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//引用形式，将栈顶元素赋给ret</span><span class="token punctuation">&#125;</span>bool <span class="token function">isStackEmpty</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>stk_top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>      <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">StackFree</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>stk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Stack <span class="token operator">*</span>inStack<span class="token punctuation">;</span>     <span class="token comment">//入队栈</span>    Stack <span class="token operator">*</span>outStack<span class="token punctuation">;</span>    <span class="token comment">//出队栈</span><span class="token punctuation">&#125;</span> MyQueue<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">in2out</span><span class="token punctuation">(</span>Stack <span class="token operator">*</span>inStack<span class="token punctuation">,</span> Stack <span class="token operator">*</span>outStack<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//实现两个栈的元素转移</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStackEmpty</span><span class="token punctuation">(</span>inStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>        <span class="token function">StackPush</span><span class="token punctuation">(</span>outStack<span class="token punctuation">,</span> inStack<span class="token operator">-></span>stk<span class="token punctuation">[</span>inStack<span class="token operator">-></span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">StackPop</span><span class="token punctuation">(</span>inStack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>MyQueue<span class="token operator">*</span> <span class="token function">myQueueCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyQueue <span class="token operator">*</span>queue <span class="token operator">=</span> <span class="token punctuation">(</span>MyQueue <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queue<span class="token operator">-></span>inStack <span class="token operator">=</span> <span class="token function">myStackCreate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建入队栈</span>    queue<span class="token operator">-></span>outStack <span class="token operator">=</span> <span class="token function">myStackCreate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//创建出队栈</span>    <span class="token keyword">return</span> queue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myQueuePush</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">StackPush</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>inStack<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//入队，将元素压入入队栈</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myQueuePop</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStackEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//出队栈不为空，直接返回栈顶元素并弹出栈顶</span>        <span class="token function">StackPop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">in2out</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>inStack<span class="token punctuation">,</span> obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//出队栈为空，进行元素转移</span>    <span class="token function">StackPop</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">,</span> <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myQueuePeek</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStackEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">StackPeek</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">in2out</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>inStack<span class="token punctuation">,</span> obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//出队栈为空，进行元素转移</span>    <span class="token keyword">return</span> <span class="token function">StackPeek</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">myQueueEmpty</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">isStackEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>inStack<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isStackEmpty</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myQueueFree</span><span class="token punctuation">(</span>MyQueue<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">StackFree</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>inStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">StackFree</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>outStack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-用队列实现栈"><a href="#2-用队列实现栈" class="headerlink" title="  2 用队列实现栈 "></a><h2> <span id="Tag2"> 2 用队列实现栈 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/implement-stack-using-queues/" title="225. 用队列实现栈">225. 用队列实现栈</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（<code>push</code>、<code>top</code>、<code>pop</code> 和 <code>empty</code>）。</p><p>实现 <code>MyStack</code> 类：</p><ul><li><code>void push(int x)</code> 将元素 x 压入栈顶。</li><li><code>int pop()</code> 移除并返回栈顶元素。</li><li><code>int top()</code> 返回栈顶元素。</li></ul><p>注意：</p><ul><li>你只能使用队列的基本操作 —— 也就是 <code>push to back</code>、<code>peek/pop from front</code>、<code>size</code> 和 <code>is empty</code> 这些操作。</li><li>你所使用的语言也许不支持队列。 你可以使用 <code>list</code> （列表）或者 <code>deque</code>（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [“MyStack”, “push”, “push”, “top”, “pop”, “empty”]<br>[[], [1], [2], [], [], []]<br><strong>输出:</strong> </p><p><strong>解释:</strong><br>MyStack myStack = new MyStack();<br>myStack.push(1);<br>myStack.push(2);<br>myStack.top(); // 返回 2<br>myStack.pop(); // 返回 2<br>myStack.empty(); // 返回 False</p></blockquote><p><strong>进阶</strong>：你能否仅用一个队列来实现栈。</p><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;栈为“先入后出”(<code>FILO</code>)的数据结构，而队列则是“先入先出”(<code>FIFO</code>),为通过队列来实现栈的操作，可以通过建立两个队列来完成。当元素入栈时，将其压入队列<code>2</code>，然后将队列<code>1</code>中的所有元素出队并压入队列<code>2</code>,这样就可以实现<code>FILO</code>。为了在调用过程中需要判断队列<code>1</code>还是队列<code>2</code>哪个为空来作为入栈的选择，出队时也要先判断哪个队列不为空从而输出该队列的队头。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q1<span class="token punctuation">,</span> q2<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">one2two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//将队列1元素转移到队列2</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">two2one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//将队列2元素转移到队列1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>q2<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//此时元素在队列2中，因而这次把队列1作为容器</span>            q1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//先压入队列1</span>            <span class="token function">two2one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将队列2元素压入队列1</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>          <span class="token comment">//此时元素在队列1中，因而这次把队列2作为容器</span>            q2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">one2two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>q2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//两个队列均为空则栈为空</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> q2<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//判断元素现在在哪个队列，输出对应的队头</span>        <span class="token keyword">return</span> q1<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>q1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            q2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            q1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> front1<span class="token punctuation">,</span> rear1<span class="token punctuation">,</span> front2<span class="token punctuation">,</span> rear2<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MyQueue<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    MyQueue <span class="token operator">*</span>stack<span class="token punctuation">;</span>    MyQueue <span class="token operator">*</span>tmpQueue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MyStack<span class="token punctuation">;</span>MyStack<span class="token operator">*</span> <span class="token function">myStackCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyStack <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>tmpQueue <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    front1 <span class="token operator">=</span> rear1 <span class="token operator">=</span> front2 <span class="token operator">=</span> rear2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myStackPush</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token operator">-></span>tmpQueue<span class="token operator">-></span>arr<span class="token punctuation">[</span>rear2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front1 <span class="token operator">!=</span> rear1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>tmpQueue<span class="token operator">-></span>arr<span class="token punctuation">[</span>rear2<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token operator">-></span>stack<span class="token operator">-></span>arr<span class="token punctuation">[</span>front1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    front1 <span class="token operator">=</span> rear1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front2 <span class="token operator">!=</span> rear2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>stack<span class="token operator">-></span>arr<span class="token punctuation">[</span>rear1<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token operator">-></span>tmpQueue<span class="token operator">-></span>arr<span class="token punctuation">[</span>front2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    front2 <span class="token operator">=</span> rear2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myStackPop</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> obj<span class="token operator">-></span>stack<span class="token operator">-></span>arr<span class="token punctuation">[</span>front1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myStackTop</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> obj<span class="token operator">-></span>stack<span class="token operator">-></span>arr<span class="token punctuation">[</span>front1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">myStackEmpty</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>front1 <span class="token operator">==</span> rear1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myStackFree</span><span class="token punctuation">(</span>MyStack<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>tmpQueue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-有效的括号"><a href="#3-有效的括号" class="headerlink" title="  3 有效的括号 "></a><h2> <span id="Tag3"> 3 有效的括号 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="20. 有效的括号">20. 有效的括号</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;&#123;&#39;</code>，<code>&#39;&#125;&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串 <code>s</code> ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “()”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “()[]{}”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “(]”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> s = “([)]”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例5:</strong></p><blockquote><p><strong>输入:</strong> s = “{[]}”<br><strong>输出:</strong> true</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;创建一个栈，当遇到左括号就将该符号进栈；遇到右括号就检查栈顶元素是否与该符号构成一对符号，若是则继续对字符串进行遍历，否则说明出现不成对的括号，返回<code>false</code>. 完成遍历后，如果栈内还有元素，则说明字符串中有不成对的括号，返回<code>false</code>；若栈为空说明字符串中的括号都一一匹配，返回<code>true</code>。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">char</span> <span class="token function">getPair</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ch <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">']'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ch <span class="token operator">=</span> <span class="token char">'['</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ch <span class="token operator">=</span> <span class="token char">'&#123;'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span>s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'('</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">'['</span> <span class="token operator">||</span> ch <span class="token operator">==</span><span class="token char">'&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getPair</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token function">getPairs</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">')'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token char">'('</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">']'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token char">'['</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token operator">==</span><span class="token char">'&#125;'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token char">'&#123;'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>stack <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stack_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getPairs</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stack_top<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>stack<span class="token punctuation">[</span>stack_top<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> false<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stack_top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stack_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack_top<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-删除字符串中的所有相邻重复项"><a href="#4-删除字符串中的所有相邻重复项" class="headerlink" title="  4 删除字符串中的所有相邻重复项 "></a><h2> <span id="Tag4"> 4 删除字符串中的所有相邻重复项 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/" title="1047. 删除字符串中的所有相邻重复项">1047. 删除字符串中的所有相邻重复项</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给出由小写字母组成的字符串 <code>S</code>，<strong>重复项删除操作</strong>会选择两个相邻且相同的字母，并删除它们。</p><p>在 <code>S</code> 上反复执行重复项删除操作，直到无法继续删除。</p><p>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> “abbaca”<br><strong>输出:</strong> “ca”<br><strong>解释:</strong><br>例如，在 “abbaca” 中，我们可以删除 “bb” 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 “aaca”，其中又只有 “aa” 可以执行重复项删除操作，所以最后的字符串为 “ca”。</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;创建一个栈，遍历字符串，每次先判断当前遍历字符是否与栈顶元素相等，如果相等则可以消掉，即将该元素出栈(题目中只可以对两个相邻的相同字母进行抵消，连续三个相同的字符也只能消两个，其实这里加一个循环即可实现)；如果不同则将该字符进栈。遍历完成后将栈内元素输出到答案字符串中，但由于栈输出的方向与实际方向相反，所以需要对答案字符串进行反转，最后得到最终的答案字符串。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> ch <span class="token operator">==</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">stringReversal</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> strSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> strSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">,</span>r<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> tmp <span class="token operator">=</span> str<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        str<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>stk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stk_top <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> stk<span class="token punctuation">[</span>stk_top <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stk<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            stk_top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> stk<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">stringReversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-逆波兰表达式求值"><a href="#5-逆波兰表达式求值" class="headerlink" title="  5 逆波兰表达式求值 "></a><h2> <span id="Tag5"> 5 逆波兰表达式求值 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/" title="150. 逆波兰表达式求值">150. 逆波兰表达式求值</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>根据 <code>逆波兰表示法</code>，求表达式的值。</p><p>有效的算符包括 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p><strong>注意</strong> 两个整数之间的除法只保留整数部分。</p><p>可以保证给定的逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> tokens = [“2”,”1”,”+”,”3”,”<em>“]<br><strong>输出:</strong> 9<br><strong>解释:</strong> 该算式转化为常见的中缀算术表达式为：((2 + 1) </em> 3) = 9</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> tokens = [“4”,”13”,”5”,”/“,”+”]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> tokens = [“10”,”6”,”9”,”3”,”+”,”-11”,”<em>“,”/“,”</em>“,”17”,”+”,”5”,”+”]<br><strong>输出:</strong> 22<br><strong>解释:</strong> 该算式转化为常见的中缀算术表达式为：<br> ((10 <em> (6 / ((9 + 3) </em> -11))) + 17) + 5<br>= ((10 <em> (6 / (12 </em> -11))) + 17) + 5<br>= ((10 <em> (6 / -132)) + 17) + 5<br>= ((10 </em> 0) + 17) + 5<br>= (0 + 17) + 5<br>= 17 + 5<br>= 22</p></blockquote><p><strong>逆波兰表达式</strong>：</p><p>逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。</p><ul><li>平常使用的算式则是一种中缀表达式，如 <code>( 1 + 2 ) * ( 3 + 4 )</code> 。</li><li>该算式的逆波兰表达式写法为 <code>( ( 1 2 + ) ( 3 4 + ) * )</code> 。</li></ul><p>逆波兰表达式主要有以下两个优点：</p><ul><li>去掉括号后表达式无歧义，上式即便写成 <code>1 2 + 3 4 + *</code> 也可以依据次序计算出正确结果。</li><li>适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中</li></ul><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;创建一个栈，将遍历整个<code>tokens</code>, <strong>遇到数字就进栈，遇到符号就将栈顶两个元素取出进行相应的运算，然后将运算结果入栈</strong> ，直到整个<code>tokens</code>遍历完成。应该注意，<code>tokens[i]</code>的第一位出现<code>-</code>号可能是数字，也可能是运算符，需要进行判断，最简单的就是判断其长度，为<code>1</code>说明就是运算符。其次，还要注意 <strong>运算的顺序</strong> ，栈顶元素为运算符后的数字，而栈顶第二个元素是运算符前的数字。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">bool</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token operator">++</span>ptr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> ptr <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>ptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            res <span class="token operator">+=</span> str<span class="token punctuation">[</span>ptr<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> flag <span class="token operator">?</span> <span class="token operator">-</span>res <span class="token operator">:</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">,</span> <span class="token keyword">char</span> token<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> num1<span class="token operator">-</span>num2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>token <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">return</span> num1<span class="token operator">*</span>num2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> num1 <span class="token operator">/</span> num2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string str<span class="token operator">:</span> tokens<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token char">'0'</span> <span class="token operator">||</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token char">'9'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> num2 <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num1<span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                num1 <span class="token operator">=</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">getNum</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code>实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">isNegative</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">isNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNegative</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'-'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'+'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'*'</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    bool Negative <span class="token operator">=</span> <span class="token function">isNegative</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>Negative<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        index<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token punctuation">(</span>str<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Negative <span class="token operator">?</span> <span class="token operator">-</span>num <span class="token operator">:</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>ret<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>ret <span class="token operator">=</span> left <span class="token operator">+</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>ret <span class="token operator">=</span> left <span class="token operator">-</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>ret <span class="token operator">=</span> left <span class="token operator">*</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>ret <span class="token operator">=</span> left <span class="token operator">/</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span> tokens<span class="token punctuation">,</span> <span class="token keyword">int</span> tokensSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> stack<span class="token punctuation">[</span><span class="token number">5001</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tokensSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isNum</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//return stk_top;</span>        <span class="token keyword">int</span> left  <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">cal</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> stack<span class="token operator">+</span>stk_top<span class="token punctuation">)</span><span class="token punctuation">;</span>        stk_top<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> stack<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-滑动窗口最大值"><a href="#6-滑动窗口最大值" class="headerlink" title="  6 滑动窗口最大值 "></a><h2> <span id="Tag6"> 6 滑动窗口最大值 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/sliding-window-maximum/" title="239. 滑动窗口最大值">239. 滑动窗口最大值</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个整数数组 <code>nums</code>，有一个大小为 <code>k</code> 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 <code>k</code> 个数字。滑动窗口每次只向右移动一位。</p><p>返回 <em>滑动窗口中的最大值</em> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,3,-1,-3,5,3,6,7], k = 3<br><strong>输出:</strong> [3,3,5,5,6,7]<br><strong>解释:</strong><br>滑动窗口的位置&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;最大值<br>-———————&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;——-<br>[1&emsp;3&emsp;-1]&emsp;-3&emsp;5&emsp;3&emsp;6&emsp;7&emsp;&emsp;3<br>1&emsp;[3&emsp;-1&emsp;-3]&emsp;5&emsp;3&emsp;6&emsp;7&emsp;&emsp;3<br>1&emsp;3&emsp;[-1&emsp;-3&emsp;5]&emsp;3&emsp;6&emsp;7&emsp;&emsp;5<br>1&emsp;3&emsp;-1&emsp;[-3&emsp;5&emsp;3]&emsp;6&emsp;7&emsp;&emsp;5<br>1&emsp;3&emsp;-1&emsp;-3&emsp;[5&emsp;3&emsp;6]&emsp;7&emsp;&emsp;6<br>1&emsp;3&emsp;-1&emsp;-3&emsp;5&emsp;[3&emsp;6&emsp;7]&emsp;&emsp;7</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1], k = 1<br><strong>输出:</strong> [1]</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;题目要求每个滑动窗口的最大值，那么就希望能够用一个数组去存放窗口滑动过程中的最大值，但是有一个问题，当目前的最大值不在窗口内需要将其弹出，然后最大值就变成原本数组中的次大值或者当前窗口的最后一个数字。</p><p>&emsp;&emsp;基于上边的思路，可以采用双端单调队列，队头为当前最大值，沿正向方向呈递减趋势。遍历数组，当当前数字大于队尾元素时将队尾元素弹出，否则将当前数字插入队尾，从而保证队列为单调队列，然后每次移动窗口时只需要将队头元素对应的数字插入答案即可。<strong>注意，每次移动窗口需要判断队头元素在不在窗口内，如果不在需要先将队头弹出</strong>。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> deq<span class="token punctuation">;</span>     <span class="token comment">//创建双端队列</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>deq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">==</span>deq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                deq<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果队头不在窗口内，则弹出</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>deq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>deq<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                deq<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果队尾元素小于窗口最右侧数值，则将队尾弹出</span>            <span class="token punctuation">&#125;</span>            deq<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//将窗口最右端元素插入队尾</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//此时才到达窗口最右端，进行答案插入</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>deq<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>注意</strong>：上述代码中是从数组开头遍历，需要遍历到第一个窗口的最右端时才开始将队头元素插入到答案中。</p></blockquote><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> queue<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>numsSize <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize <span class="token operator">-</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rear<span class="token operator">!=</span>front <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>rear<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> rear<span class="token operator">--</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>numsSize<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rear<span class="token operator">!=</span>front <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>rear<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> rear<span class="token operator">--</span><span class="token punctuation">;</span>        queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span>k<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">)</span> front<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ret<span class="token punctuation">[</span>numsSize<span class="token operator">-</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>queue<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-前-K-个高频元素"><a href="#7-前-K-个高频元素" class="headerlink" title="  7 前 K 个高频元素 "></a><h2> <span id="Tag7"> 7 前 K 个高频元素 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/top-k-frequent-elements/" title="347. 前 K 个高频元素">347. 前 K 个高频元素</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个整数数组 <code>nums</code> 和一个整数 <code>k</code> ，请你返回其中出现频率前 <code>k</code> 高的元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,1,1,2,2,3], k = 2<br><strong>输出:</strong> [1,2]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [1], k = 1<br><strong>输出:</strong> [1]</p></blockquote><p><strong>进阶</strong>：你所设计算法的时间复杂度 <strong>必须</strong> 优于 <code>O(n log n)</code> ，其中 <code>n</code> 是数组大小。</p><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><ul><li>哈希：遍历整个数组，以元素值为键插入哈希表中，如果当前元素在哈希表中已经存在，则该键对应的值加<code>1</code>. 然后对哈希表按值进行排序，最后直接输出值前<code>k</code>大所对应的键即可. 这种做法时间复杂度为<code>O(nlogn)</code>。</li></ul><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><p><code>Cpp</code> 实现</p></li><li><p><code>C</code> 实现</p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>HashMap<span class="token punctuation">;</span>bool <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>HashMap <span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token operator">-></span>val <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>HashMap <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从大到小</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HashMap <span class="token operator">*</span>map <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> nums<span class="token operator">+</span>i<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp<span class="token operator">-></span>val<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> <span class="token punctuation">(</span>HashMap<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashMap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp<span class="token operator">-></span>key <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            tmp<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">HASH_SORT</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    HashMap <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> map<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-></span>key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">HASH_DEL</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;404…</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
            <tag> 双端队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch5-of-programmercarl</title>
      <link href="/2022/04/18/ch5-of-programmercarl/"/>
      <url>/2022/04/18/ch5-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">27. 移除元素</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">344. 反转字符串</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">剑指 Offer 05. 替换空格</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">151.翻转字符串里的单词</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">206.反转链表</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">19.删除链表的倒数第N个节点</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">面试题 02.07. 链表相交</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">142.环形链表II</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">15. 三数之和</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">18. 四数之和</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-移除元素"><a href="#1-移除元素" class="headerlink" title="  1 移除元素 "></a><h2> <span id="Tag1"> 1 移除元素 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-element/" title="27. 移除元素">27. 移除元素</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong>原地</strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地</strong> 修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [3,2,2,3], val = 3<br><strong>输出:</strong> 2, nums = [2,2]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [0,1,2,2,3,0,4,2], val = 2<br><strong>输出:</strong> 5, nums = [0,1,4,0,3]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>设置两个指针，首先判断快指针对应的数组中的值是否等于 <code>val</code>， 如果是则不进行操作，如果不等于则说明这个当前遍历到的元素应该进行保留，因而将其赋给慢指针指向的位置。整体的思路就是遍历一遍数组，遇到与 <code>val</code> 不一样的元素就把该元素插到原数组的前端(用慢指针指定位置)，最后返回慢指针即为答案。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>order<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> order<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-反转字符串"><a href="#2-反转字符串" class="headerlink" title="  2 反转字符串 "></a><h2> <span id="Tag2"> 2 反转字符串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string/" title="344. 反转字符串">344. 反转字符串</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 <code>O(1)</code> 的额外空间解决这一问题。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = [“h”,”e”,”l”,”l”,”o”]<br><strong>输出:</strong> [“o”,”l”,”l”,”e”,”h”]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = [“H”,”a”,”n”,”n”,”a”,”h”]<br><strong>输出:</strong> [“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>设置两个指针，分别指向<code>vector</code>的头和尾，然后两两进行交换，交换完成则头指针后移、尾指针前移直至二者相遇。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> sSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sSize<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>sSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-替换空格"><a href="#3-替换空格" class="headerlink" title="  3 替换空格 "></a><h2> <span id="Tag3"> 3 替换空格 </span></h2></h3><ul><li>题目链接：<a href="\https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" title="剑指 Offer 05. 替换空格">剑指 Offer 05. 替换空格</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “We are happy.”<br><strong>输出:</strong> “We%20are%20happy.”</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>遍历<code>s</code>，当当前字符不为空格时直接将当前字符加到答案<code>res</code>后边，否则则在<code>res</code>后边加上<code>&quot;%20&quot;</code>即可。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> ch<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmpChar<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'%'</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token comment">//strcat(res, tmpChar);</span>            <span class="token comment">//index += 3;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>C</code> 实现中记得最后在答案<code>res</code>的末端加上空字符<code>\0</code>, 否则报错.</p></blockquote><h3 id="4-颠倒字符串中的单词"><a href="#4-颠倒字符串中的单词" class="headerlink" title="  4 颠倒字符串中的单词 "></a><h2> <span id="Tag4"> 4 颠倒字符串中的单词 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/" title="151. 颠倒字符串中的单词">151. 颠倒字符串中的单词</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个字符串 <code>s</code> ，颠倒字符串中 <strong>单词</strong> 的顺序。</p><p>单词 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 单词 之间用单个空格连接的结果字符串。</p><p><strong>注意</strong>：输入字符串 <code>s</code> 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “the sky is blue”<br><strong>输出:</strong> “blue is sky the”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “  hello world  “<br><strong>输出:</strong> “world hello”</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “a good   example”<br><strong>输出:</strong> “example good a”</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>先将<code>s</code> 的头尾多余的空格去掉，然后遍历<code>s</code>并将当前的字符插入到<code>res</code>中，注意，当单词间出现多余的空格直接<code>continue</code>。遍历完成后，将<code>res</code>翻转，然后遍历<code>res</code>，一遇到空格就将当前的单词翻转。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token operator">++</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>l<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>         right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> fast<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fast<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//处理前后、单词间多余的空格</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>fast<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> slow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> slow<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        left <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-反转链表"><a href="#5-反转链表" class="headerlink" title="  5 反转链表 "></a><h2> <span id="Tag5"> 5 反转链表 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/" title="206. 反转链表">206. 反转链表</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/206_1.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,3,4,5]<br><strong>输出:</strong> [5,4,3,2,1]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/206_2.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2]<br><strong>输出:</strong> [2,1]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> head = []<br><strong>输出:</strong> []</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;添加一个虚拟节点 <code>pre</code> 并置为 <code>nullptr</code> ,用 <code>cur</code> 遍历原链表，每次将 <code>cur</code> 的 <code>next</code> 指向 <code>pre</code>, 然后将 <code>cur</code> 和 <code>prev</code> 后移一位。由于 <code>cur</code> 后移前其 <code>next</code> 指向已经改变，即指向了上一个节点，因而我们无法通过 <code>cur-&gt;next</code> 来访问原链表中 <code>cur</code> 的下一个节点，因而在修改 <code>cur</code> 的 <code>next</code> 指向前将 <code>cur-&gt;next</code> 存起来。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//递归版</span><span class="token comment">/*struct ListNode* reverseList(struct ListNode* head)&#123;    if(head == NULL||head->next == NULL)&#123;        return head;    &#125;    struct ListNode* newHead;    newHead = reverseList(head->next);  //newHead是最后一层的return，这里赋给倒数第二层的newhead    head->next->next = head;            //然后倒数第二次return那个newhead，一直循环不变    head->next = NULL;    return newHead;         //所以这里return的其实就是最后一层的head&#125;*/</span><span class="token comment">//迭代版</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-删除链表的倒数第-N-个结点"><a href="#6-删除链表的倒数第-N-个结点" class="headerlink" title="  6 删除链表的倒数第 N 个结点 "></a><h2> <span id="Tag6"> 6 删除链表的倒数第 N 个结点 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" title="19. 删除链表的倒数第 N 个结点">19. 删除链表的倒数第 N 个结点</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/19_1.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,3,4,5], n = 2<br><strong>输出:</strong> [1,2,3,5]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> head = [1], n = 1<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> head = [1,2], n = 1<br><strong>输出:</strong> [1]</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;双指针典型题目。快指针先向后移动 <code>n</code> 步，然后快慢指针同步向后移动，当快指针的 <code>next</code> 指向 <code>nullptr</code> 时，慢指针的 <code>next</code> 恰好指向倒数第 <code>n</code> 个节点，然后直接<code>slow-&gt;next = slow-&gt;next-&gt;next</code>，即将慢指针的 <code>next</code> 指向下下个节点。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            slow<span class="token operator">-></span>next <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>left <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        right <span class="token operator">=</span> right<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        right<span class="token operator">=</span>right<span class="token operator">-></span>next<span class="token punctuation">;</span>        left<span class="token operator">=</span>left<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    left<span class="token operator">-></span>next <span class="token operator">=</span> left<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-链表相交"><a href="#7-链表相交" class="headerlink" title="  7 链表相交 "></a><h2> <span id="Tag7"> 7 链表相交 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/" title="面试题 02.07. 链表相交">面试题 02.07. 链表相交</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你两个单链表的头节点 <code>headA</code> 和 <code>headB</code> ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 <code>null</code> 。</p><p>图示两个链表在节点 <code>c1</code> 开始相交：</p><p><img src="/2022/04/18/ch5-of-programmercarl/02_07_0.png" alt></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p>注意，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/02_07_1.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br><strong>输出:</strong> Intersected at ‘8’</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/02_07_2.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br><strong>输出:</strong> Intersected at ‘2’</p></blockquote><p><strong>示例3:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/02_07_3.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br><strong>输出:</strong> null</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;创建两个指针分别遍历两个链表，如果出现 <code>ptr1 == ptr2</code>, 则说明找到交点，而当两个指针指向<code>nullptr</code>, 将其指向另一个链表的表头，如果有交点，那么这样过后就一定会在交点相遇。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>ptrA <span class="token operator">=</span> headA<span class="token punctuation">,</span> <span class="token operator">*</span>ptrB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptrA <span class="token operator">!=</span> ptrB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptrA<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptrA <span class="token operator">=</span> headB<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ptrA <span class="token operator">=</span> ptrA<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptrB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptrB <span class="token operator">=</span> headA<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ptrB <span class="token operator">=</span> ptrB<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ptrA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>headA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>headB<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pA <span class="token operator">=</span>headA<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pB <span class="token operator">=</span>headB<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pA<span class="token operator">!=</span>pB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pA <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pA <span class="token operator">=</span> pA<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pB<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pB <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pB <span class="token operator">=</span> pB<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-环形链表-II"><a href="#8-环形链表-II" class="headerlink" title="  8 环形链表 II "></a><h2> <span id="Tag8"> 8 环形链表 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" title="142. 环形链表 II">142. 环形链表 II</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（<strong>索引从 <code>0</code> 开始</strong>）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。<strong>注意：<code>pos</code> 不作为参数进行传递</strong>，仅仅是为了标识链表的实际情况。</p><p><strong>不允许修改</strong> 链表。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/142_1.png" alt></p><blockquote><p><strong>输入:</strong> head = [3,2,0,-4], pos = 1<br><strong>输出:</strong> 返回索引为 1 的链表节点</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/142_2.png" alt></p><blockquote><p><strong>输入:</strong> head = [1,2], pos = 0<br><strong>输出:</strong> 返回索引为 0 的链表节点</p></blockquote><p><strong>示例3:</strong></p><p><img src="/2022/04/18/ch5-of-programmercarl/142_3.png" alt></p><blockquote><p><strong>输入:</strong> head = [1], pos = -1<br><strong>输出:</strong> 返回 null</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>&emsp;&emsp;设置两个指针，快指针 <code>fast</code> 每次走两步， 慢指针 <code>slow</code> 每次走一步。</p><p>&emsp;&emsp;<code>fast</code> 先进入环，<code>slow</code> 需要走 <code>a</code> 步才到达环的入口，此时 <code>fast</code> 已经走了 <code>2a</code> 步。当 <code>slow</code> 到达环入口，设此时 <code>fast</code> 与 <code>slow</code> 之间的距离为 <code>x</code>. </p><p>&emsp;&emsp;<code>fast</code> 什么时候能追上 <code>slow</code> 实现“套圈”呢？由于 <code>fast</code> 与 <code>slow</code> 间的距离每步缩小 <code>1</code>,那么 <code>slow</code> 走 <code>x</code> 步时 <code>fast</code> 就可以追上 <code>slow</code> . <strong>注意</strong>：当 <code>slow</code> 到达环入口时两个指针间的距离<code>x</code> 是必定小于环的长度 (可能为 <code>0</code> ).即慢指针一圈还没走完就会被快指针追上. 设相遇点距离入环点<code>b</code>，则有(设相遇时快指针已经走了 <code>n</code> 圈)</p><script type="math/tex; mode=display">s_{slow} = a + b</script><script type="math/tex; mode=display">s_{fast} = a + b + n*(b+c) = 2*s_{slow}</script><p>得：</p><script type="math/tex; mode=display">a + b + n(b+c) = 2a +2b</script><p>即</p><script type="math/tex; mode=display">a = c + (n-1)(b+c)</script><p>&emsp;&emsp;那么想要知道入环点，有一种直接得方法就是让指针自己走到入环点，如何实现？通过上式可以得知，让慢指针走<code>c + (n-1)(b+c)</code>, 同时让一个从链表头出发的指针按相同的速度行走，那么必定会在环入口相遇。为什么呢？让慢指针走<code>c + (n-1)(b+c)</code>其实就是走完当前的那一圈，然后再走(n-1)圈，这段距离恰好就是链表头到环入口的距离，所以二者就在环入口相遇。</p><p><img src="/2022/04/18/ch5-of-programmercarl/142_ans.png" alt></p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fast <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>                    slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> fast<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span><span class="token operator">*</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>fast<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fast<span class="token operator">=</span>fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                ptr<span class="token operator">=</span>ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-三数之和"><a href="#9-三数之和" class="headerlink" title="  9 三数之和 "></a><h2> <span id="Tag9"> 9 三数之和 </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/3sum/">15. 三数之和</a> “15. 三数之和”)</li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <code>a，b，c</code> ，使得 <code>a + b + c = 0</code> ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [-1,0,1,2,-1,-4]<br><strong>输出:</strong> [[-1,-1,2],[-1,0,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = []<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> [0]<br><strong>输出:</strong> []</p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>&emsp;&emsp;先将数组进行排序，然后分别用<code>first</code>、<code>second</code>和<code>third</code>分别指代第一、第二和第三个选取的数字的索引，用 <code>first</code> 遍历数组，然后 <code>target</code> 设为 <code>-nums[first]</code>(题目要三数之和为 <code>0</code> )，然后<code>second</code> 赋为 <code>first + 1</code>, 而<code>third</code> 赋为 <code>nums.size()-1</code>,进行循环判断<code>nums[second] + nums[third]</code> 是否等于 <code>target</code>，若是则将三个索引插入答案，并将<code>second</code>和<code>third</code>向中间移动(要移动到不等于上一个值的地方，因为题目规定 <strong>不能出现重复的三元组</strong>); 若<code>nums[second] + nums[third]</code> 小于 <code>target</code>，则应该试图把第二和第三的加和变大，所以将 <code>second</code> 右移一位；若<code>nums[second] + nums[third]</code> 大于 <code>target</code>，则应该试图把第二和第三的加和变小，所以将 <code>third</code> 左移一位。</p><p>&emsp;&emsp;这题不大适用哈希表，因为题目规定 <strong>不能出现重复的三元组</strong>，如果用哈希表的话，插入完成后需要遍历答案进行去重。</p><p><span id="codeof_tag9">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>second<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                 ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left <span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这两行划重点！！！！！！！</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-四数之和"><a href="#10-四数之和" class="headerlink" title="  10 四数之和 "></a><h2> <span id="Tag10"> 10 四数之和 </span></h2></h3><ul><li>题目链接：<a href="[link_here](https://leetcode-cn.com/problems/4sum/">18. 四数之和</a> “18. 四数之和”)</li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且不重复的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a</code>、<code>b</code>、<code>c</code> 和 <code>d</code> 互不相同</li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,0,-1,0,-2,2], target = 0<br><strong>输出:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,2,2,2,2], target = 8<br><strong>输出:</strong> [[2,2,2,2]]</p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>思路和”三数之和”思路一致，只是多加了一层 <code>for</code> 循环即可，时间复杂度为 $O(n^3logn)$</p><p><span id="codeof_tag10">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">fourSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>second <span class="token operator">></span> first<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> rest <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> third <span class="token operator">=</span> second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fourth <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>fourth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>third<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token operator">--</span>fourth<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>      <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token operator">*</span> n<span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>n <span class="token operator">*</span>n <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> first<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fourth <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>fourth <span class="token operator">></span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>fourth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>fourth <span class="token operator">></span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    third<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    fourth<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;404…</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch4-of-programmercarl</title>
      <link href="/2022/04/18/ch4-of-programmercarl/"/>
      <url>/2022/04/18/ch4-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">344. 反转字符串</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">541. 反转字符串 II</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">剑指 Offer 05. 替换空格</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">151. 颠倒字符串中的单词</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">剑指 Offer 58 - II. 左旋转字符串</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">28. 实现 strStr()</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">459. 重复的子字符串</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-反转字符串"><a href="#1-反转字符串" class="headerlink" title="  1  反转字符串 "></a><h2> <span id="Tag1"> 1  反转字符串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string/" title="344. 反转字符串">344. 反转字符串</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 <code>s</code> 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须<strong>原地修改输入数组</strong>、使用 <code>O(1)</code> 的额外空间解决这一问题。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = [“h”,”e”,”l”,”l”,”o”]<br><strong>输出:</strong> [“o”,”l”,”l”,”e”,”h”]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = [“H”,”a”,”n”,”n”,”a”,”h”]<br><strong>输出:</strong> [“h”,”a”,”n”,”n”,”a”,”H”]</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>设置两个指针，分别指向<code>vector</code>的头和尾，然后两两进行交换，交换完成则头指针后移、尾指针前移直至二者相遇。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> sSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sSize<span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>sSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-反转字符串-II"><a href="#2-反转字符串-II" class="headerlink" title="  2 反转字符串 II "></a><h2> <span id="Tag2"> 2 反转字符串 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-string-ii/" title="541. 反转字符串 II">541. 反转字符串 II</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每计数至 <code>2k</code> 个字符，就反转这 <code>2k</code> 字符中的前 <code>k</code> 个字符。</p><ul><li>如果剩余字符少于 `k`` 个，则将剩余字符全部反转。</li><li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abcdefg”, k = 2<br><strong>输出:</strong> “bacdfeg”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “abcd”, k = 2<br><strong>输出:</strong> “bacd”</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;简单的模拟，题目给出两个条件：1.剩余字符少于<code>k</code>则全部翻转；2. 剩余字符大于 <code>k</code> 小于 <code>2k</code> 则翻转前 <code>k</code> 个字符。那么就有一种特殊情况，就是<code>k &gt; s.length()</code>, 此时这一题就是反转字符串了；然后进行循环对字符串进行反转，设置两个指针，分别指向待反转子串的起始与结尾，<code>l</code> 和 <code>r</code>，并初始化为<code>0</code>和<code>k-1</code>(即反转前<code>k</code>个字符)，然后进行反转，接着将<code>l</code> 和<code>r</code> 分别加上<code>2k</code>，也就是进行下一组子串的反转，当进入下一个循环前需要先进行判断：如果下一组的<code>l&gt;=s.length</code> 则说明已经反转完成，结束循环；如果下一组的<code>r&gt;=s.length</code>则说明是题目中说的第一种情况(剩余字符少于<code>k</code>)，将<code>r</code>更改为<code>s.length()-1</code>并进行循环。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">reverseStr</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">>=</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>                l <span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">,</span> r<span class="token operator">+=</span> <span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    r <span class="token operator">=</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nubbin <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">%</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nubbin <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>cnt<span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        s <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>cnt<span class="token operator">*</span>k<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-替换空格"><a href="#3-替换空格" class="headerlink" title="  3 替换空格 "></a><h2> <span id="Tag3"> 3 替换空格 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" title="剑指 Offer 05. 替换空格">剑指 Offer 05. 替换空格</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “We are happy.”<br><strong>输出:</strong> “We%20are%20happy.”</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>遍历<code>s</code>，当当前字符不为空格时直接将当前字符加到答案<code>res</code>后边，否则则在<code>res</code>后边加上<code>&quot;%20&quot;</code>即可。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">int</span> ptr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> ch<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">*</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> tmpChar<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'%'</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'2'</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token comment">//strcat(res, tmpChar);</span>            <span class="token comment">//index += 3;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>C</code> 实现中记得最后在答案<code>res</code>的末端加上空字符<code>\0</code>, 否则报错.</p></blockquote><h3 id="4-颠倒字符串中的单词"><a href="#4-颠倒字符串中的单词" class="headerlink" title="  4 颠倒字符串中的单词 "></a><h2> <span id="Tag4"> 4 颠倒字符串中的单词 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-words-in-a-string/" title="151. 颠倒字符串中的单词">151. 颠倒字符串中的单词</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个字符串 <code>s</code> ，颠倒字符串中 <strong>单词</strong> 的顺序。</p><p>单词 是由非空格字符组成的字符串。<code>s</code> 中使用至少一个空格将字符串中的 <strong>单词</strong> 分隔开。</p><p>返回 <strong>单词</strong> 顺序颠倒且 <strong>单词</strong> 之间用单个空格连接的结果字符串。</p><p><strong>注意</strong>：输入字符串 <code>s</code> 中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “the sky is blue”<br><strong>输出:</strong> “blue is sky the”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “  hello world  “<br><strong>输出:</strong> “world hello”</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “a good   example”<br><strong>输出:</strong> “example good a”</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>先将<code>s</code> 的头尾多余的空格去掉，然后遍历<code>s</code>并将当前的字符插入到<code>res</code>中，注意，当单词间出现多余的空格直接<code>continue</code>。遍历完成后，将<code>res</code>翻转，然后遍历<code>res</code>，一遇到空格就将当前的单词翻转。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>            <span class="token operator">++</span>l<span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">--</span>r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>l<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string res<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            l <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>  <span class="token operator">=</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">^</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>         right<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span> <span class="token operator">*</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span> fast<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fast<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> fast<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//处理前后、单词间多余的空格</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>fast<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> slow<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> slow<span class="token operator">&amp;&amp;</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span> right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        left <span class="token operator">=</span> right<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-左旋转字符串"><a href="#5-左旋转字符串" class="headerlink" title="  5 左旋转字符串 "></a><h2> <span id="Tag5"> 5 左旋转字符串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" title="剑指 Offer 58 - II. 左旋转字符串">剑指 Offer 58 - II. 左旋转字符串</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。比如，输入字符串”abcdefg”和数字2，该函数将返回左旋转两位得到的结果”cdefgab”。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abcdefg”, k = 2<br><strong>输出:</strong> “cdefgab”</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “lrloseumgh”, k = 6<br><strong>输出:</strong> “umghlrlose”</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>三种思路：</p><ul><li>切片，使用<code>substr()</code>将<code>s</code>切为两部分，然后进行拼接即可。</li><li>思路与第一种一样，只是不调用库函数，采用取余的方式<code>res[i] = s[(i+n)%s.length()]</code>,这样就可以把大于<code>n</code> 的部分前移<code>n</code>位，小于<code>n</code>的放在最后。</li><li>进行三次反转，首先翻转<code>0~(n-1)</code>,然后翻转<code>n~(s.length()-1)</code>，最后再对整个字符串进行翻转。</li></ul><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment">//第1种：</span>    <span class="token comment">/*string reverseLeftWords(string s, int n) &#123;        string res = "";        res = s.substr(n, s.length()-n);        res += s.substr(0, n);        return res;    &#125;*/</span>    <span class="token comment">//第2种：</span>    <span class="token comment">/*string reverseLeftWords(string s, int n) &#123;        string res = "";        for(int i = 0; i &lt; s.length(); i++)&#123;            res.push_back(s[(i+n)%s.length()]);        &#125;        return res;    &#125;*/</span>    <span class="token comment">//第3种：</span>    <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l <span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token operator">+</span>n<span class="token punctuation">,</span> len<span class="token operator">-</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-实现-strStr"><a href="#6-实现-strStr" class="headerlink" title="  6 实现 strStr() "></a><h2> <span id="Tag6"> 6 实现 strStr() </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/implement-strstr/" title="28. 实现 strStr()">28. 实现 strStr()</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>实现 <code>strStr()</code> 函数。</p><p>给你两个字符串 <code>haystack</code> 和 <code>needle</code> ，请你在 <code>haystack</code> 字符串中找出 <code>needle</code> 字符串出现的第一个位置（下标从 <code>0</code> 开始）。如果不存在，则返回  <code>-1</code> 。</p><p>说明：</p><p>当 <code>needle</code> 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。</p><p>对于本题而言，当 <code>needle</code> 是空字符串时我们应当返回 <code>0</code> 。这与 <code>C</code> 语言的 <code>strstr()</code> 以及 <code>Java</code> 的 <code>indexOf()</code> 定义相符。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> haystack = “hello”, needle = “ll”<br><strong>输出:</strong> 2</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> haystack = “aaaaa”, needle = “bba”<br><strong>输出:</strong> -1</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> haystack = “”, needle = “”<br><strong>输出:</strong> 0</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>字符串匹配，KMP算法。</p><p><span id="codeof_tag6">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNext</span><span class="token punctuation">(</span>string needle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">KMPSearch</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token function">calNext</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> i<span class="token operator">-</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">strStr</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">KMPSearch</span><span class="token punctuation">(</span>haystack<span class="token punctuation">,</span> needle<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><h3 id="7-重复的子字符串"><a href="#7-重复的子字符串" class="headerlink" title="  7 重复的子字符串 "></a><h2> <span id="Tag7"> 7 重复的子字符串 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/repeated-substring-pattern/" title="459. 重复的子字符串">459. 重复的子字符串</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给定一个非空的字符串 <code>s</code> ，检查是否可以通过由它的一个子串重复多次构成。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “abab”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “aba”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> s = “abcabcabcabc”<br><strong>输出:</strong> true</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;创建一个字符串<code>tmpstr</code>，令其值为<code>s+s</code>，即复制两边字符串<code>s</code>；如果字符串<code>s</code>可以由其一个子串重复多次构成，则在<code>tmpstr</code>中查找<code>s</code>，如果查找到的位置小于<code>s.length()</code>，则返回true，否则返回false。</p><p><span id="codeof_tag7">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">calNext</span><span class="token punctuation">(</span>string needle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">next</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>needle<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">KMPSearch</span><span class="token punctuation">(</span>string haystack<span class="token punctuation">,</span> string needle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token function">calNext</span><span class="token punctuation">(</span>needle<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">=</span> haystack<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> needle<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>k <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                k <span class="token operator">=</span> next<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>haystack<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> needle<span class="token punctuation">[</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>k<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">==</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">KMPSearch</span><span class="token punctuation">(</span>s<span class="token operator">+</span>s<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;要学会KMP！！！</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch3-of-programmercarl</title>
      <link href="/2022/04/18/ch3-of-programmercarl/"/>
      <url>/2022/04/18/ch3-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">242. 有效的字母异位词</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">349. 两个数组的交集</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">202. 快乐数</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">1. 两数之和</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">454. 四数相加 II</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">383. 赎金信</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">15. 三数之和</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">18. 四数之和</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-有效的字母异位词"><a href="#1-有效的字母异位词" class="headerlink" title="  1 有效的字母异位词 "></a><h2> <span id="Tag1"> 1 有效的字母异位词 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/valid-anagram/" title="242. 有效的字母异位词">242. 有效的字母异位词</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定两个字符串 <code>s</code> 和 <code>t</code> ，编写一个函数来判断 <code>t</code> 是否是 <code>s</code> 的字母异位词。</p><p>注意：若 <code>s</code> 和 <code>t</code> 中每个字符出现的次数都相同，则称 <code>s</code> 和 <code>t</code> 互为字母异位词。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> s = “anagram”, t = “nagaram”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> s = “rat”, t = “car”<br><strong>输出:</strong> false</p></blockquote><p><strong>进阶</strong>: 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？</p><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;两种做法：</p><ul><li>一种是哈希表，将 <code>s</code> 的每个字符映射到哈希表中，然后遍历 <code>t</code> ,如果当前字符在哈希表中不存在，则说明 <code>s</code> 和 <code>t</code> 不是字母异位词；若存在，则将哈希表中该字符的数量减去 <code>1</code> ，当该字符数量为零则将该关键字删去。遍历 <code>t</code> 后判断哈希表中元素个数，当为零说明二者为字母异位词，否则则返回<code>false</code>.</li><li>另一种是排序，直接对 <code>s</code> 和 <code>t</code> 按字符进行排序，然后对两个字符串进行比较，相等则是字母异位词，返回<code>true</code>， 否则返回 <code>false</code> 。</li></ul><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> t<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> s<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token operator">-</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//从小到大</span><span class="token punctuation">&#125;</span>bool <span class="token function">isAnagram</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-两个数组的交集"><a href="#2-两个数组的交集" class="headerlink" title="  2 两个数组的交集 "></a><h2> <span id="Tag2"> 2 两个数组的交集 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-arrays/" title="349. 两个数组的交集">349. 两个数组的交集</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给定两个数组 <code>nums1</code> 和 <code>nums2</code> ，返回 <em>它们的交集</em> 。输出结果中的每个元素一定是 <strong>唯一</strong> 的。我们可以 <strong>不考虑输出结果的顺序</strong> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [1,2,2,1], nums2 = [2,2]<br><strong>输出:</strong> [2]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [4,9,5], nums2 = [9,4,9,8,4]<br><strong>输出:</strong> [9,4]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;创建哈希表，遍历 <code>nums1</code> 并将每一个数插入 <code>map</code> 中，然后遍历<code>nums2</code>, 对当前遍历的数字在哈希表中查找，若哈希表中存在该数字则将该数字插入<code>res</code>中，并将该数字从哈希表中删去（<strong>题目中要求输出结果中每个元素一定是唯一的</strong>）。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">intersection</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span> nums1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">:</span> nums2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">createHashTable</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span><span class="token operator">*</span>users<span class="token punctuation">,</span><span class="token keyword">int</span> user_id<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>users<span class="token punctuation">,</span><span class="token operator">&amp;</span>user_id<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>key <span class="token operator">=</span> user_id<span class="token punctuation">;</span>        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>users<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token operator">*</span><span class="token operator">*</span> users1<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token operator">*</span><span class="token operator">*</span> users2<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">HASH_COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span>users1<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token function">HASH_COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span>users2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span>users2<span class="token punctuation">,</span> users1<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> intersection <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token function">HASH_COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span>users1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">HASH_COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span>users2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> <span class="token operator">*</span>users1<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>tmp2<span class="token punctuation">;</span>        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>users2<span class="token punctuation">,</span><span class="token operator">&amp;</span>s<span class="token operator">-></span>key<span class="token punctuation">,</span>tmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp2<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            intersection<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token operator">-></span>key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> intersection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">intersection</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>set1 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span><span class="token operator">*</span>set2 <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums1Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">createHashTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set1<span class="token punctuation">,</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums2Size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">createHashTable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set2<span class="token punctuation">,</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set1<span class="token punctuation">,</span><span class="token operator">&amp;</span>set2<span class="token punctuation">,</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/*return findIntersection(fmin(nums1Size,nums2Size),&amp;set1,&amp;set2,returnSize);*/</span>    <span class="token comment">//*returnSize = n;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注： <code>C</code> 实现的代码中可以用数组来作为哈希表。</p></blockquote><h3 id="3-快乐数"><a href="#3-快乐数" class="headerlink" title="  3 快乐数 "></a><h2> <span id="Tag3"> 3 快乐数 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/happy-number/" title="202. 快乐数">202. 快乐数</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>编写一个算法来判断一个数 <code>n</code> 是不是快乐数。</p><p><strong>「快乐数」</strong> 定义为：</p><p>对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。<br>然后重复这个过程直到这个数变为 1，也可能是 <strong>无限循环</strong> 但始终变不到 1。<br>如果这个过程<strong> 结果为</strong> 1，那么这个数就是快乐数。<br>如果 <code>n</code> 是 快乐数 就返回 <code>true</code> ；不是，则返回 <code>false</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 19<br><strong>输出:</strong> true<br><strong>解释:</strong><br>$1^2 + 9^2 = 82$<br>$8^2 + 2^2 = 68$<br>$6^2 + 8^2 = 100$<br>$1^2 + 0^2 + 0^2 = 1$</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 2<br><strong>输出:</strong> false</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><ul><li><p>模拟。循环对 <code>n</code> 计算每个位置上的数字平方和，并判断当前计算结果在哈希表中是否已经存在，如果已经存在说明出现了循环，不可能计算得到 <code>1</code> 的结果，因而直接返回 <code>false</code>；否则把当前的计算结果插入哈希表中，并将该数值赋给 <code>n</code>.(<code>Cpp</code> 实现)</p></li><li><p>双指针。类似链表中判断是否成环，设置两个指针，快指针每次计算对当前数字进行每个位置的数字平方和两次，而慢指针每次只计算一次，如果快慢指针相等且快指针不为 <code>1</code> 则说明陷入循环，返回 <code>false</code>, 否则返回 <code>true</code>.(<code>C</code> 实现) <strong>注意</strong> : <strong>快指针应该初始化为下一个计算结果</strong>，否则将不会进入循环。</p></li></ul><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> <span class="token function">pow</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            n <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        sum <span class="token operator">+=</span> tmp<span class="token operator">*</span>tmp<span class="token punctuation">;</span>        num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>bool <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">,</span> slow <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> fast <span class="token operator">!=</span> slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span><span class="token function">cal</span><span class="token punctuation">(</span>fast<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        slow <span class="token operator">=</span> <span class="token function">cal</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> fast <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-两数之和"><a href="#4-两数之和" class="headerlink" title="  4 两数之和 "></a><h2> <span id="Tag4"> 4 两数之和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/two-sum/" title="1. 两数之和">1. 两数之和</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定一个整数数组 <code>nums</code> 和一个整数目标值 <code>target</code>，请你在该数组中找出 <strong>和为目标值</strong> <code>target</code>  的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,7,11,15], target = 9<br><strong>输出:</strong> [0,1]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [3,2,4], target = 6<br><strong>输出:</strong> [1,2]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> nums = [3,3], target = 6<br><strong>输出:</strong> [0,1]</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;创建一个哈希表，键为 <code>nums[i]</code> 、值为 <code>i</code> ，然后遍历数组，先在哈希表中查找是否已存在<code>target - nums[i]</code>，如果有则将两个对应的索引插入 <code>res</code> 中并进行返回即可。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                 m<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span><span class="token operator">*</span>set<span class="token punctuation">,</span><span class="token keyword">int</span> key<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>set<span class="token punctuation">,</span><span class="token operator">&amp;</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">hashTable</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp<span class="token operator">-></span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>        tmp<span class="token operator">-></span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span><span class="token operator">*</span>set<span class="token punctuation">,</span>key<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>set <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>        <span class="token keyword">int</span> num<span class="token operator">=</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>set<span class="token punctuation">,</span><span class="token operator">&amp;</span>num<span class="token punctuation">,</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token operator">-></span>val<span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>set<span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>ret<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-四数相加-II"><a href="#5-四数相加-II" class="headerlink" title="  5 四数相加 II "></a><h2> <span id="Tag5"> 5 四数相加 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/4sum-ii/" title="454. 四数相加 II">454. 四数相加 II</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给你四个整数数组 <code>nums1</code>、<code>nums2</code>、<code>nums3</code> 和 <code>nums4</code> ，数组长度都是 <code>n</code> ，请你计算有多少个元组 <code>(i, j, k, l)</code> 能满足：</p><ul><li><code>0 &lt;= i, j, k, l &lt; n</code></li><li><code>nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]<br><strong>输出:</strong> 2<br><strong>解释:</strong><br>两个元组如下：<br>1.(0, 0, 0, 1) -&gt; nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0<br>2.(1, 1, 0, 0) -&gt; nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]<br><strong>输出:</strong> 1</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;将四个数组分为两组，先对<code>nums1</code>和<code>nums2</code>进行遍历，将二者的加和插入到哈希表中，然后再遍历<code>nums3</code> 和 <code>nums4</code> 进行遍历，用<code>target</code>减去二者加和并再哈希表中查找是否存在这个结果值，如果存在则将该结果值对应的哈希表中的值加到结果中。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums3<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1 <span class="token operator">:</span> nums1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num2 <span class="token operator">:</span> nums2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                m<span class="token punctuation">[</span>num1<span class="token operator">+</span>num2<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num3 <span class="token operator">:</span> nums3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num4 <span class="token operator">:</span> nums4<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> target <span class="token operator">=</span> num3<span class="token operator">+</span>num4<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">-</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ans <span class="token operator">+=</span> m<span class="token punctuation">[</span><span class="token operator">-</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> key<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>    UT_hash_handle hh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>HashTable<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> nums1Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> nums2Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums3<span class="token punctuation">,</span> <span class="token keyword">int</span> nums3Size<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums4<span class="token punctuation">,</span> <span class="token keyword">int</span> nums4Size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    HashTable <span class="token operator">*</span>users <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums1Size<span class="token punctuation">;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> sum <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmp<span class="token operator">-></span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                tmp <span class="token operator">=</span> <span class="token punctuation">(</span>HashTable <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>HashTable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                tmp<span class="token operator">-></span>key <span class="token operator">=</span> sum<span class="token punctuation">;</span>                tmp<span class="token operator">-></span>cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>nums3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums4<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sum<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ans <span class="token operator">+=</span> tmp<span class="token operator">-></span>cnt<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-赎金信"><a href="#6-赎金信" class="headerlink" title="  6 赎金信 "></a><h2> <span id="Tag6"> 6 赎金信 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/ransom-note/" title="383. 赎金信">383. 赎金信</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你两个字符串：<code>ransomNote</code> 和 <code>magazine</code> ，判断 <code>ransomNote</code> 能不能由 <code>magazine</code> 里面的字符构成。</p><p>如果可以，返回 <code>true</code> ；否则返回 <code>false</code> 。</p><p><code>magazine</code> 中的每个字符只能在 <code>ransomNote</code> 中使用一次。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> ransomNote = “a”, magazine = “b”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> ransomNote = “aa”, magazine = “ab”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> ransomNote = “aa”, magazine = “aab”<br><strong>输出:</strong> true</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;先判断<code>ransomNote</code> 和 <code>magazine</code> 的长度，若前者大于后者，则返回 <code>false</code>; 然后遍历 <code>magazine</code> ,并将当前遍历的字符作为键插入哈希表中，并将对应的值加 <code>1</code>. 最后遍历 <code>ransomNote</code>，判断当前字符在哈希表中是否存在，若不存在则返回 <code>false</code>，否则则将当前字符对应的值减去 <code>1</code> ，若减 <code>1</code>后为 <code>0</code> 则将该关键字删去。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code>实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span>string ransomNote<span class="token punctuation">,</span> string magazine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> len1 <span class="token operator">=</span> ransomNote<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len2 <span class="token operator">=</span> magazine<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len1 <span class="token operator">></span> len2<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> magazine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> ransomNote<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">[</span>ch<span class="token punctuation">]</span><span class="token punctuation">)</span> m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">canConstruct</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span> ransomNote<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> magazine<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>magazine<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tmpRansomNote <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> tmpMagazine <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tmpRansomNote<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>tmpMagazine<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>magazine<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>ransomNote<span class="token punctuation">)</span><span class="token punctuation">)</span> tmpRansomNote<span class="token punctuation">[</span>ransomNote<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        tmpMagazine<span class="token punctuation">[</span>magazine<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tmpMagazine<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>tmpRansomNote<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-三数之和"><a href="#7-三数之和" class="headerlink" title="  7 三数之和 "></a><h2> <span id="Tag7"> 7 三数之和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/3sum/" title="15. 三数之和">15. 三数之和</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给你一个包含 <code>n</code> 个整数的数组 <code>nums</code>，判断 <code>nums</code> 中是否存在三个元素 <em>a，b，c</em> ，使得 <em>a + b + c = 0</em> ？请你找出所有和为 <code>0</code> 且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [-1,0,1,2,-1,-4]<br><strong>输出:</strong> [[-1,-1,2],[-1,0,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = []<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> [0]<br><strong>输出:</strong> []</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;先将数组进行排序，然后分别用<code>first</code>、<code>second</code>和<code>third</code>分别指代第一、第二和第三个选取的数字的索引，用 <code>first</code> 遍历数组，然后 <code>target</code> 设为 <code>-nums[first]</code>(题目要三数之和为 <code>0</code> )，然后<code>second</code> 赋为 <code>first + 1</code>, 而<code>third</code> 赋为 <code>nums.size()-1</code>,进行循环判断<code>nums[second] + nums[third]</code> 是否等于 <code>target</code>，若是则将三个索引插入答案，并将<code>second</code>和<code>third</code>向中间移动(要移动到不等于上一个值的地方，因为题目规定 <strong>不能出现重复的三元组</strong>); 若<code>nums[second] + nums[third]</code> 小于 <code>target</code>，则应该试图把第二和第三的加和变大，所以将 <code>second</code> 右移一位；若<code>nums[second] + nums[third]</code> 大于 <code>target</code>，则应该试图把第二和第三的加和变小，所以将 <code>third</code> 左移一位。</p><p>&emsp;&emsp;这题不大适用哈希表，因为题目规定 <strong>不能出现重复的三元组</strong>，如果用哈希表的话，插入完成后需要对重复的三元组进行删除。</p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> third <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>second<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>second <span class="token operator">&lt;</span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>second<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token operator">--</span>third<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> left<span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                 ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left <span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这两行划重点！！！！！！！</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-四数之和"><a href="#8-四数之和" class="headerlink" title="  8 四数之和 "></a><h2> <span id="Tag8"> 8 四数之和 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/4sum/" title="18. 四数之和">18. 四数之和</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>给你一个由 <code>n</code> 个整数组成的数组 <code>nums</code> ，和一个目标值 <code>target</code> 。请你找出并返回满足下述全部条件且<strong>不重复</strong>的四元组 <code>[nums[a], nums[b], nums[c], nums[d]]</code> （若两个四元组元素一一对应，则认为两个四元组重复）：</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a、b、c 和 d</code> <strong>互不相同</strong></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>你可以按 <strong>任意顺序</strong> 返回答案 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> nums = [1,0,-1,0,-2,2], target = 0<br><strong>输出:</strong> [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> nums = [2,2,2,2,2], target = 8<br><strong>输出:</strong> [[2,2,2,2]]</p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>思路和”三数之和”思路一致，只是多加了一层 <code>for</code> 循环即可，时间复杂度为 $O(n^3logn)$</p><p><span id="codeof_tag8">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">fourSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token operator">++</span>first<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>second<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>second <span class="token operator">></span> first<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">int</span> rest <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> third <span class="token operator">=</span> second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fourth <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">==</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>fourth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;</span> rest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>third<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        <span class="token operator">--</span>fourth<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">fourSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>      <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token operator">*</span> n<span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span>n <span class="token operator">*</span>n <span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> first <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> first <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">;</span> first<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>first<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> second <span class="token operator">=</span> first <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> second <span class="token operator">&lt;</span> n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span> second<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>second <span class="token operator">></span> first <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>second<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> third <span class="token operator">=</span> second <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> fourth <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>third <span class="token operator">&lt;</span> fourth<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>first<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>second<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span><span class="token punctuation">;</span>                    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>fourth <span class="token operator">></span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">--</span>fourth<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span>fourth <span class="token operator">></span> third <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span><span class="token operator">++</span>third<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>third<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>fourth<span class="token punctuation">]</span> <span class="token operator">&lt;</span> sum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    third<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    fourth<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;本章主要考察哈希表和双指针法。</p><ul><li><code>C++</code> 中的 <code>set</code> 仅有键无值，可以实现<code>O(1)</code>的关键字查找与插入，且插入时如果关键字已存在则不再插入。<code>set</code> 是一种关联性容器，其内部的数据都是有序的。</li><li><code>multiset</code>: 整体的接口和 <code>set</code> 都相同，但是 <code>multiset</code> 可以插入 <code>key</code> 相同的值. 如果用 <code>find</code> 查找 <code>key</code> 值时，找到的是中序遍历第一个(中序遍历其实就是遍历数组的最左端那个)，因此不断遍历下去可以找到这个 <code>multiset</code> 里所有的 <code>key</code> 值。 <strong><code>multiset</code> 和 <code>set</code> 一样不能够对数据进行修改</strong>。</li><li><code>map</code>: 有别于 <code>set</code> 的是，<code>map</code>是一种<code>key</code>(键),<code>value</code>(值)的形式，用来保存键和值组成的集合，键必须是唯一的，但值可以不唯一。里面的元素可以根据键进行自动排序，由于<code>map</code>是<code>key_value</code>的形式，所以<code>map</code>里的所有元素都是<code>pair</code>类型。<strong><code>pair</code>里面的<code>first</code>被称为<code>key</code>(键），<code>second</code>被称为<code>value</code>(值）</strong>。<code>map</code>可以通过关键字查找映射关联信息<code>value</code>，同时<strong>根据<code>key</code>值进行排序</strong>。</li><li><code>multimap</code>: <code>multimap</code>允许<code>key</code>值的冗余，因此<code>key</code>值相同也可以进行插入。<blockquote><p><code>set</code>和<code>map</code>的底层都是通过红黑树来实现的，二者都不允许对键进行修改，但后者可以对值进行修改。</p></blockquote></li><li><code>unordered_set</code>: 与<code>set</code>类似，但底层是通过哈希实现的，且内部元素为无序状态， <code>unordered_map</code> 也类似，不再赘述。</li></ul></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希 </tag>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> map </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch2 of programmercarl</title>
      <link href="/2022/04/17/ch2-of-programmercarl/"/>
      <url>/2022/04/17/ch2-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">203.移除链表元素</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">707.设计链表</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">206.反转链表</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">24. 两两交换链表中的节点</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">19.删除链表的倒数第N个节点</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">面试题 02.07. 链表相交</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">142.环形链表II</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-移除链表元素"><a href="#1-移除链表元素" class="headerlink" title="  1 移除链表元素"></a><h2> <span id="Tag1"> 1 移除链表元素</span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-linked-list-elements/" title="203.移除链表元素">203.移除链表元素</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/203.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,6,3,4,5,6], val = 6<br><strong>输出:</strong> [1,2,3,4,5]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> head = [], val = 1<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> head = [7,7,7,7], val = 7<br><strong>输出:</strong> []</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>&emsp;&emsp;由于原链表头可能被移除，因而设置一个哑结点，并将哑结点的 <code>next</code> 指向 <code>head</code>，设置一个<code>prev</code> 指针指向哑结点用于添加新节点，用 <code>cur</code> 指针去遍历原链表，若 <code>cur-&gt;val == val</code> 则 <code>cur</code> 后移一位，否则将<code>prev</code> 的 <code>next</code> 指向<code>cur</code> 并将<code>prev</code> 和<code>cur</code> 后移一位。完成原链表遍历后将 <code>prev</code> 的 <code>next</code> 指向 <code>nullptr</code> 以防止原链表中最后的节点的 <code>val</code> 等于待溢出的数值，然后直接返回哑结点的 <code>next</code> 域即可。(C++)</p><p>&emsp;&emsp;另一种思路则是用直接先处理链表头出现 <code>val</code> 的节点，如果<code>head-&gt;val == val</code> 则将 <code>head</code> 后移一位，然后再用一个 <code>cur</code> 去遍历链表，这里的判断条件改为 <code>cur-&gt;next-&gt;val==val</code> ，如果成立则将<code>cur</code> 的<code>next</code> 指向 <code>cur-&gt;next-&gt;next</code> , 注意这里<code>cur</code> 不往后移动，因为下下个节点可能还是等于 <code>val</code> 的，所以还需要对这个节点继续判断；如果不成立，则 <code>cur</code> 后移一位。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> dummyHead <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">!=</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>                prev<span class="token operator">=</span>  prev<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        prev<span class="token operator">-></span>next <span class="token operator">=</span>  <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> head<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token operator">==</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-设计链表"><a href="#2-设计链表" class="headerlink" title="  2 设计链表 "></a><h2> <span id="Tag2"> 2 设计链表 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/design-linked-list/" title="707. 设计链表">707. 设计链表</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 <code>0-index</code> 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回-1。</li><li>1addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。</li><li>addAtTail(val)：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 <code>val</code> 的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。如果 <code>index</code> 小于 <code>0</code> ，则在头部插入节点。</li><li>deleteAtIndex(index)：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。</li></ul><p><strong>示例1:</strong></p><blockquote><p>MyLinkedList linkedList = new MyLinkedList();<br>linkedList.addAtHead(1);<br>linkedList.addAtTail(3);<br>linkedList.addAtIndex(1,2);   //链表变为1-&gt; 2-&gt; 3<br>linkedList.get(1);            //返回2<br>linkedList.deleteAtIndex(1);  //现在链表是1-&gt; 3<br>linkedList.get(1);            //返回3</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>&emsp;&emsp;创建一个 <code>LinkedList</code> 结构体,然后在 <code>class MyLinkedList</code> 中定义两个 <code>LinkedList</code> 变量,一个为链表头，一个为链表尾；另定义一个 <code>int</code> 变量用于记录当前链表中的节点数。 <strong>注意</strong> ，<strong>每次进行删除的时候需要判断是否删除的节点是 <code>tail</code> 节点</strong>，如果是 <code>tail</code> 节点，那么删除前需要将 <code>tail</code> 往前移动一位，实现方式就是判断 <code>index</code> 是否为 <code>size-1</code>，若是则删除的是 <code>tail</code> 节点， 用 <code>cur</code> 遍历到 <code>tail</code> 节点的前驱节点，然后将 <code>tail</code> 置为 <code>cur</code>， 并将 <code>tail</code> 的 <code>next</code> 置空。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> head<span class="token punctuation">;</span>        size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>        newNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        tail <span class="token operator">=</span> tail<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">addAtTail</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            newNode<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">></span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">addAtTail</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">addAtHead</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>LinkedList<span class="token punctuation">)</span><span class="token punctuation">;</span>            newNode<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            newNode<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token operator">++</span>size<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">struct</span> <span class="token class-name">LinkedList</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            tail <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token operator">--</span>size<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyLinkedList</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MyLinkedList<span class="token punctuation">;</span>MyLinkedList<span class="token operator">*</span> <span class="token function">myLinkedListCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyLinkedList <span class="token operator">*</span>List <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">-></span>val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment">//虚拟结点</span>    List<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> List<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">myLinkedListGet</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>obj<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">int</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>order<span class="token operator">==</span>index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        order<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">&lt;=</span>order <span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtHead</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyLinkedList <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    node<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next <span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        MyLinkedList <span class="token operator">*</span>next <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtTail</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyLinkedList <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    node<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        MyLinkedList <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListAddAtIndex</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>next<span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>MyLinkedList <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MyLinkedList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    node<span class="token operator">-></span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">myLinkedListAddAtHead</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            node<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">myLinkedListAddAtTail</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListDeleteAtIndex</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>obj<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        obj<span class="token operator">-></span>next<span class="token operator">=</span>obj<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        MyLinkedList <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">int</span> order <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            cur<span class="token operator">=</span>cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            order<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">&lt;=</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token operator">==</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">myLinkedListFree</span><span class="token punctuation">(</span>MyLinkedList<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MyLinkedList <span class="token operator">*</span>List <span class="token operator">=</span> obj<span class="token operator">-></span>next<span class="token punctuation">;</span>    MyLinkedList <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>List<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> List<span class="token punctuation">;</span>        List <span class="token operator">=</span> List<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-反转链表"><a href="#3-反转链表" class="headerlink" title="  3 反转链表 "></a><h2> <span id="Tag3"> 3 反转链表 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reverse-linked-list/" title="206. 反转链表">206. 反转链表</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你单链表的头节点 <code>head</code> ，请你反转链表，并返回反转后的链表。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/206_1.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,3,4,5]<br><strong>输出:</strong> [5,4,3,2,1]</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/206_2.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2]<br><strong>输出:</strong> [2,1]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> []<br><strong>输出:</strong> []</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>&emsp;&emsp;添加一个虚拟节点 <code>pre</code> 并置为 <code>nullptr</code> ,用 <code>cur</code> 遍历原链表，每次将 <code>cur</code> 的 <code>next</code> 指向 <code>pre</code>, 然后将 <code>cur</code> 和 <code>prev</code> 后移一位。由于 <code>cur</code> 后移前其 <code>next</code> 指向已经改变，即指向了上一个节点，因而我们无法通过 <code>cur-&gt;next</code> 来访问原链表中 <code>cur</code> 的下一个节点，因而在修改 <code>cur</code> 的 <code>next</code> 指向前将 <code>cur-&gt;next</code> 存起来。</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> pre<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//递归版</span><span class="token comment">/*struct ListNode* reverseList(struct ListNode* head)&#123;    if(head == NULL||head->next == NULL)&#123;        return head;    &#125;    struct ListNode* newHead;    newHead = reverseList(head->next);  //newHead是最后一层的return，这里赋给倒数第二层的newhead    head->next->next = head;            //然后倒数第二次return那个newhead，一直循环不变    head->next = NULL;    return newHead;         //所以这里return的其实就是最后一层的head&#125;*/</span><span class="token comment">//迭代版</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-两两交换链表中的节点"><a href="#4-两两交换链表中的节点" class="headerlink" title="  4 两两交换链表中的节点 "></a><h2> <span id="Tag4"> 4 两两交换链表中的节点 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/swap-nodes-in-pairs/" title="24. 两两交换链表中的节点">24. 两两交换链表中的节点</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给你一个链表，两两交换其中相邻的节点，并返回交换后链表的头节点。你必须在不修改节点内部的值的情况下完成本题（即，只能进行节点交换）。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/24.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,3,4]<br><strong>输出:</strong> [2,1,4,3]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> []<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> [1]<br><strong>输出:</strong> [1]</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>&emsp;&emsp;模拟，第一个节点记为第1个节点，视为奇数节点。用<code>next</code> 存放<code>cur-&gt;next-&gt;next</code>， 即用<code>next</code> 存放奇数节点，然后将<code>cur-&gt;next</code>(<code>cur</code>的下一个偶数节点) 的 <code>next</code> 指向<code>cur</code> (奇偶节点指向反转)，然后将 <code>cur</code> 的 <code>next</code> 指向下下一个偶数节点，即<code>next-&gt;next</code>(<code>next</code>为<code>cur</code>后的下一个奇数节点，那么<code>cur</code>后的下下一个偶数节点就是<code>next-&gt;next</code>).</p><p>&emsp;&emsp;<strong>注意</strong>，当原链表的节点数为奇数时，已经没有下下个偶数节点了，那就直接将<code>cur</code> 的<code>next</code> 指向下一个奇数节点并完成循环。</p><p>整个模拟的过程如下：</p><p><img src="/2022/04/17/ch2-of-programmercarl/24_1.png" alt></p><p><img src="/2022/04/17/ch2-of-programmercarl/24_2.png" alt></p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>next <span class="token operator">&amp;&amp;</span> next<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">,</span><span class="token operator">*</span>newHead <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>cur<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>next<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-删除链表的倒数第-N-个结点"><a href="#5-删除链表的倒数第-N-个结点" class="headerlink" title="  5 删除链表的倒数第 N 个结点 "></a><h2> <span id="Tag5"> 5 删除链表的倒数第 N 个结点 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/" title="19. 删除链表的倒数第 N 个结点">19. 删除链表的倒数第 N 个结点</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/19.jpg" alt></p><blockquote><p><strong>输入:</strong> head = [1,2,3,4,5], n = 2<br><strong>输出:</strong> [1,2,3,5]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> head = [1], n = 1<br><strong>输出:</strong> []</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> head = [1,2], n = 1<br><strong>输出:</strong> [1]</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>&emsp;&emsp;双指针典型题目。快指针先向后移动 <code>n</code> 步，然后快慢指针同步向后移动，当快指针的 <code>next</code> 指向 <code>nullptr</code> 时，慢指针的 <code>next</code> 恰好指向倒数第 <code>n</code> 个节点，然后直接<code>slow-&gt;next = slow-&gt;next-&gt;next</code>，即将慢指针的 <code>next</code> 指向下下个节点。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">--</span>n<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            slow<span class="token operator">-></span>next <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>left <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>right <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        right <span class="token operator">=</span> right<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>right<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">-></span>next<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        right<span class="token operator">=</span>right<span class="token operator">-></span>next<span class="token punctuation">;</span>        left<span class="token operator">=</span>left<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    left<span class="token operator">-></span>next <span class="token operator">=</span> left<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-链表相交"><a href="#6-链表相交" class="headerlink" title="  6 链表相交 "></a><h2> <span id="Tag6"> 6 链表相交 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/" title="面试题 02.07. 链表相交">面试题 02.07. 链表相交</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>给你两个单链表的头节点 headA 和 headB ，请你找出并返回两个单链表相交的起始节点。如果两个链表没有交点，返回 null 。</p><p>图示两个链表在节点 c1 开始相交：</p><p><img src="/2022/04/17/ch2-of-programmercarl/02.07_0.png" alt></p><p>题目数据 <strong>保证</strong> 整个链式结构中不存在环。</p><p><strong>注意</strong>，函数返回结果后，链表必须 <strong>保持其原始结构</strong> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/02.07_1.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3<br><strong>输出:</strong> Intersected at ‘8’</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/02.07_2.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1<br><strong>输出:</strong> Intersected at ‘2’</p></blockquote><p><strong>示例3:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/02.07_3.png" alt></p><blockquote><p><strong>输入:</strong> intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2<br><strong>输出:</strong> null</p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>&emsp;&emsp;创建两个指针分别遍历两个链表，如果出现 <code>ptr1 == ptr2</code>, 则说明找到交点，而当两个指针指向<code>nullptr</code>, 将其指向另一个链表的表头，如果有交点，那么这样过后就一定会在交点相遇。</p><p><span id="codeof_tag6">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>ptrA <span class="token operator">=</span> headA<span class="token punctuation">,</span> <span class="token operator">*</span>ptrB <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>ptrA <span class="token operator">!=</span> ptrB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptrA<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptrA <span class="token operator">=</span> headB<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ptrA <span class="token operator">=</span> ptrA<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ptrB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                ptrB <span class="token operator">=</span> headA<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                ptrB <span class="token operator">=</span> ptrB<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ptrA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headA<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>headA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>headB<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pA <span class="token operator">=</span>headA<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> pB <span class="token operator">=</span>headB<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>pA<span class="token operator">!=</span>pB<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pA<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pA <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pA <span class="token operator">=</span> pA<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pB<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            pB <span class="token operator">=</span> headA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            pB <span class="token operator">=</span> pB<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-环形链表-II"><a href="#7-环形链表-II" class="headerlink" title="  7 环形链表 II "></a><h2> <span id="Tag7"> 7 环形链表 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/" title="142. 环形链表 II">142. 环形链表 II</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>给定一个链表的头节点  <code>head</code> ，返回链表开始入环的第一个节点。 如果链表无环，则返回 <code>null</code>。</p><p>如果链表中有某个节点，可以通过连续跟踪 <code>next</code> 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 <code>pos</code> 来表示链表尾连接到链表中的位置（索引从 <code>0</code> 开始）。如果 <code>pos</code> 是 <code>-1</code>，则在该链表中没有环。注意：<code>pos</code> 不作为参数进行传递，仅仅是为了标识链表的实际情况。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/142_1.png" alt></p><blockquote><p><strong>输入:</strong> head = [3,2,0,-4], pos = 1<br><strong>输出:</strong> 返回索引为 1 的链表节点</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/142_2.png" alt></p><blockquote><p><strong>输入:</strong> head = [1,2], pos = 0<br><strong>输出:</strong> 返回索引为 0 的链表节点</p></blockquote><p><strong>示例3:</strong></p><p><img src="/2022/04/17/ch2-of-programmercarl/142_3.png" alt></p><blockquote><p><strong>输入:</strong> head = [1], pos = -1<br><strong>输出:</strong> 返回 null</p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>&emsp;&emsp;设置两个指针，快指针 <code>fast</code> 每次走两步， 慢指针 <code>slow</code> 每次走一步。</p><p>&emsp;&emsp;<code>fast</code> 先进入环，<code>slow</code> 需要走 <code>a</code> 步才到达环的入口，此时 <code>fast</code> 已经走了 <code>2a</code> 步。当 <code>slow</code> 到达环入口，设此时 <code>fast</code> 与 <code>slow</code> 之间的距离为 <code>x</code>. </p><p>&emsp;<code>fast</code> 什么时候能追上 <code>slow</code> 实现“套圈”呢？由于 <code>fast</code> 与 <code>slow</code> 间的距离每步缩小 <code>1</code>,那么 <code>slow</code> 走 <code>x</code> 步时 <code>fast</code> 就可以追上 <code>slow</code> . <strong>注意</strong>：当 <code>slow</code> 到达环入口时两个指针间的距离<code>x</code> 是必定小于环的长度 (可能为 <code>0</code> ).即慢指针一圈还没走完就会被快指针追上. 设相遇点距离入环点<code>b</code>，则有(设相遇时快指针已经走了 <code>n</code> 圈)</p><script type="math/tex; mode=display">s_{slow} = a + b</script><script type="math/tex; mode=display">s_{fast} = a + b + n*(b+c) = 2*s_{slow}</script><p>得：</p><script type="math/tex; mode=display">a + b + n(b+c) = 2a +2b</script><p>即</p><script type="math/tex; mode=display">a = c + (n-1)(b+c)</script><p>&emsp;&emsp;那么想要知道入环点，有一种直接得方法就是让指针自己走到入环点，如何实现？通过上式可以得知，让慢指针走<code>c + (n-1)(b+c)</code>, 同时让一个从链表头出发的指针按相同的速度行走，那么必定会在环入口相遇。为什么呢？让慢指针走<code>c + (n-1)(b+c)</code>其实就是走完当前的那一圈，然后再走(n-1)圈，这段距离恰好就是链表头到环入口的距离，所以二者就在环入口相遇。</p><p><img src="/2022/04/17/ch2-of-programmercarl/142_ans.png" alt></p><p><span id="codeof_tag7">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        ListNode<span class="token operator">*</span> fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast <span class="token operator">==</span> slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fast <span class="token operator">=</span> head<span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>                    slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> fast<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>fast<span class="token operator">=</span>head<span class="token punctuation">,</span><span class="token operator">*</span>slow<span class="token operator">=</span>head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span><span class="token constant">NULL</span><span class="token operator">||</span>fast<span class="token operator">-></span>next<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fast<span class="token operator">=</span>fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast<span class="token operator">==</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>ptr <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>ptr<span class="token operator">!=</span>slow<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                slow<span class="token operator">=</span>slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                ptr<span class="token operator">=</span>ptr<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> ptr<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;这一章开始涉及基本的数据结构：链表。</p><p>&emsp;&emsp;链表对比数组的优点是：前者的插入和删除的时间复杂度均为<code>O(1)</code>，而后者的时间复杂度为<code>O(n)</code>，因为数组的插入与删除会涉及数组其他元素下标的改变。但是不足之处在于查找某一个元素时需要顺序遍历链表，导致查找的时间复杂度达到<code>O(n)</code>.</p><p>&emsp;&emsp;链表的基本操作：插入与删除、查找、翻转链表、排序、判断是否成环等，最常用的算法是<strong>双指针</strong>(即快慢指针)。链表排序本章并未包括，所以有时间自己一定要再做一下那道题！</p><p>&emsp;&emsp;链表是最开始刷题的时候做的，截止目前过去半年，基本已经忘光了，所以切记要时常复习数据结构！</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ch1 of programmercarl</title>
      <link href="/2022/04/17/ch1-of-programmercarl/"/>
      <url>/2022/04/17/ch1-of-programmercarl/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#Tag1">704. 二分查找</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">27. 移除元素</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">977.有序数组的平方</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#tag4">209.长度最小的子数组</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">59. 螺旋矩阵 II</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="  1  二分查找 "></a><h2> <span id="Tag1"> 1  二分查找 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/binary-search/" title="704. 二分查找">704. 二分查找</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code>  ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong>  nums = [-1,0,3,5,9,12], target = 9<br><strong>输出:</strong>  4 </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong>  nums = [-1,0,3,5,9,12], target = 2<br><strong>输出:</strong>  -1</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>简单二分法，如果 <code>nums[m]==target</code> 说明找到下标直接返回即可。</p><p><span id="codeof_tag1">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//可以改为（l &lt; r）</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> m<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">//如果循环条件更改，则需要改为 `r = m;`</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>right<span class="token operator">=</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token operator">&lt;</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            right<span class="token operator">=</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-移除元素"><a href="#2-移除元素" class="headerlink" title="  2 移除元素 "></a><h2> <span id="Tag2"> 2 移除元素 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/remove-element/" title="27. 移除元素">27. 移除元素</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code> ，你需要 <strong>原地</strong> 移除所有数值等于 <code>val</code> 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 <code>O(1)</code> 额外空间并 <strong>原地修改输入数组</strong> 。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong>  nums = [3,2,2,3], val = 3<br><strong>输出:</strong>  2, nums = [2,2]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong>  nums = [0,1,2,2,3,0,4,2], val = 2<br><strong>输出:</strong>  5, nums = [0,1,4,0,3]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>设置两个指针，首先判断快指针对应的数组中的值是否等于 <code>val</code>， 如果是则不进行操作，如果不等于则说明这个当前遍历到的元素应该进行保留，因而将其赋给慢指针指向的位置。整体的思路就是遍历一遍数组，遇到与 <code>val</code> 不一样的元素就把该元素插到原数组的前端(用慢指针指定位置)，最后返回慢指针即为答案。</p><p><span id="codeof_tag2">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>fast<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            nums<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> order<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numsSize<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>order<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> order<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-有序数组的平方"><a href="#3-有序数组的平方" class="headerlink" title="  3 有序数组的平方 "></a><h2> <span id="Tag3"> 3 有序数组的平方 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/" title="977. 有序数组的平方">977. 有序数组的平方</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong>  nums = [-4,-1,0,3,10]<br><strong>输出:</strong>  [0,1,9,16,100]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong>  nums = [-7,-3,2,3,11]<br><strong>输出:</strong>  [4,9,9,49,121]</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>最简单的方法就是先遍历一遍数组，遍历过程中对元素进行平方处理，然后最后再对平方过后的数组进行排序即可。(C++实现)</p><p>或者新建一个数组 <code>res</code>，容量与 <code>nums</code> 的容量相同，然后创建一个位置指针指向该数组的最后一个位置。创建两个指针分别指向 <code>nums</code> 的开头与结尾(因为 <code>nums</code> 中有负数，平方过后的最大值只会出现在最左侧或最右侧)，对左右两个指针指向的元素进行平方，大者写入答案数组 <code>res</code> 中并将指针前移一位，而指向原数组中那个平方后较大的指针移动一位。(C实现)</p><p><span id="codeof_tag3">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> numsSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> lSquare <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> rSquare <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token operator">*</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lSquare <span class="token operator">&lt;</span> rSquare<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> rSquare<span class="token punctuation">;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> lSquare<span class="token punctuation">;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-长度最小的子数组"><a href="#4-长度最小的子数组" class="headerlink" title="  4 长度最小的子数组 "></a><h2> <span id="Tag4"> 4 长度最小的子数组 </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/" title="209. 长度最小的子数组">209. 长度最小的子数组</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> 。</p><p>找出该数组中满足其和 <code>≥ target</code> 的长度最小的 连续子数组 <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度。如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong>  target = 7, nums = [2,3,1,2,4,3]<br><strong>输出:</strong>  2</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong>  target = 4, nums = [1,4,4]<br><strong>输出:</strong>  1</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong>  target = 11, nums = [1,1,1,1,1,1,1,1]<br><strong>输出:</strong>  0</p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>经典滑动窗口题目，设置两个指针，右指针用来遍历数组，左指针置 <code>0</code>. 创建一个 <code>sum</code> 变量用来记录当前滑动窗口中的元素的加和。当 <code>sum &lt; target</code> 时不进行操作，只将当前元素的值加到 <code>sum</code> 中；当<code>sum &gt;= target</code> 说明当前窗口中有符合条件的连续子数组，将当前子数组的长度与当前<code>res</code> 进行比较并将较小者赋给 <code>res</code>， 并将左指针右移一位，相当于窗口缩短一位。</p><p><span id="codeof_tag4">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> i <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>left<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token operator">==</span>INT_MAX <span class="token operator">?</span> <span class="token number">0</span><span class="token operator">:</span>res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">int</span> leftIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ans <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>i<span class="token operator">-</span>leftIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>leftIdx<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans <span class="token operator">==</span> INT_MAX <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-螺旋矩阵-II"><a href="#5-螺旋矩阵-II" class="headerlink" title="  5 螺旋矩阵 II "></a><h2> <span id="Tag5"> 5 螺旋矩阵 II </span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/spiral-matrix-ii/" title="59. 螺旋矩阵 II">59. 螺旋矩阵 II</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 $n^2$ 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/17/ch1-of-programmercarl/spiraln.jpg" alt></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> [[1,2,3],[8,9,4],[7,6,5]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> n = 1<br><strong>输出:</strong> [[1]]</p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>直接模拟即可。设置上下左右的边界(0，n),然后创建两个变量，分别存放当前行和当前的列，然后创建 <code>cnt</code> 变量用来记录当前待插入的元素。</p><p>4个for循环即可解决问题：第一个 <code>for</code> 循环解决正向行插入(从左到右)，第二个 <code>for</code> 解决下行列插入(从上到下)，第三个 <code>for</code> 循环解决反向行插入(从右到左)，第四个 <code>for</code> 解决上行列插入(从下到上)。</p><p>但是需要注意终止循环的条件是什么。举几个例子可以发现，最后的终止条件就是第一个 <code>for</code> 循环结束后和第三个 <code>for</code> 循环结束后判断是否有 <code>cnt &gt; n*n</code> ，如果这个条件成立说明已经插入完成，跳出循环并返回答案。</p><p>另外，每个 <code>for</code> 循环结束后都需要对边界进行更新，<strong>第一个</strong>  <code>for</code> 循环结束后需要对 <strong>右边界</strong> 进行减 <code>1</code>,<strong>第二个</strong> 需要对 <strong>下边界</strong> 进行减 <code>1</code>,<strong>第三个</strong> 需要对 <strong>左边界</strong> 进行加 <code>1</code>,<strong>第四个</strong>需要对 <strong>上边界</strong> 进行加 <code>1</code>.</p><p>还有一个细节，就是每次 <code>for</code> 循环结束后，都需要对行变量和列变量进行操作，因为 <strong>上一个循环会往当前循环的方向多走一步</strong> ，所以进行下一次循环前需要将这一步减去，然后再往要走的方向迈一步，为实现代码的统一，则将行变量和列变量均初始化为 <code>-1</code>。</p><p><span id="codeof_tag5">完整代码如下：</span></p><ul><li><code>Cpp</code> 实现</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>            vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//定义二维vector的容量为n*n</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> right <span class="token operator">=</span> n<span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> low <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment">//边界</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//依次为当前待插入数值、列变量、行变量</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">++</span>r<span class="token punctuation">,</span> <span class="token operator">++</span>c<span class="token punctuation">;</span> c <span class="token operator">&lt;</span> right<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment">//判断是否插入已经完成，待插入数值最大为n^2</span>            <span class="token operator">--</span>right<span class="token punctuation">;</span>    <span class="token comment">//更新右边界</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">++</span>r<span class="token punctuation">,</span> <span class="token operator">--</span>c<span class="token punctuation">;</span> r <span class="token operator">&lt;</span> low<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">--</span>low<span class="token punctuation">;</span>      <span class="token comment">//更新下边界</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">--</span>c<span class="token punctuation">,</span> <span class="token operator">--</span>r<span class="token punctuation">;</span> c <span class="token operator">>=</span> left<span class="token punctuation">;</span> <span class="token operator">--</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token operator">*</span>n<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">++</span>left<span class="token punctuation">;</span>     <span class="token comment">//更新左边界</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token operator">--</span>r<span class="token punctuation">,</span> <span class="token operator">++</span>c<span class="token punctuation">;</span> r <span class="token operator">></span> high<span class="token punctuation">;</span> <span class="token operator">--</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>high<span class="token punctuation">;</span>     <span class="token comment">//更新上边界</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>C</code> 实现</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    bool flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> row <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> colLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rowLeft <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> colRight <span class="token operator">=</span> n<span class="token punctuation">,</span> rowRight <span class="token operator">=</span> n<span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>row<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">,</span>col <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> colRight<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        colRight<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>row <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">,</span>col<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> rowRight<span class="token punctuation">;</span> row<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        rowRight<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>col <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">,</span> row <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> col <span class="token operator">>=</span> colLeft<span class="token punctuation">;</span> col<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> n<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        colLeft<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>col<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">,</span>row <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span> row <span class="token operator">></span> rowLeft<span class="token punctuation">;</span> row<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//break;</span>        rowLeft<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3><p>&emsp;&emsp;本章都相对简单，涉及二分法、滑动窗口、双指针三种最基本的算法以及过程模拟。</p><p>&emsp;&emsp;前三种方法在后边会经常用到，二分法常用来解决在一个指标的约束遍历整个数组最少/最大的值，滑动窗口则是解决连续子数组(或串)的问题，双指针用处太多了，一时写不出来，等强一点再来总结，这里先挖个坑，模拟比较锻炼思维，要把整个过程在脑中过一遍，与之相对的是递归，递归不能想太深，一想深就乱！</p></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> C </tag>
            
            <tag> 数组 </tag>
            
            <tag> 代码随想录 </tag>
            
            <tag> 二分 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DDPG</title>
      <link href="/2022/04/11/DDPG/"/>
      <url>/2022/04/11/DDPG/</url>
      
        <content type="html"><![CDATA[<h1 id="1-DDPG概述"><a href="#1-DDPG概述" class="headerlink" title=" 1 DDPG概述"></a><h2> 1 DDPG概述</h2></h1><p>对于连续的动作空间，基于价值的算法(如Q-learning、Sarsa、DQN等)是无能为力的，而基于策略的算法(如Policy Gradient)则可以按照状态给出动作的概率，然后通过某种分布进行采样进而得到对应的动作，可以很好地处理连续动作的问题。</p><p>连续控制中较为经典的算法是 <strong>深度确定性策略梯度(Deep Deterministic Policy Gradient, DDPG)</strong> ,它结合了 <code>DQN</code> 的 <strong>目标网络</strong> 和 <strong>经验回放</strong> 这两个tips以及 <code>Policy Gradient</code> 处理连续动作空间的优点， 属于 <code>Actor-Critic</code> 的范畴，其中 <code>Policy net</code> 为 <code>Actor</code> ,而 <code>Q-net</code> 则为 <code>Critic</code>。</p><p>主要的特点是:</p><ul><li>与 <code>Policy Gradient</code> 相比， <code>DDPG</code> 采用单个 <code>step</code> 对网络进行更新，即 <code>DDPG</code> 是一个单步更新的 <code>policy</code> 网络。</li><li>具有与 <code>DQN</code> 类似的 <strong>目标网络</strong> 和 <strong>经验回放</strong>， 但 <strong>目标网络</strong> 的更新是是根据 <code>Policy net</code> 的输出来进行更新。</li></ul><h1 id="2-DDPG算法"><a href="#2-DDPG算法" class="headerlink" title=" 2 DDPG算法"></a><h2> 2 DDPG算法</h2></h1><ul><li><code>Policy Net</code> 的优化</li></ul><p>&emsp;&emsp;在 <code>DDPG</code> 中， <code>policy</code> 只根据 <code>q-net</code> 的输出来进行参数 $\theta$ 的优化，而不管实际所获得的 <code>reward</code> 大小；而 <code>q-net</code> 则是根据环境反馈的 <code>reward</code> 来调整参数 $w$ 从而最大化未来的收益。</p><p><img src="/2022/04/11/DDPG/DDPG-1.png" alt></p><blockquote><p>策略梯度中实际上是没有 <code>Loss</code> 的，因为策略梯度输出的是动作的概率。但是我们有目标函数，就是 $Maximisze Q$, 而优化器中一般都是采用梯度下降 <code>Gradient Desent</code> 的方式来对 <code>Loss</code> 进行最小化，因而我们将目标函数转换一下，使之目标转换为找最小值，那么就可以通过已有的优化器来寻求 $Maximisze Q$ 的解了，即定义 <code>Loss = - Q</code>。</p></blockquote><ul><li><code>Q Net</code> 的优化</li></ul><p>&emsp;&emsp; <code>Q Net</code> 的优化实际上与 <code>DQN</code> 一样，即通过环境反馈的 <code>Reward</code> 以及下个状态中的最大 <code>Q-value</code> 作为未来收益的评估值，目标就是让 <code>Q net</code> 的参数去逼近这个评估值。</p><p><img src="/2022/04/11/DDPG/DDPG-2.png" alt></p><ul><li><code>Target Net</code> 建立</li></ul><p>&emsp;&emsp;为了解决同 <code>DQN</code> 中<code>Q-target</code> 一直改变导致网络难以收敛的问题，<code>DDPG</code> 中存在策略网络和 <code>Q Net</code> 二者的更新，因此建立两个<code>target net</code> 来稳定<code>Q-target</code>.</p><ul><li>探索机制</li></ul><p>&emsp;&emsp;<code>DDPG</code> 通过 <code>off-policy</code> 的方式来训练一个确定性策略。因为策略是确定的，如果 <code>agent</code> 使用同策略来探索，在一开始的时候，它会很可能不会尝试足够多的 <code>action</code> 来找到有用的学习信号。为了让 <code>DDPG</code> 的策略更好地探索，我们在训练的时候给它们的 <code>action</code> 加了噪音。<code>DDPG</code> 的原作者推荐使用时间相关的 <code>OU noise</code>，但最近的结果表明不相关的、均值为 <code>0</code> 的 <code>Gaussian noise</code> 的效果非常好。为了便于获得更高质量的训练数据，可以在训练过程中把噪声变小。<br>&emsp;&emsp;在测试的时候，为了查看策略利用它学到的东西的表现，不会在 <code>action</code> 中加噪音。</p><blockquote><p>此段直接摘自<a href="https://datawhalechina.github.io/easy-rl/#/chapter12/chapter12">EasyRL</a></p></blockquote><h1 id="3-改进"><a href="#3-改进" class="headerlink" title=" 3 改进"></a><h3> 3 改进</h3></h1><p>&emsp;&emsp; <code>DDPG</code> 在<strong>超参数和其他类型的调整方面经常很敏感</strong>。<code>DDPG</code> 常见的问题是已经学习好的 <code>Q</code> 函数开始显著地高估 <code>Q</code> 值，然后导致策略被破坏了，因为它利用了 <code>Q</code> 函数中的误差。</p><ul><li><code>Twin Delayed DDPG(TD3)</code><ul><li><strong>截断双Q学习(Clipped Double Q-learning)</strong>: 两个 <code>Q Net</code> ，选择输出小的 <code>Q-value</code>.</li><li><strong>延迟的策略更新(“Delayed” Policy Updates)</strong>：同步训练动作网络和评价网络，却不使用目标网络，会导致训练过程不稳定；但是仅固定动作网络时，评价网络往往能够收敛到正确的结果。因此 TD3 算法<strong>以较低的频率更新动作网络，较高频率更新评价网络</strong>，通常每更新两次评价网络就更新一次策略。</li><li><strong>目标策略平滑(Target Policy smoothing)</strong>：在目标动作中加入噪音.<script type="math/tex; mode=display">a_{TD3}(S^\prime) = clip(\mu_{\theta,targ}(s^\prime)+clip(\epsilon,-c,c), a_{min}, a_{max})</script>其中$\epsilon \sim N(0,\sigma)$</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DDPG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode template</title>
      <link href="/2022/04/10/leetcode-13/"/>
      <url>/2022/04/10/leetcode-13/</url>
      
        <content type="html"><![CDATA[<h1 id="13-罗马数字转整数"><a href="#13-罗马数字转整数" class="headerlink" title=" 13. 罗马数字转整数"></a><h2> 13. 罗马数字转整数</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode.cn/problems/roman-to-integer/" title="13. 罗马数字转整数">13. 罗马数字转整数</a></li></ul><p>罗马数字包含以下七种字符: <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><blockquote><p>字符&emsp;&emsp;&emsp;数值<br>&emsp;I&emsp;&emsp;&emsp;&emsp;  1<br>&emsp;V&emsp;&emsp;&emsp;&emsp;5<br>&emsp;X&emsp;&emsp;&emsp;&emsp;10<br>&emsp;L&emsp;&emsp;&emsp;&emsp;50<br>&emsp;C&emsp;&emsp;&emsp;&emsp;100<br>&emsp;D&emsp;&emsp;&emsp;&emsp;500<br>&emsp;M&emsp;&emsp;&emsp;&emsp;1000</p></blockquote><p>例如， 罗马数字 <code>2</code> 写做?<code>II</code>?，即为两个并列的 <code>1</code> 。<code>12</code> 写做?<code>XII</code>?，即为?<code>X?+?II</code>?。 <code>27</code> 写做?<code>?XXVII</code>, 即为?<code>XX?+?V?+?II</code>?。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 <code>4</code> 不写做?<code>IIII</code>，而是?<code>IV</code>。数字 <code>1</code> 在数字 <code>5</code> 的左边，所表示的数等于大数 <code>5</code> 减小数 <code>1</code> 得到的数值 <code>4</code> 。同样地，数字 <code>9</code> 表示为?<code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code>?可以放在?<code>V</code>?(5) 和?<code>X</code>?(10) 的左边，来表示 <code>4</code> 和 <code>9</code>。</li><li><code>X</code>?可以放在?<code>L</code>?(50) 和?<code>C</code>?(100) 的左边，来表示 <code>40</code> 和?<code>90</code>。?</li><li><code>C</code>?可以放在?<code>D</code>?(500) 和?<code>M</code>?(1000) 的左边，来表示?<code>400</code> 和?<code>900</code>。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例1：</strong> </p><blockquote><p><strong>输入:</strong> s = “III”<br><strong>输出:</strong> 3</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong> s = “IV”<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例3：</strong></p><blockquote><p><strong>输入:</strong> s = “IX”<br><strong>输出:</strong> 9</p></blockquote><p><strong>示例4：</strong></p><blockquote><p><strong>输入:</strong> s = “LVIII”<br><strong>输出:</strong> 58</p></blockquote><p><strong>示例5：</strong></p><blockquote><p><strong>输入:</strong> s = “MCMXCIV”<br><strong>输出:</strong> 1994</p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><ul><li>直接对每一种情况进行分类判断，当查询到<code>CD</code>、<code>CM</code>、<code>XL</code>、<code>XC</code>、<code>IV</code>、<code>IX</code>等情况时进行特殊处理，并将索引移到下下个位置，即同时处理当前位置和下一个位置；否则则直接将当前位置代表的数字加到答案中。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">400</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">900</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                res <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'L'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">40</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'C'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">90</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                res <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'I'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'V'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'X'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token operator">++</span>i<span class="token punctuation">;</span>                        res <span class="token operator">+=</span> <span class="token number">9</span><span class="token punctuation">;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>                res <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'M'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">1000</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'D'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">500</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'L'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">50</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>上述的代码些许重复，按照相同的思路，只要查找到小值在大值前边，说明此时为特殊情况，则将<code>s[i+1]-s[i]</code>对应的值加到答案中，否则将<code>s[i]</code>对应的值加到答案。这里用一个哈希表来实现字符到数字的映射。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token char">'I'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'V'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'X'</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'L'</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'C'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'D'</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token char">'M'</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> n <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token operator">++</span>i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> m<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode template</title>
      <link href="/2022/04/10/leetcode-template/"/>
      <url>/2022/04/10/leetcode-template/</url>
      
        <content type="html"><![CDATA[<p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>/                      单题目模板<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p><h1 id="LeetCode-INDEX-TITLE"><a href="#LeetCode-INDEX-TITLE" class="headerlink" title=" LeetCode INDEX. TITLE"></a><h2> LeetCode INDEX. TITLE</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="website_link_of_the_questions_here" title="INDEX. TITLE">INDEX. TITLE</a></li></ul><p>/<em>Some statement of the question here</em>/</p><p><strong>示例1：</strong><br>[maybe_some_pic_here]</p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong>  </p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong>  </p></blockquote><p><strong>示例3：</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong>  </p></blockquote><p><strong>示例4：</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>*</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/<br>/                      多题目模板<br>/<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><em>**</em></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>/</p><ul><li><a href="#Tag1">TITLE1</a><ul><li><a href="#thoughtof_tag1">思路</a></li><li><a href="#codeof_tag1">代码</a></li></ul></li><li><a href="#Tag2">TITLE2</a><ul><li><a href="#thoughtof_tag2">思路</a></li><li><a href="#codeof_tag2">代码</a></li></ul></li><li><a href="#Tag3">TITLE3</a><ul><li><a href="#thoughtof_tag3">思路</a></li><li><a href="#codeof_tag3">代码</a></li></ul></li><li><a href="#Tag4">TITLE1</a><ul><li><a href="#thoughtof_tag4">思路</a></li><li><a href="#codeof_tag4">代码</a></li></ul></li><li><a href="#Tag5">TITLE2</a><ul><li><a href="#thoughtof_tag5">思路</a></li><li><a href="#codeof_tag5">代码</a></li></ul></li><li><a href="#Tag6">TITLE3</a><ul><li><a href="#thoughtof_tag6">思路</a></li><li><a href="#codeof_tag6">代码</a></li></ul></li><li><a href="#Tag7">TITLE1</a><ul><li><a href="#thoughtof_tag7">思路</a></li><li><a href="#codeof_tag7">代码</a></li></ul></li><li><a href="#Tag8">TITLE2</a><ul><li><a href="#thoughtof_tag8">思路</a></li><li><a href="#codeof_tag8">代码</a></li></ul></li><li><a href="#Tag9">TITLE3</a><ul><li><a href="#thoughtof_tag9">思路</a></li><li><a href="#codeof_tag9">代码</a></li></ul></li><li><a href="#Tag10">TITLE1</a><ul><li><a href="#thoughtof_tag10">思路</a></li><li><a href="#codeof_tag10">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="TITLE1"><a href="#TITLE1" class="headerlink" title="  TITLE1 "></a><h2> <span id="Tag1"> TITLE1 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE1">INDEX. TITLE1</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtof_tag1">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag1">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="TITLE2"><a href="#TITLE2" class="headerlink" title="  TITLE2 "></a><h2> <span id="Tag2"> TITLE2 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE2">INDEX. TITLE2</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtof_tag2">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag2">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="TITLE3"><a href="#TITLE3" class="headerlink" title="  TITLE3 "></a><h2> <span id="Tag3"> TITLE3 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE3">INDEX. TITLE3</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtof_tag3">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag3">完整代码如下：</span></p><p>/<em>code_here</em>/</p><h3 id="TITLE4"><a href="#TITLE4" class="headerlink" title="  TITLE4 "></a><h2> <span id="Tag4"> TITLE4 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE1">INDEX. TITLE1</a></li></ul><h3 id="4-1-题目描述"><a href="#4-1-题目描述" class="headerlink" title=" 4.1 题目描述"></a><h3> 4.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="4-2-思路"><a href="#4-2-思路" class="headerlink" title=" 4.2 思路"></a><h3> 4.2 <span id="thoughtof_tag4">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag4">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="5-TITLE2"><a href="#5-TITLE2" class="headerlink" title="  5 TITLE2 "></a><h2> <span id="Tag5"> 5 TITLE2 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE2">INDEX. TITLE2</a></li></ul><h3 id="5-1-题目描述"><a href="#5-1-题目描述" class="headerlink" title=" 5.1 题目描述"></a><h3> 5.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="5-2-思路"><a href="#5-2-思路" class="headerlink" title=" 5.2 思路"></a><h3> 5.2 <span id="thoughtof_tag5">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag5">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="6-TITLE3"><a href="#6-TITLE3" class="headerlink" title="  6 TITLE3 "></a><h2> <span id="Tag6"> 6 TITLE3 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE3">INDEX. TITLE3</a></li></ul><h3 id="6-1-题目描述"><a href="#6-1-题目描述" class="headerlink" title=" 6.1 题目描述"></a><h3> 6.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="6-2-思路"><a href="#6-2-思路" class="headerlink" title=" 6.2 思路"></a><h3> 6.2 <span id="thoughtof_tag6">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag6">完整代码如下：</span></p><p>/<em>code_here</em>/</p><h3 id="7-TITLE1"><a href="#7-TITLE1" class="headerlink" title="  7 TITLE1 "></a><h2> <span id="Tag7"> 7 TITLE1 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE1">INDEX. TITLE1</a></li></ul><h3 id="7-1-题目描述"><a href="#7-1-题目描述" class="headerlink" title=" 7.1 题目描述"></a><h3> 7.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="7-2-思路"><a href="#7-2-思路" class="headerlink" title=" 7.2 思路"></a><h3> 7.2 <span id="thoughtof_tag7">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag7">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="8-TITLE2"><a href="#8-TITLE2" class="headerlink" title="  8 TITLE2 "></a><h2> <span id="Tag8"> 8 TITLE2 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE2">INDEX. TITLE2</a></li></ul><h3 id="8-1-题目描述"><a href="#8-1-题目描述" class="headerlink" title=" 8.1 题目描述"></a><h3> 8.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="8-2-思路"><a href="#8-2-思路" class="headerlink" title=" 8.2 思路"></a><h3> 8.2 <span id="thoughtof_tag8">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag8">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="9-TITLE3"><a href="#9-TITLE3" class="headerlink" title="  9 TITLE3 "></a><h2> <span id="Tag9"> 9 TITLE3 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE3">INDEX. TITLE3</a></li></ul><h3 id="9-1-题目描述"><a href="#9-1-题目描述" class="headerlink" title=" 9.1 题目描述"></a><h3> 9.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="9-2-思路"><a href="#9-2-思路" class="headerlink" title=" 9.2 思路"></a><h3> 9.2 <span id="thoughtof_tag9">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag9">完整代码如下：</span></p><p>/<em>code_here</em>/</p><h3 id="10-TITLE1"><a href="#10-TITLE1" class="headerlink" title="  10 TITLE1 "></a><h2> <span id="Tag1"> 10 TITLE1 </span></h2></h3><ul><li>题目链接：<a href="link_here" title="INDEX. TITLE1">INDEX. TITLE1</a></li></ul><h3 id="10-1-题目描述"><a href="#10-1-题目描述" class="headerlink" title=" 10.1 题目描述"></a><h3> 10.1 题目描述</h3><p>/<em>Question_statement_here</em>/</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong><br><strong>输出:</strong> </p></blockquote><h3 id="10-2-思路"><a href="#10-2-思路" class="headerlink" title=" 10.2 思路"></a><h3> 10.2 <span id="thoughtof_tag10">思路</span></h3><p>/<em>analysis_of_question_and_solving_thought_here</em>/</p><p><span id="codeof_tag10">完整代码如下：</span></p><p>/<em>code_here</em>/</p><p>/—————————————————————————end here————————————————————————-/</p><h3 id="总结"><a href="#总结" class="headerlink" title="  总结 "></a><h2> <span id="notes"> 总结 </span></h2></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 题解模板 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> template </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-79/130/1091</title>
      <link href="/2022/04/10/leetcode-79-130-1091/"/>
      <url>/2022/04/10/leetcode-79-130-1091/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#leetcode79">79. 单词搜索</a><ul><li><a href="#thoughtofleetcode79">思路</a></li><li><a href="#codeofleetcode79">代码</a></li><li><a href="#modifiedcodeofleetcode79">优化</a></li></ul></li><li><a href="#leetcode130">130. 被围绕的区域</a><ul><li><a href="#thoughtofleetcode130">思路</a></li><li><a href="#codeofleetcode130">代码</a></li></ul></li><li><a href="#leetcode1091">1091. 二进制矩阵中的最短路径</a><ul><li><a href="#thoughtofleetcode1091">思路</a></li><li><a href="#codeofleetcode1091">代码</a></li></ul></li><li><a href="#notes">总结</a></li></ul><h3 id="1-单词搜索"><a href="#1-单词搜索" class="headerlink" title=" 1 单词搜索"></a><h2> <span id="leetcode79">1 单词搜索</span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/word-search/submissions/" title="79. 单词搜索">79. 单词搜索</a></li></ul><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3><p>给定一个 <code>m x n</code> 二维字符网格 <code>board</code> 和一个字符串单词 <code>word</code> 。如果 <code>word</code> 存在于网格中，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。<strong>同一个单元格内的字母不允许被重复使用</strong>。</p><p><strong>示例1:</strong></p><p><img src="/2022/04/10/leetcode-79-130-1091/79_word2.jpg" alt></p><blockquote><p><strong>输入:</strong> board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/10/leetcode-79-130-1091/79_word-1.jpg" alt></p><blockquote><p><strong>输入:</strong> board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “SEE”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例3:</strong></p><p><img src="/2022/04/10/leetcode-79-130-1091/79_word3.jpg" alt></p><blockquote><p><strong>输入:</strong> board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCB”<br><strong>输出:</strong> false</p></blockquote><h3 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 <span id="thoughtofleetcode79">思路</span></h3><p>&emsp;&emsp;典型的深度优先搜索，按照对整个 <code>board</code> 进行遍历，由于题目中要求<strong>同一个单元格内的字母不允许被重复使用</strong>，因而需要创建一个 <code>visited</code> 矩阵来记录已经访问过的格子，避免“重蹈覆辙”。当当前所遍历到的位置的字符等于 <code>word</code> 的第一个字符时进行 <code>dfs</code> ，按照上、下、左、右四个方向进行搜索，返回条件有三个：①索引越界；② <code>word</code> 已经匹配完成；③当前搜索的位置与 <code>word</code> 当前位字符不同。即返回条件为：</p><p><code>if(pos==len||r&lt;0||c&lt;0||r&gt;=m||c&gt;=n||visited[r][c]||board[r][c]!=word[pos])  return;</code></p><p>&emsp;&emsp;需要注意的是：每次进行递归前要将当前格子的 <code>visited</code> 置位并将 <code>word</code> 指针后移一位，递归完成后都要将当前位置的 <code>visited</code> 进行清空，即回溯中的”撤回”操作，并判断 <code>word</code> 已经匹配完成，未完成则将 <code>word</code> 的指针减 <code>1</code> , 这也是”撤回”。因而<strong>单层一个方向</strong>的递归应该为:</p><pre class="line-numbers language-none"><code class="language-none">&#123;    visited[r][c] &#x3D; true;    pos++;    dfs(board, word, r+1, c);    if(pos&#x3D;&#x3D;len) return;    visited[r][c] &#x3D; false;    pos--;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>四个方向的搜索则为：<br><pre class="line-numbers language-none"><code class="language-none">&#123;    visited[r][c] &#x3D; true;    pos++;    dfs(board, word, r+1, c);   &#x2F;&#x2F;下    if(pos&#x3D;&#x3D;len) return;    dfs(board, word, r-1, c);   &#x2F;&#x2F;上    if(pos&#x3D;&#x3D;len) return;    dfs(board, word, r, c+1);   &#x2F;&#x2F;右    if(pos&#x3D;&#x3D;len) return;    dfs(board, word, r, c-1);   &#x2F;&#x2F;左    if(pos&#x3D;&#x3D;len) return;    visited[r][c] &#x3D; false;    pos--;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><span id="codeofleetcode79">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span>  m <span class="token punctuation">,</span> n<span class="token punctuation">,</span> len<span class="token punctuation">,</span> pos<span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>len<span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>r<span class="token operator">>=</span>m<span class="token operator">||</span>c<span class="token operator">>=</span>n<span class="token operator">||</span>visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">||</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">!=</span>word<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            pos<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos<span class="token operator">==</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            pos<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-改进"><a href="#1-3-改进" class="headerlink" title=" 1.3 改进"></a><h3> 1.3 <span id="modifiedcodeofleetcode79">改进</span></h3><p>&emsp;&emsp;前边我们定义了一个 <code>pos</code> 指针用于表示 <code>word</code> 匹配的位置，返回条件为 <code>pos</code> 等于 <code>word</code> 的长度，那么每一次递归后回溯都需要进行这个条件的判断：<code>if(pos==len) return;</code> , 我们需要进行四个方向的递归，那么就需要判断四次(<strong>如果没有判断那么四层 <code>dfs</code> 完成后将会把 <code>pos</code> 减去1，当返回主函数是 <code>pos</code> 已经不再等于 <code>word</code> 的长度</strong>)，虽然逻辑表达上更为清晰，但会导致代码过于冗余，我们可以将 <code>pos</code> 作为一个 <code>dfs</code> 的一个参数，转而创建一个全局的 <code>bool check</code> ，一旦我们完成了匹配则将 <code>check</code> 置位并返回，而后不再需要对 <code>pos</code> 进行判断，每一层 <code>dfs</code> 只要检测到 <code>check</code> 为 <code>true</code> 则直接返回。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span>  m <span class="token punctuation">,</span> n<span class="token punctuation">,</span> len<span class="token punctuation">;</span>    <span class="token keyword">bool</span> visited<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> check <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token operator">||</span>r<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>c<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>r<span class="token operator">>=</span>m<span class="token operator">||</span>c<span class="token operator">>=</span>n<span class="token operator">||</span>visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">||</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token operator">!=</span>word<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">==</span> len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                check <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            visited<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">exist</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> len <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">></span> m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">,</span> r<span class="token punctuation">,</span> c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>check<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-被围绕的区域"><a href="#2-被围绕的区域" class="headerlink" title=" 2 被围绕的区域"></a><h2> <span id="leetcode130">2 被围绕的区域</span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/surrounded-regions/" title="130. 被围绕的区域">130. 被围绕的区域</a></li></ul><h3 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3><p>给你一个 <code>m x n</code> 的矩阵 <code>board</code> ，由若干字符 <code>&#39;X&#39;</code> 和 <code>&#39;O&#39;</code> ，找到所有被 <code>&#39;X&#39;</code> 围绕的区域，并将这些区域里所有的 <code>&#39;O&#39;</code> 用 <code>&#39;X&#39;</code> 填充。</p><p><strong>示例 1:</strong></p><p><img src="/2022/04/10/leetcode-79-130-1091/130xogrid.jpg" alt></p><blockquote><p><strong>输入:</strong> board = [[“X”,”X”,”X”,”X”],[“X”,”O”,”O”,”X”],[“X”,”X”,”O”,”X”],[“X”,”O”,”X”,”X”]]<br><strong>输出:</strong> [[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”X”,”X”,”X”],[“X”,”O”,”X”,”X”]]</p></blockquote><h3 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 <span id="thoughtofleetcode130">思路</span></h3><p>先遍历 <code>board</code> 的边界，如果边界上有为 <code>&#39;O&#39;</code> 的格子，将该位置用除了<code>&#39;X&#39;</code>和<code>&#39;O&#39;</code>以外的字符(代码中用<code>&#39;A&#39;</code>)进行替换，并按四个方向进行 <code>dfs</code> 搜索，只要搜索到为 <code>&#39;O&#39;</code> 的格子就进行字符替换并继续进行<code>dfs</code> 搜索直至完成整个边界的遍历。然后再对整个 <code>board</code> 进行遍历，只要 <code>board[r][c] == &#39;A&#39;</code> 说明该格子为边界上的 <code>&#39;O&#39;</code> 或与边界上的 <code>&#39;O&#39;</code> 相连的 <code>&#39;O&#39;</code>，不需要填充为 <code>&#39;X&#39;</code> , 将其复原为 <code>&#39;O&#39;</code> ；遍历到 <code>&#39;O&#39;</code> 的格子说明需要进行填充，将其字符修改为 <code>&#39;X&#39;</code> 。</p><p><span id="codeofleetcode130">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> col <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> row <span class="token operator">></span> m<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> col <span class="token operator">></span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'A'</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//沿四个方向搜索</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">solve</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m <span class="token operator">=</span> board<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">||</span> n <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//遍历左右两列</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> r<span class="token punctuation">,</span> n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//遍历上下两行</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">//遍历整个board</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'O'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'X'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'A'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    board<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'O'</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-二进制矩阵中的最短路径"><a href="#3-二进制矩阵中的最短路径" class="headerlink" title=" 3 二进制矩阵中的最短路径"></a><h2> <span id="leetcode1091">3 二进制矩阵中的最短路径</span></h2></h3><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/shortest-path-in-binary-matrix/" title="1091. 二进制矩阵中的最短路径">1091. 二进制矩阵中的最短路径</a></li></ul><h3 id="3-1-题目描述"><a href="#3-1-题目描述" class="headerlink" title=" 3.1 题目描述"></a><h3> 3.1 题目描述</h3><p>给你一个 <code>n x n</code> 的二进制矩阵 <code>grid</code> 中，返回矩阵中最短 畅通路径 的长度。如果不存在这样的路径，返回 <code>-1</code> 。</p><p>二进制矩阵中的 畅通路径 是一条从 <strong>左上角</strong> 单元格（即，<code>(0, 0)</code>）到 <strong>右下角</strong> 单元格（即，<code>(n - 1, n - 1)</code>）的路径，该路径同时满足下述要求：</p><p>路径途经的所有单元格都的值都是 <code>0</code> 。<br>路径中所有相邻的单元格应当在 <strong>8 个方向之一</strong> 上连通（即，相邻两单元之间彼此不同且共享一条边或者一个角）。<br><strong>畅通路径的长度</strong> 是该路径途经的单元格总数。</p><p><strong>示例1:</strong><br><img src="/2022/04/10/leetcode-79-130-1091/1091example1_1.png" alt></p><blockquote><p><strong>输入:</strong> grid = 、[[0,1],[1,0]]<br><strong>输出:</strong> 2</p></blockquote><p><strong>示例2:</strong><br><img src="/2022/04/10/leetcode-79-130-1091/1091example2_1.png" alt></p><blockquote><p><strong>输入:</strong> grid = [[0,0,0],[1,1,0],[1,1,0]]<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> grid = [[1,0,0],[1,1,0],[1,1,0]]<br><strong>输出:</strong> -1</p></blockquote><h3 id="3-2-思路"><a href="#3-2-思路" class="headerlink" title=" 3.2 思路"></a><h3> 3.2 <span id="thoughtofleetcode1091">思路</span></h3><p>相比深度优先搜索，这一题更适合广度优先搜索，因为题目要求是找到一条 <strong>最短的畅通路径</strong> ，而广度优先搜索如果找到目标点(即 <strong>右下角</strong> 单元格)时的路径即为最短路径，因而采用 <strong>广度优先</strong> 的方法。<br><strong>广度优先搜索</strong> 的套路是:</p><ul><li><ol><li>建立一个队列</li></ol></li><li><ol><li>将根节点（起始点）<code>push</code> 到队列</li></ol></li><li><ol><li>遍历队列直至队列为空，遍历循环中即为我们处理的过程</li></ol></li></ul><p>针对这一题，首先判断起始点或终点是否为 <code>1</code> ，为 <code>1</code> 说明无法到达终点，直接返回 <code>-1</code> ;然后进行 <code>bfs</code> ，每遍历一个格子就把该格子置为 <code>1</code> 表明这个格子已经访问过了，<strong>避免后边八个方向搜索时往复来回搜索导致<code>heapstack overflow</code></strong> 。</p><p><span id="codeofleetcode1091">完整代码如下：</span></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token function">isOverstep</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token operator">||</span> c <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> r <span class="token operator">></span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> c <span class="token operator">></span> n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">shortestPathBinaryMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> grid<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> dir<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> cnt <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cnt<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> iter <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> row <span class="token operator">=</span> iter<span class="token punctuation">.</span>first<span class="token punctuation">,</span> col <span class="token operator">=</span> iter<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> col <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> res<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> nextRow <span class="token operator">=</span> row <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nextCol <span class="token operator">=</span> col <span class="token operator">+</span> dir<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOverstep</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> nextRow<span class="token punctuation">,</span> nextCol<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">continue</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>nextRow<span class="token punctuation">]</span><span class="token punctuation">[</span>nextCol<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>nextRow<span class="token punctuation">,</span>nextCol<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        grid<span class="token punctuation">[</span>nextRow<span class="token punctuation">]</span><span class="token punctuation">[</span>nextCol<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token operator">++</span>res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="总结"><a href="#总结" class="headerlink" title=" 总结"></a><h2> <span id="notes">总结</span></h2></h1><ol><li>对于矩阵（或者说“图”）的搜索，优先考虑 <strong>动态规划</strong>， 其次再考虑 <code>DFS</code> 和 <code>BFS</code> 。如果要找最短路径，则采用 <code>BFS</code> ，因为 <code>BFS</code> 是从起始点辐射开来，效率会比 <code>DFS</code> 高很多，而如果要找到一条准确的路径，如上边的单词匹配，则采用 <code>DFS</code> 更为方便。<br>&emsp;</li><li>对于搜索问题，谨记：<strong>如果某个位置的字符是题目的约束（且只能用一次），那么考虑用一个数组来记录当前遍历过的节点，避免”重蹈覆辙”，亦或者是再原本的 <code>vector</code> 或 <code>matrix</code> 上进行修改</strong>！</li></ol></h3></h3></h3></h3></h3></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-200+547</title>
      <link href="/2022/04/09/leetcode-200-547/"/>
      <url>/2022/04/09/leetcode-200-547/</url>
      
        <content type="html"><![CDATA[<h1 id="Leetcode-200-岛屿数量-547-省份数量"><a href="#Leetcode-200-岛屿数量-547-省份数量" class="headerlink" title=" Leetcode 200. 岛屿数量 / 547. 省份数量"></a><h2> Leetcode 200. 岛屿数量 / 547. 省份数量</h2></h1><h1 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title=" 1.1 题目描述"></a><h3> 1.1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/number-of-islands/" title="200. 岛屿数量">200. 岛屿数量</a></li></ul><p>给你一个由 <code>&#39;1&#39;</code>（陆地）和 <code>&#39;0&#39;</code>（水）组成的的二维网格，请你计算网格中岛屿的数量。</p><p>岛屿总是被水包围，并且每座岛屿只能由水平方向和/或竖直方向上相邻的陆地连接形成。</p><p>此外，你可以假设该网格的四条边均被水包围。</p><p><strong>示例1：</strong></p><blockquote><p><strong>输入:</strong> grid = [<br>  [“1”,”1”,”1”,”1”,”0”],<br>  [“1”,”1”,”0”,”1”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”0”,”0”,”0”]<br>]<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例2：</strong></p><blockquote><p><strong>输入:</strong> grid = [<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“1”,”1”,”0”,”0”,”0”],<br>  [“0”,”0”,”1”,”0”,”0”],<br>  [“0”,”0”,”0”,”1”,”1”]<br>]<br><strong>输出:</strong> 3</p></blockquote><h1 id="1-2-思路"><a href="#1-2-思路" class="headerlink" title=" 1.2 思路"></a><h3> 1.2 思路</h3></h1><ul><li><strong>深度优先搜索</strong><br>逐行遍历整个二维数组，遇到 <code>1</code> 就计数器加 <code>1</code> ,然后将其该格的数值置为 <code>0</code> ,并搜索其周围是否还有其它为 <code>1</code> 的格子，重复搜索-置 <code>0</code> 直至周围没有为 <code>1</code> 的格子就继续返回并遍历数组。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n_row <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n_col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>col <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n_row <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> n_col <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n_row <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n_row <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n_col <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> row <span class="token operator">&lt;</span> n_row<span class="token punctuation">;</span> <span class="token operator">++</span>row<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n_col<span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>cnt<span class="token punctuation">;</span>                    <span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>广度优先搜索</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">numIslands</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nr <span class="token operator">=</span> grid<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nc <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nr <span class="token operator">||</span> <span class="token operator">!</span> nr<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> nr<span class="token punctuation">;</span> <span class="token operator">++</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> nc<span class="token punctuation">;</span> <span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token operator">++</span>res<span class="token punctuation">;</span>                    grid<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>   <span class="token comment">//置为0</span>                    queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>                     q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>r<span class="token punctuation">,</span>c<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//将节点加入队列</span>                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">auto</span> iter <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//创建迭代器</span>                        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">int</span> row  <span class="token operator">=</span> iter<span class="token punctuation">.</span>first<span class="token punctuation">,</span> col <span class="token operator">=</span> iter<span class="token punctuation">.</span>second<span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            grid<span class="token punctuation">[</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>col <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>row<span class="token punctuation">,</span> col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nr <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> col<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            grid<span class="token punctuation">[</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>col <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> nc <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>row<span class="token punctuation">,</span> col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            grid<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'0'</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-1-题目描述"><a href="#2-1-题目描述" class="headerlink" title=" 2.1 题目描述"></a><h3> 2.1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/number-of-provinces/" title="547. 省份数量">547. 省份数量</a></li></ul><p>有 <code>n</code> 个城市，其中一些彼此相连，另一些没有相连。如果城市 <code>a</code> 与城市 <code>b</code> 直接相连，且城市 <code>b</code> 与城市 <code>c</code> 直接相连，那么城市 <code>a</code> 与城市 <code>c</code> 间接相连。</p><p><strong>省份</strong> 是一组直接或间接相连的城市，组内不含其他没有相连的城市。</p><p>给你一个 <code>n x n</code> 的矩阵 <code>isConnected</code> ，其中 <code>isConnected[i][j] = 1</code> 表示第 <code>i</code> 个城市和第 <code>j</code> 个城市直接相连，而 <code>isConnected[i][j] = 0</code> 表示二者不直接相连。</p><p>返回矩阵中 <strong>省份</strong> 的数量.</p><p><strong>示例1:</strong></p><p><img src="/2022/04/09/leetcode-200-547/547_graph1.jpg" alt></p><blockquote><p> <strong>输入:</strong> isConnected = [[1,1,0],[1,1,0],[0,0,1]]<br> <strong>输出:</strong> 2</p></blockquote><p><strong>示例2:</strong></p><p><img src="/2022/04/09/leetcode-200-547/547_graph2.jpg" alt></p><blockquote><p> <strong>输入:</strong> isConnected = [[1,0,0],[0,1,0],[0,0,1]]<br> <strong>输出:</strong> 3</p></blockquote><h1 id="2-2-思路"><a href="#2-2-思路" class="headerlink" title=" 2.2 思路"></a><h3> 2.2 思路</h3></h1><ul><li>深度优先搜索</li></ul><p>创建一个 <code>bool</code> 类型的 <code>visited</code> 数组来表示某个城市是否已经访问过了，并初始化为 <code>false</code>，因为一开始所有的城市都未被访问过。然后按行遍历数组 <code>isConnected</code>, 当某一位为 <code>1</code> 时，说明有其他城市与之相邻，那么将 <code>visited[i]</code>(下标i指当前遍历的是第i个城市)置为 <code>true</code>，然后到与之相接的那个城市，即那一行进行遍历，重复过程: 找到为 <code>1</code> 的城市就把<code>visited[i]</code> 置为 <code>true</code>并跳到对应的那一行进行遍历直至访问的城市再没有为 <code>1</code> 的城市就返回继续按行遍历，如果遍历第 <code>i</code> 行时有 <code>visited[i] == true</code> 则直接跳过下一行，否则结果 <code>res</code> 加 <code>1</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> isConnected<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> tmp<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> isConnected<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> isConnected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> isConnected<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">tmp</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                <span class="token function">dfs</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">,</span> tmp<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>广度优先搜索<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findCircleNum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> isConnected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> isConnected<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">bool</span> visited<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>visited<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>visited<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                visited<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">++</span>res<span class="token punctuation">;</span>                queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> row <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>col<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>visited<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> isConnected<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>col<span class="token punctuation">)</span><span class="token punctuation">;</span>                            visited<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>             <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-138</title>
      <link href="/2022/04/09/leetcode-138/"/>
      <url>/2022/04/09/leetcode-138/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-138-复制带随机指针的链表"><a href="#LeetCode-138-复制带随机指针的链表" class="headerlink" title=" LeetCode 138. 复制带随机指针的链表"></a><h2> LeetCode 138. 复制带随机指针的链表</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/" title="138. 复制带随机指针的链表">138. 复制带随机指针的链表</a></li></ul><p>给你一个长度为 <code>n</code> 的链表，每个节点包含一个额外增加的随机指针 <code>random</code> ，该指针可以指向链表中的任何节点或空节点。</p><p>构造这个链表的 <strong>深拷贝</strong>。 深拷贝应该正好由 <code>n</code> 个 <strong>全新</strong> 节点组成，其中每个新节点的值都设为其对应的原节点的值。新节点的 <code>next</code> 指针和 <code>random</code> 指针也都应指向复制链表中的新节点，并使原链表和复制链表中的这些指针能够表示相同的链表状态。<strong>复制链表中的指针都不应指向原链表中的节点</strong> 。</p><p>例如，如果原链表中有 <code>X</code> 和 <code>Y</code> 两个节点，其中 <code>X.random --&gt; Y</code> 。那么在复制链表中对应的两个节点 <code>x</code> 和 <code>y</code> ，同样有 <code>x.random --&gt; y</code> 。</p><p>返回复制链表的头节点。</p><p>用一个由 <code>n</code> 个节点组成的链表来表示输入/输出中的链表。每个节点用一个 <code>[val, random_index]</code> 表示：</p><ul><li><code>val</code>：一个表示 <code>Node.val</code> 的整数。</li><li><code>random_index</code>：随机指针指向的节点索引（范围从 <code>0</code> 到 <code>n-1</code>）；如果不指向任何节点，则为 <code>null</code> 。</li></ul><p>你的代码 <strong>只</strong> 接受原链表的头节点 <code>head</code> 作为传入参数。</p><p><strong>示例1：</strong></p><p><img src="/2022/04/09/leetcode-138/e1.png" alt></p><blockquote><p><strong>输入：</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]<br><strong>输出：</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]</p></blockquote><p><strong>示例2：</strong></p><p><img src="/2022/04/09/leetcode-138/e2.png" alt></p><blockquote><p><strong>输入：</strong> head = [[1,1],[2,1]]<br><strong>输出：</strong> [[1,1],[2,1]]</p></blockquote><p><strong>示例3：</strong></p><p><img src="/2022/04/09/leetcode-138/e3.png" alt></p><blockquote><p><strong>输入：</strong> head = [[3,null],[3,0],[3,null]]<br><strong>输出：</strong> [[3,null],[3,0],[3,null]]</p></blockquote><h1 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h1><ul><li>迭代+链表拆分<ol><li>遍历原链表，复制每一个节点，并将新节点连在原节点之后，即 <code>node-&gt;next = new_node</code>.</li><li>重新遍历链表，并根据原链表的 <code>random</code> 指向修改复制节点的 <code>random</code> 指针。具体的实现方法是： <code>node-&gt;next-&gt;random = node-&gt;random-&gt;next</code> .这里 <code>node</code> 指原链表的节点，<code>node-&gt;next</code> 为复制节点，<code>node-&gt;random</code> 指向原链表的节点的 <code>random</code> 节点，而对应的，<code>node-&gt;random-&gt;next</code> 则为复制节点 <code>node-&gt;next</code> 的 <code>random</code> 节点。</li><li>遍历整个链表，将当前遍历的节点的 <code>next</code> 节点存储下来，然后将当前节点的 <code>next</code> 指向下下个节点，从而实现两个链表的拆分。</li></ol></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*// Definition for a Node.class Node &#123;public:    int val;    Node* next;    Node* random;        Node(int _val) &#123;        val = _val;        next = NULL;        random = NULL;    &#125;&#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        Node <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Node <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将所复制的节点连在原链表对应节点的后边</span>            node<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                         <span class="token comment">//按照原链表的random指针修改复制链表的random指向</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>random<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next<span class="token operator">-></span>random <span class="token operator">=</span> cur<span class="token operator">-></span>random<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next<span class="token operator">-></span>random <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Node <span class="token operator">*</span>newHead <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            Node <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>         <span class="token comment">//拆分链表并还原两个链表</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> next<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>回溯+哈希<ol><li>创建一个 <code>Key</code> 为 <code>Node</code> 节点，<code>val</code> 为 <code>Node</code> 节点的 <code>map</code>.</li><li>遍历链表，复制当前节点并将当前节点作为 <code>key</code>， 而新节点作为 <code>val</code> 插入 <code>map</code> 中.</li><li>复制完链表后，遍历链表，按照 <code>map</code> 中的关系，将复制原链表的 <code>random</code> 指向。</li></ol></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    map<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">></span> m<span class="token punctuation">;</span>    Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> m<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Node <span class="token operator">*</span>addNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>head<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">[</span>head<span class="token punctuation">]</span> <span class="token operator">=</span> addNode<span class="token punctuation">;</span>        addNode<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        addNode<span class="token operator">-></span>random <span class="token operator">=</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> addNode<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>policy_gradient(reinforce)</title>
      <link href="/2022/04/08/policy-gradient-reinforce/"/>
      <url>/2022/04/08/policy-gradient-reinforce/</url>
      
        <content type="html"><![CDATA[<ul><li>伪代码：</li></ul><p><img src="/2022/04/08/policy-gradient-reinforce/reinforce.png" alt></p><ul><li>agent.py</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">from</span> model <span class="token keyword">import</span> PolicyGradientAgent<span class="token keyword">import</span> gym<span class="token keyword">class</span> <span class="token class-name">config</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> discounted_factor<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> batch_size<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")</span>        self<span class="token punctuation">.</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cpu"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> discounted_factor        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> hidden_dim        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size        <span class="token keyword">if</span> seed <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>            random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>train_eps <span class="token operator">=</span> <span class="token number">320</span>        self<span class="token punctuation">.</span>test_eps <span class="token operator">=</span> <span class="token number">30</span>        self<span class="token punctuation">.</span>train_steps <span class="token operator">=</span> <span class="token number">400</span>        self<span class="token punctuation">.</span>test_steps <span class="token operator">=</span> <span class="token number">500</span>        self<span class="token punctuation">.</span>state_dim <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    ma_reward <span class="token operator">=</span> <span class="token number">0</span>    reward_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    state_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    action_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------开始训练...---------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> eps <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>train_eps<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        train_steps <span class="token operator">=</span> <span class="token number">0</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> agent<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            next_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            train_steps <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> done<span class="token punctuation">:</span>                reward <span class="token operator">=</span> <span class="token number">0</span>            reward_tra<span class="token punctuation">.</span>append<span class="token punctuation">(</span>reward<span class="token punctuation">)</span>            state_tra<span class="token punctuation">.</span>append<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            action_tra<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">)</span>            state <span class="token operator">=</span> next_state            total_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> done <span class="token keyword">or</span> train_steps <span class="token operator">==</span> config<span class="token punctuation">.</span>train_steps<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token comment"># 需要一定数量的Trajectory才对网络进行更新</span>        <span class="token keyword">if</span> eps <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> eps <span class="token operator">%</span> agent<span class="token punctuation">.</span>batch_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            agent<span class="token punctuation">.</span>update<span class="token punctuation">(</span>reward_tra<span class="token punctuation">,</span> action_tra<span class="token punctuation">,</span> state_tra<span class="token punctuation">)</span>            reward_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            action_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            state_tra <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> ma_reward <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            ma_reward <span class="token operator">=</span> total_reward        <span class="token keyword">else</span><span class="token punctuation">:</span>            ma_reward <span class="token operator">=</span> <span class="token number">0.9</span> <span class="token operator">*</span> ma_reward <span class="token operator">+</span> total_reward <span class="token operator">*</span> <span class="token number">0.1</span>        eps_reward <span class="token operator">=</span> total_reward        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"episode_train_reward"</span><span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> eps<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"episode_train_reward"</span><span class="token punctuation">,</span> ma_reward<span class="token punctuation">,</span> eps<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Episode: &#123;&#125;  Reward: &#123;&#125;  Total_steps: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>eps<span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> train_steps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------训练完成!!!---------------"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    ma_reward <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------开始测试...---------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> eps <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>test_eps<span class="token punctuation">)</span><span class="token punctuation">:</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>            test_steps <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>                action <span class="token operator">=</span> agent<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>                next_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> _ <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>                test_steps <span class="token operator">+=</span> <span class="token number">1</span>                total_reward <span class="token operator">+=</span> reward                <span class="token keyword">if</span> done<span class="token punctuation">:</span>                    reward <span class="token operator">=</span> <span class="token number">0</span>                state <span class="token operator">=</span> next_state                <span class="token keyword">if</span> done <span class="token keyword">or</span> test_steps <span class="token operator">==</span> config<span class="token punctuation">.</span>test_steps<span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">if</span> ma_reward <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            ma_reward <span class="token operator">=</span> total_reward        <span class="token keyword">else</span><span class="token punctuation">:</span>            ma_reward <span class="token operator">=</span> <span class="token number">0.9</span> <span class="token operator">*</span> ma_reward <span class="token operator">+</span> total_reward <span class="token operator">*</span> <span class="token number">0.1</span>        eps_reward <span class="token operator">=</span> total_reward        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"episode_test_reward"</span><span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> eps<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"episode_test_reward"</span><span class="token punctuation">,</span> ma_reward<span class="token punctuation">,</span> eps<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Episode: &#123;&#125;  Reward: &#123;&#125;  Total_steps: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>eps<span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> test_steps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------测试完成!!!---------------"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"CartPole-v1"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    cfg <span class="token operator">=</span> config<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>                 discounted_factor<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">,</span>                 hidden_dim<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>                 batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                 seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    agent <span class="token operator">=</span> PolicyGradientAgent<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>    train<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> agent<span class="token punctuation">)</span>    agent<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>    cfg <span class="token operator">=</span> config<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>                 discounted_factor<span class="token operator">=</span><span class="token number">0.99</span><span class="token punctuation">,</span>                 hidden_dim<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span>                 batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                 seed<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    agent <span class="token operator">=</span> PolicyGradientAgent<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span>    agent<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>    test<span class="token punctuation">(</span>cfg<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>model.py</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">from</span> torch<span class="token punctuation">.</span>distributions <span class="token keyword">import</span> Bernoulli<span class="token keyword">class</span> <span class="token class-name">PolicyGradient</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>PolicyGradient<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>state_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> torch<span class="token punctuation">.</span>sigmoid<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">PolicyGradientAgent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cfg<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>state_dim <span class="token operator">=</span> cfg<span class="token punctuation">.</span>state_dim        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> cfg<span class="token punctuation">.</span>hidden_dim        self<span class="token punctuation">.</span>device <span class="token operator">=</span> cfg<span class="token punctuation">.</span>device        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> cfg<span class="token punctuation">.</span>batch_size        self<span class="token punctuation">.</span>policy_net <span class="token operator">=</span> PolicyGradient<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state_dim<span class="token punctuation">,</span> self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> cfg<span class="token punctuation">.</span>lr        <span class="token comment"># 学习率</span>        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> cfg<span class="token punctuation">.</span>gamma  <span class="token comment"># 折扣因子</span>        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>RMSprop<span class="token punctuation">(</span>self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span>self<span class="token punctuation">.</span>lr<span class="token punctuation">)</span>  <span class="token comment"># 优化器</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        state <span class="token operator">=</span> Variable<span class="token punctuation">(</span>state<span class="token punctuation">)</span>     <span class="token comment"># 转为Variable才能求梯度</span>        <span class="token comment"># state = torch.tensor(state, device=self.device)     # 转为tensor</span>        probs <span class="token operator">=</span> self<span class="token punctuation">.</span>policy_net<span class="token punctuation">(</span>state<span class="token punctuation">)</span>        m <span class="token operator">=</span> Bernoulli<span class="token punctuation">(</span>probs<span class="token punctuation">)</span>    <span class="token comment"># 伯努利分布</span>        action <span class="token operator">=</span> m<span class="token punctuation">.</span>sample<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 按概率进行采样</span>        action <span class="token operator">=</span> action<span class="token punctuation">.</span>data<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 转化为int类型</span>        <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> reward_tra<span class="token punctuation">,</span> action_tra<span class="token punctuation">,</span> state_tra<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>reward_tra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> tmp <span class="token operator">*</span> self<span class="token punctuation">.</span>gamma <span class="token operator">+</span> reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span>                reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp                <span class="token comment"># tmp *= self.gamma</span>                <span class="token comment"># reward_tra[i] += tmp</span>        reward_mean <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>reward_tra<span class="token punctuation">)</span>   <span class="token comment"># 计算期望值</span>        reward_std <span class="token operator">=</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>reward_tra<span class="token punctuation">)</span>     <span class="token comment"># 计算标准差</span>        <span class="token comment"># 归一化</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>reward_tra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> reward_mean<span class="token punctuation">)</span> <span class="token operator">/</span> reward_std        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空梯度</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>reward_tra<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            state <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>state_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>            probs <span class="token operator">=</span> self<span class="token punctuation">.</span>policy_net<span class="token punctuation">(</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>            m <span class="token operator">=</span> Bernoulli<span class="token punctuation">(</span>probs<span class="token punctuation">)</span>            action <span class="token operator">=</span> Variable<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>FloatTensor<span class="token punctuation">(</span><span class="token punctuation">[</span>action_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>            loss <span class="token operator">=</span> <span class="token operator">-</span>m<span class="token punctuation">.</span>log_prob<span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">*</span> reward_tra<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"pg_net.pth"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token string">"pg_net.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
            <tag> Policy Gradient </tag>
            
            <tag> Reinforce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dqn</title>
      <link href="/2022/04/08/dqn/"/>
      <url>/2022/04/08/dqn/</url>
      
        <content type="html"><![CDATA[<ul><li><p>伪代码：<br><img src="/2022/04/08/dqn/dqn.png" alt></p></li><li><p>Model.py:</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> MSELoss<span class="token keyword">import</span> math<span class="token comment"># 定义DQN的网络结构</span><span class="token keyword">class</span> <span class="token class-name">network</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 双隐含层的全连接网络</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> action_dim<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>state_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>linear3 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>hidden_dim<span class="token punctuation">,</span> action_dim<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 非线性采用ReLU</span>        x <span class="token operator">=</span> F<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>linear2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>linear3<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment"># 定义缓冲区类，实际上是一个循环队列结构</span><span class="token keyword">class</span> <span class="token class-name">ReplayBuffer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token number">0</span>           <span class="token comment"># 位置指针</span>        self<span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity    <span class="token comment"># 缓冲区容量</span>        self<span class="token punctuation">.</span><span class="token builtin">buffer</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token comment"># 缓冲区</span>    <span class="token comment"># 将数据(s_t, a_t, r_t, s_&#123;t+1&#125;, done)放入缓冲区</span>    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>capacity<span class="token punctuation">:</span>    <span class="token comment"># 相当于申请内存</span>            self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">[</span>self<span class="token punctuation">.</span>position<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span>  <span class="token comment"># 插入数据</span>        self<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>position <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>capacity         <span class="token comment"># 采样函数，在缓冲区中随机抽取一个batch的数据喂给神经网络</span>    <span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        batch <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>        state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>batch<span class="token punctuation">)</span>   <span class="token comment"># 解压</span>        <span class="token keyword">return</span> state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">DQN_Agent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame_idx <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># epsilon为随训练次数增加而减小的变量</span>        self<span class="token punctuation">.</span>epsilon <span class="token operator">=</span> <span class="token keyword">lambda</span> frame_idx<span class="token punctuation">:</span> config<span class="token punctuation">.</span>epsilon_min <span class="token operator">+</span> \                                         <span class="token punctuation">(</span>config<span class="token punctuation">.</span>epsilon_max <span class="token operator">-</span> config<span class="token punctuation">.</span>epsilon_min<span class="token punctuation">)</span> <span class="token operator">*</span> \                                         math<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1.</span> <span class="token operator">*</span> frame_idx <span class="token operator">/</span> config<span class="token punctuation">.</span>epsilon_decay<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span>  <span class="token comment"># 选取设备</span>        self<span class="token punctuation">.</span>action_dim <span class="token operator">=</span> config<span class="token punctuation">.</span>action_dim        self<span class="token punctuation">.</span>state_dim <span class="token operator">=</span> config<span class="token punctuation">.</span>state_dim        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> config<span class="token punctuation">.</span>hidden_dim        self<span class="token punctuation">.</span>memory <span class="token operator">=</span> ReplayBuffer<span class="token punctuation">(</span>config<span class="token punctuation">.</span>buffer_capacity<span class="token punctuation">)</span>  <span class="token comment"># 声明缓冲区</span>        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> config<span class="token punctuation">.</span>batch_size                self<span class="token punctuation">.</span>learning_rate <span class="token operator">=</span> config<span class="token punctuation">.</span>learning_rate   <span class="token comment"># 学习率</span>        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> config<span class="token punctuation">.</span>gamma       <span class="token comment"># 折扣因子</span>        self<span class="token punctuation">.</span>target_net <span class="token operator">=</span> network<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state_dim<span class="token punctuation">,</span>                                   self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">,</span>                                   self<span class="token punctuation">.</span>action_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>     <span class="token comment"># 声明target Q-net</span>        self<span class="token punctuation">.</span>policy_net <span class="token operator">=</span> network<span class="token punctuation">(</span>self<span class="token punctuation">.</span>state_dim<span class="token punctuation">,</span>                                  self<span class="token punctuation">.</span>hidden_dim<span class="token punctuation">,</span>                                   self<span class="token punctuation">.</span>action_dim<span class="token punctuation">)</span><span class="token punctuation">.</span>to<span class="token punctuation">(</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>     <span class="token comment"># 声明policy Q-net</span>        <span class="token keyword">for</span> target_param<span class="token punctuation">,</span> param <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>             target_param<span class="token punctuation">.</span>data<span class="token punctuation">.</span>copy_<span class="token punctuation">(</span>param<span class="token punctuation">.</span>data<span class="token punctuation">)</span>     <span class="token comment"># 复制参数到目标网路targe_net</span>        self<span class="token punctuation">.</span>optimizer <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                          lr<span class="token operator">=</span>self<span class="token punctuation">.</span>learning_rate<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 当前缓冲区中数据过少，不进行参数更新</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>memory<span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>batch_size<span class="token punctuation">:</span>            <span class="token keyword">return</span>        state_batch<span class="token punctuation">,</span> action_batch<span class="token punctuation">,</span> reward_batch<span class="token punctuation">,</span> next_state_batch<span class="token punctuation">,</span> done_batch <span class="token operator">=</span> self<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>self<span class="token punctuation">.</span>batch_size<span class="token punctuation">)</span>        <span class="token comment"># 将batch转为tensor</span>        state_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>state_batch<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>        action_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>action_batch<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span><span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        reward_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>reward_batch<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>        next_state_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>next_state_batch<span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span>        done_batch <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span>done_batch<span class="token punctuation">)</span><span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">)</span>        <span class="token comment"># dim=1 : 按列找action_batch对应的q_value</span>        q_val <span class="token operator">=</span> self<span class="token punctuation">.</span>policy_net<span class="token punctuation">(</span>state_batch<span class="token punctuation">)</span><span class="token punctuation">.</span>gather<span class="token punctuation">(</span>dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> index<span class="token operator">=</span>action_batch<span class="token punctuation">)</span>        <span class="token comment"># .max(1):找每个动作中的q-val最大值，返回的是一个tensor,通过下标0访问该行,detach():使之无梯度</span>        next_q_val <span class="token operator">=</span> self<span class="token punctuation">.</span>target_net<span class="token punctuation">(</span>next_state_batch<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>detach<span class="token punctuation">(</span><span class="token punctuation">)</span>        q_predict <span class="token operator">=</span> q_val        q_target <span class="token operator">=</span> reward_batch <span class="token operator">+</span> self<span class="token punctuation">.</span>gamma <span class="token operator">*</span> next_q_val <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> done_batch<span class="token punctuation">)</span>        loss_fn <span class="token operator">=</span> MSELoss<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空梯度</span>        loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>q_predict<span class="token punctuation">,</span> q_target<span class="token punctuation">.</span>unsqueeze<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 计算损失</span>        loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment"># 损失反向传播</span>        self<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment"># 优化器更新网络参数</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>frame_idx <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>epsilon<span class="token punctuation">(</span>self<span class="token punctuation">.</span>frame_idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> random<span class="token punctuation">.</span>randrange<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action_dim<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   state <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">,</span> device<span class="token operator">=</span>self<span class="token punctuation">.</span>device<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span>float32<span class="token punctuation">)</span>                state_action <span class="token operator">=</span> self<span class="token punctuation">.</span>policy_net<span class="token punctuation">(</span>state<span class="token punctuation">)</span>                action <span class="token operator">=</span> state_action<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> root<span class="token punctuation">)</span><span class="token punctuation">:</span>        torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> root<span class="token operator">+</span><span class="token string">"target_net.pth"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>load<span class="token punctuation">(</span>path<span class="token operator">+</span><span class="token string">"target_net.pth"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>self<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>agent.py</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> gym<span class="token keyword">from</span> model <span class="token keyword">import</span> DQN_Agent<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> os<span class="token keyword">import</span> syscurr_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 当前文件所在绝对路径</span>parent_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>curr_path<span class="token punctuation">)</span>  <span class="token comment"># 父路径</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>parent_path<span class="token punctuation">)</span>  <span class="token comment"># 添加路径到系统路径</span><span class="token keyword">class</span> <span class="token class-name">Agent_Config</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token punctuation">,</span> eps_max<span class="token punctuation">,</span> eps_min<span class="token punctuation">,</span> hidden_dim<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>epsilon_max <span class="token operator">=</span> eps_max       <span class="token comment"># e-greedy上界</span>        self<span class="token punctuation">.</span>epsilon_min <span class="token operator">=</span> eps_min       <span class="token comment"># e-greedy下界</span>        self<span class="token punctuation">.</span>epsilon_decay <span class="token operator">=</span> <span class="token number">500</span>         <span class="token comment"># e-greedy下降率</span>        self<span class="token punctuation">.</span>learning_rate <span class="token operator">=</span> lr          <span class="token comment"># 学习率</span>        self<span class="token punctuation">.</span>batch_size <span class="token operator">=</span> batch_size        self<span class="token punctuation">.</span>gamma <span class="token operator">=</span> gamma               <span class="token comment"># 折扣因子</span>        self<span class="token punctuation">.</span>action_dim <span class="token operator">=</span> env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n        self<span class="token punctuation">.</span>state_dim <span class="token operator">=</span> env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>hidden_dim <span class="token operator">=</span> hidden_dim        self<span class="token punctuation">.</span>buffer_capacity <span class="token operator">=</span> <span class="token number">100000</span>        self<span class="token punctuation">.</span>train_episode <span class="token operator">=</span> <span class="token number">300</span>        self<span class="token punctuation">.</span>test_episode <span class="token operator">=</span> <span class="token number">30</span>        self<span class="token punctuation">.</span>update_freq <span class="token operator">=</span> <span class="token number">5</span>        self<span class="token punctuation">.</span>model_path <span class="token operator">=</span> curr_path  <span class="token comment"># 保存模型的路径</span><span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    train_reward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ma_reward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------训练开始--------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> episode <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>train_episode<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        eps_reward <span class="token operator">=</span> <span class="token number">0</span>        eps_steps <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> agent<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            next_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            agent<span class="token punctuation">.</span>memory<span class="token punctuation">.</span>push<span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_state<span class="token punctuation">,</span> done<span class="token punctuation">)</span>            agent<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>            state <span class="token operator">=</span> next_state            eps_reward <span class="token operator">+=</span> reward            eps_steps <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> done <span class="token keyword">or</span> eps_steps <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>episode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> config<span class="token punctuation">.</span>update_freq <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># 更新target Q-net参数</span>            agent<span class="token punctuation">.</span>target_net<span class="token punctuation">.</span>load_state_dict<span class="token punctuation">(</span>agent<span class="token punctuation">.</span>policy_net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        train_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eps_reward<span class="token punctuation">)</span>        <span class="token keyword">if</span> ma_reward<span class="token punctuation">:</span>            ma_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ma_reward<span class="token punctuation">[</span><span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token operator">+</span> eps_reward <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ma_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eps_reward<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_reward"</span><span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> episode<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_reward"</span><span class="token punctuation">,</span> ma_reward<span class="token punctuation">[</span>episode<span class="token punctuation">]</span><span class="token punctuation">,</span> episode<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练回合：&#123;&#125;  训练步数：&#123;&#125;  训练奖励：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>episode <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> eps_steps<span class="token punctuation">,</span> eps_reward<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------训练结束--------------"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> train_reward<span class="token punctuation">,</span> ma_reward<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span><span class="token punctuation">:</span>    test_reward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    ma_reward <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------测试开始--------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> episode <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>test_episode<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        eps_reward <span class="token operator">=</span> <span class="token number">0</span>        eps_steps <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>            action <span class="token operator">=</span> agent<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            next_state<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            state <span class="token operator">=</span> next_state            eps_reward <span class="token operator">+=</span> reward            eps_steps <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> done <span class="token keyword">or</span> eps_steps <span class="token operator">></span> <span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        test_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eps_reward<span class="token punctuation">)</span>        <span class="token keyword">if</span> ma_reward<span class="token punctuation">:</span>            ma_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ma_reward<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">0.9</span> <span class="token operator">+</span> eps_reward <span class="token operator">*</span> <span class="token number">0.1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            ma_reward<span class="token punctuation">.</span>append<span class="token punctuation">(</span>eps_reward<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_reward"</span><span class="token punctuation">,</span> eps_reward<span class="token punctuation">,</span> episode<span class="token punctuation">)</span>        writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_reward"</span><span class="token punctuation">,</span> ma_reward<span class="token punctuation">[</span>episode<span class="token punctuation">]</span><span class="token punctuation">,</span> episode<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试回合：&#123;&#125;  测试步数：&#123;&#125;  测试奖励：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>episode<span class="token punctuation">,</span> eps_steps<span class="token punctuation">,</span> eps_reward<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-------------测试结束--------------"</span><span class="token punctuation">)</span>    env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> test_reward<span class="token punctuation">,</span> ma_rewardenv_name <span class="token operator">=</span> <span class="token string">"CartPole-v1"</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"logs"</span><span class="token punctuation">)</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span>env_name<span class="token punctuation">)</span>env<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    config <span class="token operator">=</span> Agent_Config<span class="token punctuation">(</span>lr<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span>                          eps_max<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>                          eps_min<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span>                          hidden_dim<span class="token operator">=</span><span class="token number">256</span><span class="token punctuation">,</span>                          gamma<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span>                          batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>    agent <span class="token operator">=</span> DQN_Agent<span class="token punctuation">(</span>config<span class="token punctuation">)</span>    train_rewards<span class="token punctuation">,</span> train_ma_rewards <span class="token operator">=</span> train<span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span>    agent<span class="token punctuation">.</span>save<span class="token punctuation">(</span>config<span class="token punctuation">.</span>model_path<span class="token punctuation">)</span>    agent <span class="token operator">=</span> DQN_Agent<span class="token punctuation">(</span>config<span class="token punctuation">)</span>    agent<span class="token punctuation">.</span>load<span class="token punctuation">(</span>config<span class="token punctuation">.</span>model_path<span class="token punctuation">)</span>    test_rewards<span class="token punctuation">,</span> test_ma_rewards <span class="token operator">=</span> test<span class="token punctuation">(</span>config<span class="token punctuation">,</span> agent<span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 实操 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Deep Q-Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes_on_PyTorch</title>
      <link href="/2022/04/05/Notes-on-PyTorch/"/>
      <url>/2022/04/05/Notes-on-PyTorch/</url>
      
        <content type="html"><![CDATA[<h1 id="PyTorch学习笔记"><a href="#PyTorch学习笔记" class="headerlink" title=" PyTorch学习笔记"></a><h1> PyTorch学习笔记</h1><p><strong>Link:</strong> <a href="https://www.bilibili.com/video/BV1hE411t7RN?p=1" title="PyTorch深度学习快速入门教程">PyTorch深度学习快速入门教程（绝对通俗易懂！）【小土堆】</a></p><h1 id="1-函数"><a href="#1-函数" class="headerlink" title=" 1. 函数"></a><h2> 1. 函数</h2></h1><ol><li>dir(): 查询某个类或对象的所有属性</li><li>help(): 打开某个module的详细信息，也可以直接对象名加’??’。如要查询<code>torch.utils.Data</code>中的 <code>Dataset</code>, 可以输入<code>help(Dataset)</code>, 也可以输入<code>Dataset??</code>.</li><li><code>os.listdir(dir_path)</code>:将某个路径下的文件转换为列表.<br><code>os.path.join(root_dir, target_dir)</code>：将两个地址连起来(前者为根路径，后者为前者中的子文件夹)</li><li>按住 <code>Ctrl</code> 点击<code>Module</code> 可以打开对应的模块文件</li><li><code>torch.reshape()</code> : 转换格式/升维(<code>unsqueeze()</code>也可以)</li><li><code>ReLU()</code> 中的inplace指是否原地置换结果</li><li><code>input = torch.tensor([1, 2, 3], dtype=torch.floag32)</code>: 将 <code>tensor</code> 中存放的数据的数据类型定义为浮点数 <code>float32</code>.</li><li><code>print(&quot;some words here: &#123;&#125;&quot;.format(some param here))</code>：python格式化字符串写法，将前边的花括号 <code>&#123;&#125;</code> 替换为 <code>format</code> 中的内容.</li><li>选中某行按 <code>Ctrl+D</code>可以直接粘贴。</li><li><code>array.argmax(flag)</code>: 输出array的每一行/列中最大值所在的列/行索引，0按列1按行搜索。如<pre class="line-numbers language-python" data-language="python"><code class="language-python">array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.05</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>      <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>state_time = time.time()</code>：记录当前时间，需要<code>import time</code></li><li><p><code>Variable</code>：位于 <code>torch.autograd</code> 库中，封装了 <code>Tensor</code>，并整合了反向传播的相关实现。<code>Variable</code> 具有三个属性: ① <code>data</code> ：存储 <code>tensor</code> 变量；② <code>grad</code> : 存储 <code>data</code> 反向传播的梯度；③ <code>grad_fn</code> : 存放计算梯度的方法. 实际创建变量时的语法： <code>x_var = Variable(x, requires_grad=True)</code>.</p><blockquote><p><code>requires_grad</code>: 表示是否需要对该变量进行求导，默认为 <code>False</code>, 指定为 <code>True</code> 时，<code>print(x_var.grad)</code> 则是其梯度值，否则为 <code>None</code></p></blockquote></li><li></li></ol><h1 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title=" 2. 数据类型"></a><h2> 2. 数据类型</h2></h1><ol><li>Dataset: 提供获取数据及其label的方式</li><li>Dataloader: 数据打包，为网络提供不同的数据形式</li><li>tensor：打包了训练样本中相关的数据类型，如图片(用多维矩阵存储)、标签(label)等</li></ol><h1 id="3-类的创建"><a href="#3-类的创建" class="headerlink" title=" 3. 类的创建"></a><h2> 3. 类的创建</h2></h1><ol><li>初始化函数 <code>__init__(self)</code></li></ol><p>&emsp;&emsp;作用：为所在的 <code>class</code> 提供全局变量。</p><ol><li>类中带双下划线 <code>__</code> 的函数可以通过对象名直接调用，不需要通过 <code>对象名.函数名(参数列表)</code> 的形式来调用。</li></ol><h1 id="4-Tensorboard"><a href="#4-Tensorboard" class="headerlink" title=" 4. Tensorboard"></a><h2> 4. Tensorboard</h2></h1><ol><li>作用：训练过程可视化、结果导出</li><li>导入方法：<code>from torch.utils.tensorboard import SummaryWriter</code>.</li><li>创建事件文件：<code>writer = SummaryWriter(&quot;logs&quot;)</code></li><li><p>加载数据到事件文件：<code>writer.add_image(&quot;tag&quot;, image, step)</code>和<code>writer.add_scalar(&quot;tag&quot;, scalar, step</code></p><blockquote><p>如果没有对tag进行修改，重复操作后，后边的结果会覆盖在前边的结果上边，表现为曲线的重叠(中间有拟合)、图像堆叠为一个过程。</p></blockquote></li><li><p>完成后记得关闭, 输入<code>writer.close()</code></p></li></ol><ol><li>打开方法：<code>tensorboard --logdir=logs</code>（logs为事件文件所在文件夹名字）<br>指定端口名：<code>tensorboard --logdir=logs --port=xxxx</code>(xxxx为端口名)</li></ol><h1 id="5-torchvision"><a href="#5-torchvision" class="headerlink" title=" 5. torchvision"></a><h2> 5. torchvision</h2></h1><ol><li><code>torchvision.transform</code><ul><li>作用：将图片的格式等进行操作(totensor, resize)</li><li>导入方法：<code>from torchvision import transforms</code>.</li></ul></li><li><code>torchvision.dataset</code>:包含很多标准数据集</li></ol><h1 id="6-NN的建立"><a href="#6-NN的建立" class="headerlink" title=" 6. NN的建立"></a><h2> 6. NN的建立</h2></h1><ol><li>库：<code>import torch.nn as nn</code>和<code>import torch.nn.functional as F</code></li><li><p>定义模型类，继承 <code>nn.Module</code> 类，定义初始化函数 <code>__init__</code> 和前向传播函数 <code>forward</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">super</span><span class="token punctuation">(</span>Module<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment"># 卷积层</span>    self<span class="token punctuation">.</span>conv2 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment"># 卷积层</span>  <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    x <span class="token operator">=</span> F<span class="token punctuation">.</span>Relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> F<span class="token punctuation">.</span>Relu<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conv2<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>上边的代码块是建立NN时的模板，必须要重写 <code>__init__</code> 和 <code>forward</code> 两个函数</p></blockquote></li></ol><h1 id="7-Loss"><a href="#7-Loss" class="headerlink" title=" 7. Loss"></a><h2> 7. Loss</h2></h1><ol><li>库：<code>torch.nn</code></li><li>作用：①计算实际输出与目标之间的差距<br>&emsp;&emsp;&emsp;②为网络参数的更新提供依据（误差反向传播）</li><li>计算方法： <pre class="line-numbers language-python" data-language="python"><code class="language-python">loss_result <span class="token operator">=</span> cross_loss<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> target<span class="token punctuation">)</span>   <span class="token comment"># 计算loss</span>loss_result<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment"># 反向传播计算梯度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h1 id="8-优化器"><a href="#8-优化器" class="headerlink" title=" 8. 优化器"></a><h2> 8. 优化器</h2></h1><ol><li>使用方法</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token builtin">input</span><span class="token punctuation">,</span> target <span class="token keyword">in</span> dataset<span class="token punctuation">:</span>    optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment"># 梯度清零，避免上一步的梯度影响这一步的计算</span>    output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>output<span class="token punctuation">,</span> target<span class="token punctuation">)</span>  <span class="token comment"># 计算loss</span>    loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 反向传播计算梯度</span>    optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 优化器进行参数更新</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="9-模型保存与加载"><a href="#9-模型保存与加载" class="headerlink" title=" 9. 模型保存与加载"></a><h2> 9. 模型保存与加载</h2></h1><ol><li>保存<ul><li>方式1: 保存完整的网络，包括网络结构与参数<br><code>torch.save(model_name, &quot;file_name.pth&quot;)</code></li><li>方式2：通过字典保存网络的参数(<strong>推荐</strong>)<br><code>torch.save(model_name.state_dict(), &quot;file_name.pth&quot;)</code></li></ul></li><li>加载<ul><li>方式1：<br><code>model_name = torch.load(&quot;file_name.pth&quot;)</code></li><li>方式2：<br><code>model_name.load_state_dict(torch.load(&quot;file_name.pth&quot;))</code></li></ul></li></ol><pre><code>&gt; 在不同的设备上保存的模型，读取时需要将模型映射到对应的设备(GPU保存CPU读取是需要的，CPU保存GPU读取没试过)，即&gt; `model_name = torch.load(&quot;file_name.pth&quot;, map_location=torch.device(&#39;cpu))`.</code></pre><h1 id="10-使用GPU进行训练"><a href="#10-使用GPU进行训练" class="headerlink" title=" 10. 使用GPU进行训练"></a><h2> 10. 使用GPU进行训练</h2></h1><ol><li><p>方式1：将训练相关的（如网络模型、损失函数、样本、标签）后面加上<code>.cuda()</code>即可实现在GPU上进行训练。但最好加上条件判断，即：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">model <span class="token operator">=</span> Model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  model <span class="token operator">=</span> model<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>方式2：<pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span><span class="token punctuation">)</span> <span class="token comment"># 如果有多个GPU，则写`cuda: 索引`，索引若为0可以直接不写</span>model <span class="token operator">=</span> Modelmodel <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>类似方式1，最好加判断，可以简写为：<pre class="line-numbers language-python" data-language="python"><code class="language-python">device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>可以用google的colab进行GPU训练：colab.research.google.com</li></ol><h1 id="附录-基于CIFAR10数据集的图像识别代码"><a href="#附录-基于CIFAR10数据集的图像识别代码" class="headerlink" title=" 附录(基于CIFAR10数据集的图像识别代码)"></a><h3> 附录(基于CIFAR10数据集的图像识别代码)</h3></h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> torch<span class="token keyword">import</span> torchvision<span class="token keyword">from</span> torch <span class="token keyword">import</span> nn<span class="token keyword">from</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">import</span> Conv2d<span class="token punctuation">,</span>Linear<span class="token punctuation">,</span>MaxPool2d<span class="token punctuation">,</span>Flatten<span class="token punctuation">,</span>Sequential<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token keyword">from</span> torchvision <span class="token keyword">import</span> datasets<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>tensorboard <span class="token keyword">import</span> SummaryWriter<span class="token keyword">import</span> time<span class="token comment"># 数据集</span><span class="token comment"># train为true则说明下载训练集，为false则下载测试集</span>train_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./dataset"</span><span class="token punctuation">,</span>                                         train<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                         transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                         download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token comment"># 下载数据集</span>test_set <span class="token operator">=</span> torchvision<span class="token punctuation">.</span>datasets<span class="token punctuation">.</span>CIFAR10<span class="token punctuation">(</span>root<span class="token operator">=</span><span class="token string">"./dataset"</span><span class="token punctuation">,</span>                                        train<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>                                        transform<span class="token operator">=</span>torchvision<span class="token punctuation">.</span>transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                        download<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 设置设备类型</span>device <span class="token operator">=</span> torch<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">"cuda"</span> <span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token string">"cpu"</span><span class="token punctuation">)</span><span class="token comment"># 求数据集长度</span>train_set_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>train_set<span class="token punctuation">)</span>test_set_size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>test_set<span class="token punctuation">)</span><span class="token comment"># 将前边字符串中的花括号&#123;&#125;用format中的内容替换，如train_set_size = 10, 运行后</span><span class="token comment"># print的内容为："训练数据集的长度为：10"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练数据集的长度为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_set_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"测试数据集的长度为：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>test_set_size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 利用dataloader加载数据集</span>train_data <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>train_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>test_data <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>test_set<span class="token punctuation">,</span> batch_size<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token comment"># 搭建网络</span><span class="token keyword">class</span> <span class="token class-name">CIFAR10_Model</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>            <span class="token comment"># in_channels输入通道数，out_channels输出通道数</span>            <span class="token comment"># kernel_size卷积核, stride步长, padding拓展</span>            Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 卷积层</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment"># 池化层</span>            Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment"># 展平</span>            Linear<span class="token punctuation">(</span><span class="token number">64</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 线性层</span>            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 前向传播</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token comment"># 创建网络</span>model <span class="token operator">=</span> CIFAR10_Model<span class="token punctuation">(</span><span class="token punctuation">)</span>model <span class="token operator">=</span> model<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment"># 转换到目标设备</span><span class="token comment"># 优化器，需要指定模型的参数，即model.parameters(),以及学习率lr</span>optim <span class="token operator">=</span> torch<span class="token punctuation">.</span>optim<span class="token punctuation">.</span>SGD<span class="token punctuation">(</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>   <span class="token comment"># 采用梯度下降优化器</span><span class="token comment"># 损失函数</span>loss_fn <span class="token operator">=</span> nn<span class="token punctuation">.</span>CrossEntropyLoss<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 损失函数采用交叉熵损失函数</span>loss_fn <span class="token operator">=</span> loss_fn<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment"># 转换到目标设备</span><span class="token comment"># 超参设置</span>total_train_step <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 记录训练次数</span>total_test_step <span class="token operator">=</span> <span class="token number">0</span>         <span class="token comment"># 记录测试次数</span>epoches <span class="token operator">=</span> <span class="token number">10</span>                <span class="token comment"># 训练轮数</span><span class="token comment"># 创建事件文件，记录训练以及测试过程中的性能指标</span>writer <span class="token operator">=</span> SummaryWriter<span class="token punctuation">(</span><span class="token string">"CIFAR10_train_gpu"</span><span class="token punctuation">)</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>epoches<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 记录每轮训练开始时的时间</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------第&#123;&#125;轮训练开始-------------"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 训练步骤</span>    <span class="token keyword">for</span> data <span class="token keyword">in</span> train_data<span class="token punctuation">:</span>        imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data        imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>          <span class="token comment"># 进行设备转换</span>        targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment"># 进行设备转换</span>        outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>           <span class="token comment"># 将batch喂给NN计算输出</span>        episode_loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># 计算损失</span>        <span class="token comment"># 优化器模型</span>        optim<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment"># 清空梯度，避免上一步的结果对这一步的影响</span>        episode_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment"># 误差反向传播(理解为计算梯度)</span>        optim<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment"># 优化器进行参数优化</span>        total_train_step <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token comment"># episode_loss.item():打印内容，直接print可能会带上类型，如tensor</span>        <span class="token keyword">if</span> total_train_step <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token comment"># 每100步打印一次指标</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"训练次数：&#123;&#125;， Loss：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_train_step<span class="token punctuation">,</span> episode_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>            writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"train_loss"</span><span class="token punctuation">,</span> episode_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> total_train_step<span class="token punctuation">)</span>    end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 记录单轮训练的时间</span>    train_time <span class="token operator">=</span> end_time <span class="token operator">-</span> start_time    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Training Time for a Epoch: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>train_time<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 打印单轮训练时间</span>    <span class="token comment"># 测试步骤</span>    total_test_loss <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment"># 测试损失</span>    total_accuracy <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 测试准确率</span>    <span class="token keyword">with</span> torch<span class="token punctuation">.</span>no_grad<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 测试过程不进行参数更新，把梯度关掉</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>            imgs<span class="token punctuation">,</span> targets <span class="token operator">=</span> data    <span class="token comment"># 读取样本及标签</span>            imgs <span class="token operator">=</span> imgs<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>  <span class="token comment"># 转移到目标设备</span>            targets <span class="token operator">=</span> targets<span class="token punctuation">.</span>to<span class="token punctuation">(</span>device<span class="token punctuation">)</span>    <span class="token comment"># 转移到目标设备</span>            outputs <span class="token operator">=</span> model<span class="token punctuation">(</span>imgs<span class="token punctuation">)</span>           <span class="token comment"># 将batch喂给NN输出预测结果</span>            episode_loss <span class="token operator">=</span> loss_fn<span class="token punctuation">(</span>outputs<span class="token punctuation">,</span> targets<span class="token punctuation">)</span>    <span class="token comment"># 计算测试损失</span>            <span class="token comment"># argmax(1)是求每一行中最大值的列索引，argmax(0)是求每一列中最大值的行索引</span>            accuracy <span class="token operator">=</span> <span class="token punctuation">(</span>outputs<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> targets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 求batch中预测正确的样本数量</span>            total_accuracy <span class="token operator">+=</span> accuracy      <span class="token comment"># 求单轮测试中的准确样本数</span>            total_test_loss <span class="token operator">+=</span> episode_loss<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 加.item是去除数据类型</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集的Loss:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_test_loss<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"整体测试集的准确率:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>total_accuracy<span class="token operator">/</span>test_set_size<span class="token punctuation">)</span><span class="token punctuation">)</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_loss"</span><span class="token punctuation">,</span> total_test_loss<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    <span class="token comment"># 将训练过程中的性能指标写入事件文件</span>    writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span><span class="token string">"test_accuracy"</span><span class="token punctuation">,</span> total_accuracy<span class="token operator">/</span>test_set_size<span class="token punctuation">,</span> total_test_step<span class="token punctuation">)</span>    total_test_step <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 保存每一轮的模型</span>    torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"CIFAR10_train_model&#123;&#125;.pth"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>epoch<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># torch.save(model, "CIFAR10_train_model&#123;&#125;.pth".format(epoch))</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"模型已保存"</span><span class="token punctuation">)</span>    <span class="token comment"># 读取模型</span>    <span class="token comment"># model.load_state_dict(torch.load(“CIFAR10_train_model&#123;&#125;.pth”.format(epoch)))</span>    <span class="token comment"># model = torch.load("CIFAR10_train_model&#123;&#125;.pth".format(epoch))</span>writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 关闭事件文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-143</title>
      <link href="/2022/04/05/leetcode-143/"/>
      <url>/2022/04/05/leetcode-143/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-143-重排链表"><a href="#LeetCode-143-重排链表" class="headerlink" title=" LeetCode 143. 重排链表"></a><h2> LeetCode 143. 重排链表</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/reorder-list/" title="143. 重排链表">143. 重排链表</a></li></ul><p>给定一个单链表 <code>L</code> 的头节点 <code>head</code> ，单链表 <code>L</code> 表示为：</p><blockquote><p>$L_0 → L_1 → … → L_{n - 1} → L_n$</p></blockquote><p>请将其重新排列后变为：</p><blockquote><p>$L_0 → L_n → L_1 → L_{n - 1} → L_2 → L_{n - 2} → …$</p></blockquote><p>不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。</p><p><strong>示例1：</strong><br><img src="/2022/04/05/leetcode-143/example1.png" alt></p><blockquote><p><strong>输入:</strong>  head = [1,2,3,4]<br><strong>输出:</strong>  [1,4,2,3]</p></blockquote><p><strong>示例2：</strong><br><img src="/2022/04/05/leetcode-143/example2.png" alt></p><blockquote><p><strong>输入:</strong>  head = [1,2,3,4,5]<br><strong>输出:</strong>  [1,5,2,4,3]</p></blockquote><h1 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h1><ul><li><p>辅助数组</p><ul><li>创建一个数组存放每个节点，然后设置两个指针，分别指向数组开头和末尾，将开头节点的 <code>next</code> 域指向末尾节点，末尾节点的 <code>next</code> 域指向开头节点的下个节点，即：<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">//i为开头指针，j为末尾指针</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//开头节点next指向末尾节点并将指针后移</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token comment">//判断是否两个指针相遇</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>                  <span class="token comment">//相遇说明重排完毕</span>    <span class="token punctuation">&#125;</span>         tmp<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将末尾节点next指向开头结(开头指针已经后移一位)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>完整代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>tmp<span class="token punctuation">[</span><span class="token number">50001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//将每个节点存入数组</span>        tmp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>             tmp<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代码性能</p><ul><li>时间复杂度： O(n)</li><li>空间复杂度： O(n)</li></ul></li></ul></li><li><p>原地重排<br>&emsp;&emsp;此题实际上是将链表的右半部分进行反转，然后将左右两部分进行合并。因而可以分三步：1. 找中间节点；2. 反转右半部分；3. 合并链表.</p><ul><li>找中间节点(<a href="https://leetcode-cn.com/problems/middle-of-the-linked-list/submissions/" title="876. 链表的中间结点">876. 链表的中间结点</a>)<ul><li>设置快慢双指针，快指针每次走两步，慢指针每次走一步，当快指针走到末端则慢指针刚好走到中间节点.  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span>fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>反转链表<ul><li>迭代实现：设置前置节点<code>prev</code>，初始化为 <code>nullptr</code>, 然后遍历整个链表，先存储当前遍历到的链表节点的 <code>next</code> 域，然后将当前节点的 <code>next</code> 指向 <code>prev</code> ，直至遍历完成，将 <code>prev</code> 返回即可。  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>递归实现  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token operator">||</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> newHead<span class="token punctuation">;</span>    newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//newHead是最后一层的return</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token comment">//然后倒数第二次return那个newhead</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span>         <span class="token comment">//所以这里return的其实就是最后一层的head</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>合并链表<ul><li>将左半部分当前节点的 <code>next</code> 指向右半部分当前节点，将右半部分当前节点的 <code>next</code> 指向左半部分当前节点的下个节点，并将左右两部分的指针后移。这里由于需要用到两个指针的 <code>next</code> 节点，所以改变指向时需要先将各自的 <code>next</code> 节点存下来。  <pre class="line-numbers language-c" data-language="c"><code class="language-c">ListNode<span class="token operator">*</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ListNode<span class="token operator">*</span> left <span class="token operator">=</span> root1<span class="token punctuation">,</span> <span class="token operator">*</span>right <span class="token operator">=</span> root2<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>left_next <span class="token operator">=</span> left<span class="token operator">-></span>next<span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>right_next <span class="token operator">=</span> right<span class="token operator">-></span>next<span class="token punctuation">;</span>        left<span class="token operator">-></span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>        right<span class="token operator">-></span>next <span class="token operator">=</span> left_next<span class="token punctuation">;</span>        left <span class="token operator">=</span> left_next<span class="token punctuation">;</span>        right <span class="token operator">=</span> right_next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li>将以上三部分合起来即可完成本题，完整代码如下：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     ListNode *next;*     ListNode() : val(0), next(nullptr) &#123;&#125;*     ListNode(int x) : val(x), next(nullptr) &#123;&#125;*     ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125;* &#125;;*/</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode<span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ListNode <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>            prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ListNode<span class="token operator">*</span> <span class="token function">findMidNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//找中间节点</span>            slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>            fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">mergeList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> root2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ListNode<span class="token operator">*</span> left <span class="token operator">=</span> root1<span class="token punctuation">,</span> <span class="token operator">*</span>right <span class="token operator">=</span> root2<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ListNode <span class="token operator">*</span>left_next <span class="token operator">=</span> left<span class="token operator">-></span>next<span class="token punctuation">;</span>            ListNode <span class="token operator">*</span>right_next <span class="token operator">=</span> right<span class="token operator">-></span>next<span class="token punctuation">;</span>            left<span class="token operator">-></span>next <span class="token operator">=</span> right<span class="token punctuation">;</span>            right<span class="token operator">-></span>next <span class="token operator">=</span> left_next<span class="token punctuation">;</span>            left <span class="token operator">=</span> left_next<span class="token punctuation">;</span>            right <span class="token operator">=</span> right_next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">reorderList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>mid <span class="token operator">=</span> <span class="token function">findMidNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        mid <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//反转后半部分链表</span>        <span class="token function">mergeList</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> C </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-49</title>
      <link href="/2022/04/05/leetcode-49/"/>
      <url>/2022/04/05/leetcode-49/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-49-字母异位词分组"><a href="#LeetCode-49-字母异位词分组" class="headerlink" title=" LeetCode 49. 字母异位词分组"></a><h2> LeetCode 49. 字母异位词分组</h2></h1><ul><li><a href="#description">1 题目描述</a></li><li><a href="#mythought">2 思路(超时)</a></li><li><a href="#modify">3 改进</a></li><li><a href="#notes">4 Notes</a></li></ul><h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> <span id="description">1 题目描述</span></h3></h2><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/group-anagrams/" title="49. 字母异位词分组">49. 字母异位词分组</a></li></ul><p>给你一个字符串数组，请你将<code>字母异位词</code>组合在一起。可以按任意顺序返回结果列表。</p><p><code>字母异位词</code>是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母通常恰好只用一次。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> strs = [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]<br><strong>输出：</strong> [[“bat”],[“nat”,”tan”],[“ate”,”eat”,”tea”]]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> strs = [“”]<br><strong>输出：</strong> [[“”]]</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入：</strong> strs = [“a”]<br><strong>输出：</strong> [[“a”]]</p></blockquote><h2 id="2-思路（超时）"><a href="#2-思路（超时）" class="headerlink" title=" 2 思路（超时）"></a><h3> <span id="mythought">2 思路（超时）</span></h3></h2><ul><li>先遍历一遍字符串数组，用一个数组 <code>vector&lt;int&gt; cnt(26);</code> 记录每个字符串中各个个字母出现的次数，以 当前字符串的索引为 <code>key</code> 、<code>cnt</code> 为 <code>value</code> 、 插入到 <code>map</code> 中, <code>map</code> 定义为：<code>map&lt;vector&lt;int&gt;, int&gt;</code>;</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//遍历数组</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cnt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">//得到字符串中每个字母的数量</span>    <span class="token punctuation">&#125;</span>      m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>     <span class="token comment">//以索引i为key,cnt为value插入map中</span>    <span class="token function">fill</span><span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//将cnt清零</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>两重for遍历字符串数组，遇到值一样的就将对应的<code>strs</code>插入到一个暂存结果的<code>vector&lt;string&gt; group</code>中，并将所对应的键从 <code>map</code> 中<code>erase</code> 掉. 内循环结束后把暂存结果的 <code>group</code> 插入答案中</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token comment">//内循环中i已经插入到答案中且被erase了</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            group<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    group<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//完成插入，erase掉</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>    group<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完整的代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>string<span class="token operator">></span> group<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cnt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cnt<span class="token punctuation">;</span>            <span class="token function">fill</span><span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> m<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> m<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    group<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            group<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>            group<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提交发现超时了，主要是因为两层for循环导致复杂度过高</p></blockquote><h2 id="3-改进"><a href="#3-改进" class="headerlink" title=" 3 改进"></a><h3> <span id="modify">3 改进</span></h3></h2><p>&emsp;&emsp;上面的思路将索引作为 <code>key</code>, 导致查找的时候需要对字符串逐一遍历、两两进行值的比较，相等了再插入到答案中，但这种方法其实无异于暴力求解。<br>&emsp;&emsp;进行优化，类似的思路:</p><ul><li>采用 <code>cnt</code> 数组作为 <code>key</code> ，<code>value</code> 则定义为<code>vector&lt;string&gt;</code>, 即 <code>map</code> 定义为：<code>map&lt;vector&lt;int&gt;, vector&lt;string&gt;&gt; m;</code>.</li><li>每次统计字符串中的各个字母次数，然后将当前遍历的字符串存到map中，即 <code>m[cnt].push_back(strs[i])</code>.</li><li>通过迭代器对 <code>map</code> 进行遍历，并将 <code>map</code> 中的 <code>value</code> 一一插入到答案中.</li></ul><p>完整代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">groupAnagrams</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">cnt</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> m<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cnt<span class="token punctuation">[</span>ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            m<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fill</span><span class="token punctuation">(</span>cnt<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cnt<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> iter<span class="token operator">:</span> m<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//iter.first指向map中的key</span>            res<span class="token punctuation">.</span><span class="token function">emplace_back</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//iter.second指向map中的value</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Notes"><a href="#4-Notes" class="headerlink" title=" 4 Notes"></a><h3> <span id="notes">4 Notes</span></h3></h2><ol><li><code>emplace_back()</code> 和 <code>push_back()</code> 的区别</li></ol><ul><li><p><code>push_back()</code> 的调用过程：先会调用构造函数<strong>构造临时对象</strong>，然后<strong>调用拷贝构造函数</strong>将这个临时对象放入容器中。原来的<strong>临时变量释放</strong>。这样造成的问题就是临时变量申请<strong>资源的浪费</strong>。</p></li><li><p><code>emplace_back()</code> 在插入的时候原地构造，不需要触发拷贝构造和转移构造。</p><blockquote><p>注意：1. 不能向 <code>emplace_back()</code> 传递引用.<br>&emsp;&emsp;&emsp;2. 不应该直接传递原 <code>vector</code> 的迭代器，即 <code>vec.emplace_back(vec.back())</code> 是不正确的，因为插入需要重新分配内存，会导致迭代器的失效，应该先定义一个变量存放 <code>vec.back()</code>,再把这个变量传递给<code>emplace_back()</code>.</p></blockquote></li></ul><ol><li>对于 <code>map</code> 容器，用迭代器对 <code>map</code> 进行遍历，迭代器有两个成员， <code>first</code> 指向当前遍历元素的 <code>key</code> ， <code>second</code> 指向当前的 <code>value</code>.</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>m<span class="token punctuation">[</span><span class="token string">"one"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator p <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">-></span>first<span class="token punctuation">;</span> <span class="token comment">// 这个是  string  值是 "one"</span>p<span class="token operator">-></span>second<span class="token punctuation">;</span> <span class="token comment">//这个是 int 值是 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>vector</code> 的清零操作是 <code>fill(vec.begin(), vec.end(), 0);</code> 而不是 <code>vec.clear();</code>， 后者是将 <code>vector</code> 清空，即相当于内存释放.</li></ol>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>monotone stack</title>
      <link href="/2022/04/04/monotone-stack/"/>
      <url>/2022/04/04/monotone-stack/</url>
      
        <content type="html"><![CDATA[<h1 id="单调栈"><a href="#单调栈" class="headerlink" title=" 单调栈"></a><h2> 单调栈</h2></h1><p>单调栈中存放的数据是有序的，按照从栈底到栈顶的顺序可分为(从栈顶往栈底方向看)：</p><ul><li>单调递增栈：由栈底到栈顶的数据按由大到小</li><li>单调递减栈：由栈底到栈顶的数据按由小到大</li></ul><h1 id="性质"><a href="#性质" class="headerlink" title=" 性质"></a><h3> 性质</h3></h1><ul><li>单调递增栈：可以找到当前遍历的数<strong>左起第一个更小元素</strong>，或是找到数组中元素<strong>右边第一个更大元素</strong></li><li>单调递减栈：找到当前遍历的数<strong>左边第一个更大元素</strong>.</li></ul><blockquote><p>举例说明：假设数组<code>num = [2, 1, 4, 6, 5]</code></p><ul><li>找到数组中每个元素<strong>右边第一个比它本身大的元素</strong>，没找到则赋值0<ul><li>创建一个<strong>单调递增栈</strong><code>stack&lt;int&gt; stk</code>，结果数组<code>res[num.size()]</code>并初始化为0</li><li>将<code>num[0] = 2</code>入栈，此时栈为:<code>[0]</code>(将索引入栈，左为栈底，右为栈顶)</li><li><code>num[1] = 1</code>比栈顶元素小，入栈，此时栈为:<code>[0，1]</code></li><li><code>num[2] = 4</code>比栈顶元素大，出栈，<code>res[1] = num[2]</code>,出栈，此时栈为:<code>[0]</code></li><li><code>num[2] = 4</code>比栈顶元素大，出栈，<code>res[0] = num[2]</code>,出栈，此时栈为:<code>[]</code>；栈为空，将当前元素入栈，此时栈为<code>[2]</code></li><li><code>num[3] = 6</code>比栈顶元素大，出栈，<code>res[2] = num[3]</code>,出栈，此时栈为:<code>[]</code>；栈为空，将当前元素入栈，此时栈为<code>[3]</code></li><li><code>num[4] = 5</code>比栈顶元素小，入栈，此时栈为:<code>[3，4]</code>.</li><li>返回结果<code>res = [4, 4, 6, 0, 0]</code></li></ul></li><li>找到每个元素<strong>左边第一个比它本身大的元素</strong>，没有找到则赋值0<ul><li>创建一个<strong>单调递减栈</strong><code>stack&lt;int&gt; stk</code>，结果数组<code>res[num.size()]</code>并初始化为0</li><li>将<code>num[0] = 2</code>入栈，此时栈为:<code>[0]</code>(将索引入栈，左为栈底，右为栈顶)</li><li><code>num[1] = 1</code>比栈顶元素小，出栈，<code>res[1] = num[0]</code>此时栈为:<code>[]</code>；栈为空，将当前元素入栈，此时栈为<code>[1]</code></li><li><code>num[2] = 4</code>比栈顶元素大，入栈，此时栈为:<code>[1, 2]</code></li><li><code>num[3] = 6</code>比栈顶元素大，入栈，此时栈为:<code>[1, 2, 3]</code></li><li><code>num[4] = 5</code>比栈顶元素小，出栈，<code>res[4] = num[3]</code></li><li><code>num[4] = 5</code>比栈顶元素大，入栈，此时栈为:<code>[1, 2, 4]</code>.</li><li>返回结果<code>res = [0, 2, 0, 0, 6]</code></li></ul></li></ul></blockquote><h1 id="力扣相关题目"><a href="#力扣相关题目" class="headerlink" title=" 力扣相关题目"></a><h3> 力扣相关题目</h3></h1><ul><li>题目链接1：<a href="https://leetcode-cn.com/problems/next-greater-element-ii/" title="503. 下一个更大元素 II">503. 下一个更大元素 II</a></li></ul><p>给定一个循环数组<code>nums</code>（<code>nums[nums.length - 1]</code>的下一个元素是<code>nums[0]</code>），返回<code>nums</code>中每个元素的 <strong><em>下一个更大元素</em></strong> 。</p><p>数字<code>x</code>的 <strong>下一个更大的元素</strong> 是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出<code>-1</code>。</p><p><strong>示例1</strong>：</p><blockquote><p><strong>输入：</strong> nums = [1,2,1]<br><strong>输出：</strong> [2,-1,2]<br><strong>解释：</strong> 第一个 1 的下一个更大的数是 2；<br>数字 2 找不到下一个更大的数；<br>第二个 1 的下一个最大的数需要循环搜索，结果也是 2。</p></blockquote><p><strong>示例2</strong>：</p><blockquote><p><strong>输入：</strong> nums = [1,2,3,4,3]<br><strong>输出：</strong> [2,3,4,-1,4]</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">%</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>题目链接2：<a href="https://leetcode-cn.com/problems/daily-temperatures/" title="739. 每日温度">739. 每日温度</a></li></ul><p>给定一个整数数组<code>temperatures</code> ，表示每天的温度，返回一个数组<code>answer</code>，其中<code>answer[i]</code>是指在第<code>i</code>天之后，才会有更高的温度。如果气温在这之后都不会升高，请在该位置用<code>0</code>来代替。</p><p><strong>示例1</strong>：</p><blockquote><p><strong>输入：</strong> temperatures = [73,74,75,71,69,72,76,73]<br><strong>输出：</strong> [1,1,4,2,1,1,0,0]</p></blockquote><p><strong>示例2</strong>：</p><blockquote><p><strong>输入：</strong> temperatures = [30,40,50,60]<br><strong>输出：</strong> [1,1,1,0]</p></blockquote><p><strong>示例3</strong>：</p><blockquote><p><strong>输入：</strong> temperatures = [30,60,90]<br><strong>输出：</strong> [1,1,0]</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stk<span class="token punctuation">;</span>        stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temperatures<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stk<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> temperatures<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">[</span>stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> stk<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stk<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            stk<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cpp </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tries</title>
      <link href="/2022/04/03/Tries/"/>
      <url>/2022/04/03/Tries/</url>
      
        <content type="html"><![CDATA[<h1 id="字典树"><a href="#字典树" class="headerlink" title=" 字典树"></a><h1> 字典树</h1><h1 id="概念"><a href="#概念" class="headerlink" title=" 概念"></a><h2> 概念</h2></h1><p>字典树是一种按照字符串的前缀构建的一种<strong>特殊数据结构</strong>，是一种字典的存储结构，<strong>每个“单词”从根节点出发一直到某一节点为止的路径</strong>（通过节点上的<code>bool end</code>来判断是否为单词结尾），路径上的字母连起来即是所存储的“单词”。</p><p><img src="/2022/04/03/Tries/Tries.png" alt></p><h1 id="功能"><a href="#功能" class="headerlink" title=" 功能"></a><h2> 功能</h2></h1><ul><li>维护字典树（即插入“单词”）</li><li>查询字典树中是否存在某一完整字符串</li><li>统计字符串出现次数</li><li>字典序排序</li><li>求集合内字符串之间的公共前缀</li></ul><h1 id="实现"><a href="#实现" class="headerlink" title=" 实现"></a><h2> 实现</h2></h1><ol><li>设计</li></ol><p>&emsp;&emsp;力扣相关：<a href="https://leetcode-cn.com/problems/implement-trie-prefix-tree/" title="208. 实现 Trie (前缀树)">208. 实现 Trie (前缀树)</a><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<a href="https://leetcode-cn.com/problems/QC3q1f/" title="剑指 Offer II 062. 实现前缀树">剑指 Offer II 062. 实现前缀树</a></p><ul><li>结构体定义</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span>    bool end<span class="token punctuation">;</span>               <span class="token comment">//用来记录从根节点到当前节点的路径是否为一个完整字符串</span>    <span class="token keyword">struct</span> <span class="token class-name">Trie</span> <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//普通字符串只有26种字符</span><span class="token punctuation">&#125;</span> Trie<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>创建节点</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">Trie<span class="token operator">*</span> <span class="token function">trieCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Trie</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">Trie</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Trie<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>end <span class="token operator">=</span> false<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>node<span class="token operator">-></span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>node<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>c++中以上两个操作可以直接进行合并，定义一个<code>Trie</code>类，然后创建节点即为<code>Trie</code>类的构造函数.</p></blockquote><ul><li>插入操作</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">trieInsert</span><span class="token punctuation">(</span>Trie<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    Trie <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> childptr <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>           <span class="token comment">//将字符映射到整型</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//为null说明字典树中没有该单词</span>            cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">trieCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur<span class="token operator">-></span>end <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//单词插入完成，将当前节点的end置true来表示为单词末尾</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询字典中是否存在某个完整字符串</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">trieSearch</span><span class="token punctuation">(</span>Trie<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>    Trie <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> childptr <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//为null说明当前的单词不存在于字典树中，返回false</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cur<span class="token operator">-></span>end<span class="token punctuation">;</span>    <span class="token comment">//如果字典树中存在路径与单词相重合，直接判断当前节点是否为true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>查询字典中是否存在某个字符串前缀</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">trieStartsWith</span><span class="token punctuation">(</span>Trie<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>    Trie <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> childptr <span class="token operator">=</span> prefix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token comment">//与完整字符串不同的地方是不需要看当前节点是不是单词的末尾</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>应用</li></ol><ul><li><p><a href="https://leetcode-cn.com/problems/replace-words/" title="648. 单词替换">648. 单词替换</a></p><blockquote><p>在英语中，我们有一个叫做<code>词根</code>(root) 的概念，可以词根后面添加其他一些词组成另一个较长的单词——我们称这个词为<code>继承词</code>(successor)。例如，词根<code>an</code>，跟随着单词<code>other</code>(其他)，可以形成新的单词<code>another</code>(另一个)。</p><p>现在，给定一个由许多<strong>词根</strong>组成的词典<code>dictionary</code>和一个用空格分隔单词形成的句子<code>sentence</code>。你需要将句子中的所有<strong>继承词</strong>用<strong>词根</strong>替换掉。如果<strong>继承词</strong>有许多可以形成它的词根，则用<strong>最短的词根</strong>替换它。</p><p>你需要输出替换之后的句子。</p></blockquote><p>  <strong>示例1</strong>:</p><blockquote><p><strong>输入</strong>：dictionary = [“cat”,”bat”,”rat”], sentence = “the cattle was rattled by the battery”<br><strong>输出</strong>:”the cat was rat by the bat”</p></blockquote><p>  <strong>示例2</strong>:</p><blockquote><p><strong>输入*</strong>：dictionary = [“a”,”b”,”c”], sentence = “aadsfasf absbs bbab cadsfafs”<br><strong>输出</strong>：”a a b c”</p></blockquote><ul><li><strong>思路</strong>：将<code>dictionary</code>中的词根存入到一个字典树中，并在字典树中依次查找<code>sentence</code>的每个单词并返回对应的前缀，如果不存在相应的前缀则返回原来的单词，并将结果存在答案<code>res</code>中即可。</li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Tries</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> end<span class="token punctuation">;</span>    Tries <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        end <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Insert</span><span class="token punctuation">(</span>Tries <span class="token operator">*</span>obj<span class="token punctuation">,</span> string word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Tries <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> childptr <span class="token operator">=</span> word<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Tries<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token operator">-></span>end <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        string <span class="token function">findPredix</span><span class="token punctuation">(</span>Tries <span class="token operator">*</span>obj<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        string Predix<span class="token punctuation">;</span>        Tries <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> word<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> childptr <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>end <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>                Predix <span class="token operator">+=</span> ch<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token operator">-></span>end <span class="token operator">==</span> <span class="token boolean">true</span> <span class="token operator">?</span> Predix <span class="token operator">:</span> word<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string <span class="token function">replaceWords</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> dictionary<span class="token punctuation">,</span> string sentence<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string res<span class="token punctuation">;</span>        Tries <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Tries<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>string str<span class="token operator">:</span> dictionary<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            root<span class="token operator">-></span><span class="token function">Insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        string tmpStr<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sentence<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> ch <span class="token operator">=</span> sentence<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">!=</span> <span class="token char">' '</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                tmpStr <span class="token operator">+=</span> ch<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                string str <span class="token operator">=</span> root<span class="token operator">-></span><span class="token function">findPredix</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">+=</span> str <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span>                tmpStr <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">+=</span> root<span class="token operator">-></span><span class="token function">findPredix</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><ol><li><a href="https://leetcode-cn.com/problems/maximum-xor-of-two-numbers-in-an-array/" title="421. 数组中两个数的最大异或值">421. 数组中两个数的最大异或值</a> </li><li><p><a href="https://leetcode-cn.com/problems/ms70jA/" title="剑指 Offer II 067. 最大的异或">剑指 Offer II 067. 最大的异或</a></p><blockquote><p>给定一个整数数组<code>nums</code>，返回<code>nums[i] XOR nums[j]</code>的最大运算结果，其中<code>0 ≤ i ≤ j &lt; n</code>。</p></blockquote><p><strong>示例1</strong>:</p><blockquote><p><strong>输入</strong>:nums = [3,10,5,25,2,8]<br><strong>输出</strong>:28</p></blockquote><p><strong>示例2</strong>:</p><blockquote><p><strong>输入</strong>:nums = [0]<br><strong>输出</strong>:0</p></blockquote><p><strong>示例3</strong>:</p><blockquote><p><strong>输入</strong>:nums = [2,4]<br><strong>输出</strong>:6</p></blockquote><p><strong>示例4</strong>:</p><blockquote><p><strong>输入</strong>:nums = [8,10,2]<br><strong>输出</strong>:10</p></blockquote><p><strong>示例5</strong>:</p><blockquote><p><strong>输入</strong>:nums = [14,70,53,83,49,91,36,80,92,51,66,70]<br><strong>输出</strong>:127</p></blockquote><ul><li>思路：将每个数转换为二进制字符串并按由<strong>高位到低位</strong>建立字典树(不能由低到高，因为字典树中树的左右子树的深度未知，需要遍历整个树才能得到答案，基本上就是$O(n^2)$的复杂度了；而由高到低，我们只需要按照有相反的路径就走相反的路径、没有就走相同的路径，尽可能往深的走，那么就一定能得到答案),然后对数组进行遍历，即可得到答案。这道题属于<strong>01字典树</strong>,<strong><em>经典题目</em></strong>。</li></ul></li></ol></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Tries</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Tries <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">Tries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>Tries <span class="token operator">*</span>obj<span class="token punctuation">,</span> string tmpStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Tries <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> childptr <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Tries<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span>childptr<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>Tries <span class="token operator">*</span>obj<span class="token punctuation">,</span> string tmpStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Tries <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token operator">:</span> tmpStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//代码优化版，性能并没有优化</span>            <span class="token comment">/*int childptr = (ch - '0') ^ 1;  //取相反数，0取1，1取0            if(cur->next[childptr])&#123;                res = 2*res + 1;            &#125;else&#123;                childptr ^= 1;                res = 2*res;            &#125;            cur = cur->next[childptr];*/</span>            <span class="token keyword">int</span> childptr <span class="token operator">=</span> <span class="token punctuation">(</span>ch <span class="token operator">-</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>childptr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token comment">//当前位为1</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//相反位不为null</span>                    cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//则往相反位走</span>                    res <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//加上当前位1</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                      cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相反位为null，走同位</span>                    res <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>res<span class="token punctuation">;</span>        <span class="token comment">//当前位相同，不加1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                      <span class="token comment">//当前位为0</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//相反位不为null</span>                    cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//则往相反位走</span>                    res <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>res <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//加上当前位1</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//相反位为null，走同位</span>                    res <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>res<span class="token punctuation">;</span>        <span class="token comment">//当前位相同，不加1</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findMaximumXOR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Tries <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span><span class="token punctuation">(</span>Tries<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        string s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//构建01字典树</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//数转二进制字符串，题目中num&lt;2^31-1,所以最多是30位</span>                s <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token char">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">>></span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            root<span class="token operator">-></span><span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//插入字典树</span>            s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                         <span class="token comment">//清空中间字符串</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span> nums<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                s <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token char">'0'</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>num<span class="token operator">>></span>i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数转二进制字符串</span>            <span class="token punctuation">&#125;</span>            ans <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> root<span class="token operator">-></span><span class="token function">search</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>                         <span class="token comment">//清空中间字符串</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字典树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Value Iteration vs Policy Iteration</title>
      <link href="/2022/03/31/Value-Iteration-vs-Policy-Iteration/"/>
      <url>/2022/03/31/Value-Iteration-vs-Policy-Iteration/</url>
      
        <content type="html"><![CDATA[<h1 id="策略迭代-Policy-Iteration"><a href="#策略迭代-Policy-Iteration" class="headerlink" title=" 策略迭代 Policy Iteration"></a><h1> 策略迭代 Policy Iteration</h1><ul><li>策略迭代包括策略评估(Policy Evaluation)和策略改进(Policy Improvement)两个步骤，通过二者的交替迭代来求解MDP。<ul><li>策略评估<ul><li>给定一个Policy，通过动态规划求价值函数:<script type="math/tex; mode=display">  \begin{equation*}  \begin{split}  V_{t+1}(s) &= \sum\limits_{a\in A}\pi(a|s)\Big(R(s,a) + \gamma \sum\limits_{s^\prime \in S}p(s^\prime|s,a)V_t(s^\prime)\Big)\\  &= R(s) + \gamma \sum\limits_{s^\prime \in S}p(s^\prime|s)V_t(s^\prime)  \end{split}  \end{equation*}</script><blockquote><p>给定了策略，所以在某个状态选择哪个Action已经给定，概率为1，因而可以将式子中的a去掉。</p></blockquote></li></ul></li><li>策略改进<ul><li>通过策略评估所获得的奖励函数和状态转移函数计算Q函数：<script type="math/tex; mode=display">Q_{\pi_i}(s,a) = \sum\limits_{s^\prime \in S}p(s^\prime|s,a)\Big(R(s^\prime,s,a) + \gamma V_{\pi_i}(s^\prime)\Big)</script></li><li>改进策略：采用贪心的策略，每个状态选择Q-value最大的那个动作，即<script type="math/tex; mode=display">\pi_{i+1}(s) = arg \max\limits_{a}Q_{\pi_i}(s,a)</script></li></ul></li><li>策略评估和策略改进交替迭代，最终价值函数和策略将会收敛，此时有：<script type="math/tex; mode=display">Q_\pi(s,\pi^\prime(s)) = \max\limits_{a \in A}Q_\pi(s,a) = Q_\pi(s,\pi(s)) = V_\pi(s)</script>即 <script type="math/tex; mode=display">\pi^*(s) = arg \max\limits_{a}\sum\limits_{s^\prime \in S}(r + \gamma V_{\pi_i}(s^\prime))</script><blockquote><p>上式也称为贝尔曼最优方程，记为<script type="math/tex">V_\pi(s) = \max\limits_{a\in A}Q_\pi(s,a)</script></p></blockquote></li></ul></li></ul><h1 id="值迭代-Value-Iteration"><a href="#值迭代-Value-Iteration" class="headerlink" title=" 值迭代 Value Iteration"></a><h1> 值迭代 Value Iteration</h1><ul><li>为了缩短策略迭代过程中策略评估的时间，可将值迭代理解为策略迭代的改进版本；</li><li><strong>策略迭代每次需要值函数完全收敛的情况下才进行策略更新</strong>，将对策略评估的要求放低，以此提升迭代速度；</li><li>改进方法：使用贝尔曼方程，将策略改进视为价值改进，让策略函数与价值函数同时收敛，每一步求取最大的值函数，具体迭代公式如下：<script type="math/tex; mode=display">V_{k+1}(s) = \max\limits_{a \in A}(R_s^a + \gamma\sum\limits_{s^\prime \in S}P(s^\prime|s,a)V_k(s^\prime))</script></li></ul><blockquote><p>对当前状态s，对每一个可能的动作a都计算才去这个动作后下一个状态的期望值，将最大的期望值作为当前状态的价值函数，直到收敛；<br>与策略迭代相比，没有等到状态价值函数收敛再更新策略，而是根据贪心法寻找最优价值函数，值迭代的过程不会对应任何明确的策略；<br>值迭代是根据状态期望值选择动作，而策略迭代是先估计状态值，再更新策略；</p></blockquote><p><img src="/2022/03/31/Value-Iteration-vs-Policy-Iteration/PI_vs_VI.jpg" alt></p></h1></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> 值迭代 </tag>
            
            <tag> 策略迭代 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Notes on Markov Decision Process</title>
      <link href="/2022/03/28/MDP/"/>
      <url>/2022/03/28/MDP/</url>
      
        <content type="html"><![CDATA[<h1 id="Markov-Decision-Process"><a href="#Markov-Decision-Process" class="headerlink" title=" Markov Decision Process"></a><h1> Markov Decision Process</h1><ul><li><p>简介</p><ul><li><p>马尔可夫链：状态$s_{t+1}$只与上一个状态有关，而与其他历史无关，即</p><ul><li>$p(s_{t+1}|s_t) = p(s_{t+1}|h_t)$</li><li>$p(s_{t+1}|s_t, a_t) = p(s_{t+1}|h_t, a_t)$</li></ul></li><li><p>Markov Reward Process(MRP)</p><ul><li>在马尔可夫链的基础上加入了Reward<ul><li>状态集有限</li><li>Reward: $R(s_t) = \mathbb{E}[r_t|s_t = s]$</li><li>Transition probabilit: $p(s^\prime|s)$</li><li>折扣因子：$\gamma$</li></ul></li><li>状态价值函数：<script type="math/tex; mode=display">\begin{equation*}\begin{split}  V_t(s) &= \mathbb{E}[G_t|s_t = s]\\  &= \mathbb{E}[R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} +... +  + \gamma^{T-t-1} R_{T}|s_t = s]\\  &= \mathbb{E}[R_{t+1} + \gamma V(s_{t+1})|s_t = s]\end{split}\end{equation*}</script>其中$G_t = R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} +… +  + \gamma^{T-t-1} R_{T}$为折扣奖励。</li></ul><blockquote><p>计算实例<br><img src="/2022/03/28/MDP/example%20of%20MRP.png" alt><br>Reward: R = [5, 0 ,0, 0, 0, 0, 10]<br>Trajectory as: $\tau_1 = [s_4, s_5, s_6, s_7]$, $\tau_2 = [s_4, s_3, s_2, s_1]$, $\tau_3 = [s_4, s_5, s_6, s_6]$<br>if $\gamma$ set as $\gamma = 0.5$, then $R(\tau_i)$ can be calculated:<br>&emsp;$R(\tau_1) = 0 + 0.5<em>0 + 0.5^2</em>0 + 0.5^3<em>10 = 1.25$<br>&emsp;$R(\tau_2) = 0 + 0.5</em>0 + 0.5^2<em>0 + 0.5^3</em>5 = 0.625$<br>&emsp;$R(\tau_3) = 0 + 0.5<em>0 + 0.5^2</em>0 + 0.5^3*0 = 0$<br>Value of state $s_4$:①$V(s_4) \approx \frac{1}{N}\sum\limits_{i = 1}\limits^{N}R(\tau_i)$<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;②Bellman equation : $V(s) = R(s) + \gamma \sum\limits_{s^\prime \in S}P(s^\prime|s)V(s^\prime)$<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;$V = (I - \gamma P)^{-1}R$</p><ul><li>状态价值函数计算<ul><li>Monte-Carlo方法<br>随机产生多条轨迹，然后求平均：$V(s) \approx \frac{1}{N}\sum\limits_{i = 1}\limits^{N}R(\tau_i)$</li><li>动态规划(迭代)<br>$V(s) = R(s) + \gamma \sum\limits_{s^\prime \in S}P(s^\prime|s)V(s^\prime)$</li><li>Temporal Difference<br>$V(s) = R_t + V(s^\prime)$</li></ul></li></ul></blockquote></li><li><p>Markov Decision Process(MDP)</p><ul><li>在MRP的基础上加上决策(即加上动作)<ul><li>状态集有限</li><li>动作集有限</li><li>Transition Probability: $p(s_{t+1}|s_t, a_t)$</li><li>Reward: $R(s_t, a_t) = \mathbb{E}[r_t|s_t, a_t]$</li></ul></li><li>Policy of MDP<script type="math/tex; mode=display">\pi(a|s) = p(a_t = a|s_t = s)</script><ul><li>分为确定性和随机性两种，前者输出动作，后者输出每个动作对应的概率</li></ul></li><li>状态动作价值函数<script type="math/tex; mode=display">\begin{equation*}\begin{split}  Q^\pi(s,a) &= \mathbb{E}_\pi[G_t|s_t = s, a_t = a]\\  &= \mathbb{E}_\pi[R_{t+1} + \gamma R_{t+2} + \gamma^2 R_{t+3} +... +  + \gamma^{T-t-1} R_{T}|s_t = s, a_t = a]\\  &= \mathbb{E}_\pi[R_{t+1} + \gamma Q^\pi(s_{t+1}, a_{t+1})|s_t = s, a_t = a]\\  &= R_{t+1} + \gamma \sum\limits_{s^\prime \in S}p(s^\prime|s,a)V^\pi(s^\prime)\end{split}\end{equation*}</script></li></ul></li><li><p>MDP与MRP的转换</p><ul><li>在$\pi$已知的前提下<script type="math/tex; mode=display">p^\pi(s^\prime|s) = \sum\limits_{a \in A}\pi(a|s)p(s^\prime|s,a)</script></li></ul><script type="math/tex; mode=display">R^\pi(s) = \sum\limits_{a \in A}\pi(a|s)R(s,a)</script><script type="math/tex; mode=display">V^\pi(s) = \sum\limits_{a \in A}\pi(a|s)Q^\pi(s,a)</script><script type="math/tex; mode=display">V^\pi(s) = \sum\limits_{a \in A}\pi(a|s)\Big(R(s,a) + \gamma  \sum\limits_{s^\prime \in S}p(s^\prime|s,a)V^\pi(s^\prime)\Big)</script><script type="math/tex; mode=display">Q^\pi(s,a) = R(s,a) + \gamma \sum\limits_{s^\prime \in S}P(s^\prime|s,a)\sum\limits_{a^\prime \in A}\pi(a^\prime|s^\prime)Q^\pi(s^\prime, a^\prime)</script><p><img src="/2022/03/28/MDP/MDP_MRP.png" alt></p></li></ul></li><li><p>MDP的预测与控制</p><ul><li>预测：输入为MDP&lt;$S,A,P,R,\gamma$&gt;和$\pi$或MRP&lt;$S,P^\pi,R^\pi, \gamma$&gt;, 输出为价值函数$V^\pi$</li><li>控制：输入为MDP&lt;$S,A,P,R,\gamma$&gt;，输出为最优价值函数$V^<em>$和最佳策略$\pi^</em>$   </li></ul></li></ul></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Markov Decision Process </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-77</title>
      <link href="/2022/03/26/leetcode-77/"/>
      <url>/2022/03/26/leetcode-77/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-77-组合"><a href="#LeetCode-77-组合" class="headerlink" title=" LeetCode 77. 组合"></a><h2> LeetCode 77. 组合</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/combinations/" title="77.组合">77. 组合</a></li></ul><p>给定两个整数 n 和 k，返回范围 [1, n] 中所有可能的 k 个数的组合。</p><p>你可以按<strong>任何顺序</strong>返回答案。</p><p><strong>示例1:</strong></p><blockquote><p>输入：n = 4, k = 2<br>输出：<br>[<br>&emsp;[2,4],<br>&emsp;[3,4],<br>&emsp;[2,3],<br>&emsp;[1,2],<br>&emsp;[1,3],<br>&emsp;[1,4],<br>]</p></blockquote><p><strong>示例2:</strong></p><blockquote><p>输入：n = 1, k = 1<br>输出：[ [1] ]</p></blockquote><p><strong>提示:</strong></p><ul><li>1 &lt;= n &lt;= 20</li><li>1 &lt;= k &lt;= n</li></ul><h3 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3><blockquote><p>直接进行穷举，当k为2时，直接两层for循环就可以搞定。<br>但是，k值实际上是函数的输入，而k值决定了for循环的层数，因而这种思路无法用迭代来实现，考虑使用递归法。</p></blockquote><ul><li>由于每个值不能重复利用，因而上一层for循环就会决定下一层for循环的起始点，可以在函数参数表中创建一个用来存储循环起始索引，记为<code>startindex</code>。单层循环逻辑如下：<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token operator">--</span><span class="token punctuation">;</span>              <span class="token comment">//回溯</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>函数返回的条件：采用一个暂存数组来记录当前遍历的数值，当暂存数组中的容量达到k时说明已经遍历完成，将暂存数组中的结果保存到结果数组中。逻辑如下：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//将结果保存下来</span>        ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>                             <span class="token comment">//回溯</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/26/leetcode-77/20201123195223940.png" alt></p><blockquote><p>实际上我们可以对循环进行优化：由于题目是要k个数的组合，那么遍历时暂存数组中的数量加上剩下未遍历的数量不足k个数，那么就直接跳出循环，这种优化在回溯算法中称为”剪枝”。</p></blockquote><p>完整代码(已经进行剪枝处理)如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>ret<span class="token punctuation">,</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">backtracking</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt <span class="token operator">></span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cnt<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k<span class="token operator">-</span>cnt<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//剪枝</span>            tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>            cnt<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token comment">//回溯</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-相似题目"><a href="#3-相似题目" class="headerlink" title=" 3 相似题目"></a><h3> 3 相似题目</h3><ul><li><p><a href="https://leetcode-cn.com/problems/combination-sum/" title="39. 组合总和">39. 组合总和</a></p><blockquote><p>题目要求：找出一个数组中总和为目标值的组合，每个数字可<strong>无限制重复被选取</strong>，数组中数字各不相同，要求解集不能包含<strong>重复</strong>的组合。</p></blockquote></li><li><p><a href="https://leetcode-cn.com/problems/combination-sum-ii/" title="40. 组合总和 II">40. 组合总和 II</a></p><blockquote><p>题目要求：找出一个数组中总和为目标值的组合，每个数字<strong>只能用一次</strong>，数组中数字可能相同，要求解集不能包含<strong>重复</strong>的组合。</p></blockquote></li><li><p><a href="https://leetcode-cn.com/problems/combination-sum-iii/" title="216. 组合总和 III">216. 组合总和 III</a></p><blockquote><p>题目要求：在<strong>1-9</strong>数字中选取<strong>k个数</strong>使其总和为目标值，每个数字<strong>只能用一次</strong>，且解集不能包含<strong>重复</strong>的组合。</p></blockquote></li></ul><p>以上三题的思路都一样，只是函数返回的条件以及循环的条件需要进行处理而已。39和216中数字各不相同，代码基本一致；而40中数字可能相同，那么就需要对相同数字进行处理。</p><blockquote><p>先进行排序，然后按”组合”问题的思路进行求解，在循环体中加入判断条件，如果当前值与上一个值相同，则没必要进行下一层的循环，直接跳到不同数字再进行下一层循环，逻辑如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span>startIndex <span class="token operator">&amp;&amp;</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">//相同数字的情况</span>    <span class="token punctuation">&#125;</span>    tmp<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">backtracking</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> n<span class="token punctuation">,</span> target<span class="token punctuation">,</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> returnSize<span class="token punctuation">,</span> returnColumnSizes<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    cnt<span class="token operator">--</span><span class="token punctuation">;</span>    sum <span class="token operator">-=</span> candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p></blockquote></h3></h3>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reinforcement Learning</title>
      <link href="/2022/03/25/RL/"/>
      <url>/2022/03/25/RL/</url>
      
        <content type="html"><![CDATA[<h1 id="Notes-on-RL-Course-of-Hung-yi-Lee"><a href="#Notes-on-RL-Course-of-Hung-yi-Lee" class="headerlink" title=" Notes on RL Course of Hung-yi Lee"></a><h1> Notes on RL Course of Hung-yi Lee</h1><h1 id="Outline"><a href="#Outline" class="headerlink" title=" Outline"></a><h2> Outline</h2></h1><h1 id="Lecture-1"><a href="#Lecture-1" class="headerlink" title=" Lecture 1"></a><h3> <a href="#L1">Lecture 1</a></h3></h1><h1 id="Lecture-2"><a href="#Lecture-2" class="headerlink" title=" Lecture 2"></a><h3> <a href="#L2">Lecture 2</a></h3></h1><h1 id="Lecture-3"><a href="#Lecture-3" class="headerlink" title=" Lecture 3"></a><h3> <a href="#L3">Lecture 3</a></h3></h1><h1 id="Lecture-4"><a href="#Lecture-4" class="headerlink" title=" Lecture 4"></a><h3> <a href="#L4">Lecture 4</a></h3></h1><h1 id="Lecture-5"><a href="#Lecture-5" class="headerlink" title=" Lecture 5"></a><h3> <a href="#L5">Lecture 5</a></h3></h1><h1 id="Lecture-6"><a href="#Lecture-6" class="headerlink" title=" Lecture 6"></a><h3> <a href="#L6">Lecture 6</a></h3></h1><h1 id="Lecture-7"><a href="#Lecture-7" class="headerlink" title=" Lecture 7"></a><h3> <a href="#L7">Lecture 7</a></h3></h1><p>Appendix 1</p><h1 id="Lecture-1-1"><a href="#Lecture-1-1" class="headerlink" title=" Lecture 1"></a><h2> <span id="L1">Lecture 1</span></h2></h1><p>&emsp;&emsp;强化学习的基本思想是通过<strong>Agent与环境的不断交互</strong>，通过一些<strong>奖赏</strong>机制来使Agent逐渐学习出一条最优的决策。Agent在Environment中进行交互，由于Agent采取不同的Action会对Environment的State(对应到Agent的Observation)产生不同的影响，因而Environment会相应地返回不同的Reward，而RL的目标就是最大化最后的reward。</p><p>&emsp;&emsp;当环境的State完全可测时，则该问题可以被建模为马尔可夫决策过程（Markov Decision Process, MDP），此时State就等同于Observation。但事实上环境的State通常是部分可测的，因而也衍生了部分可观测马尔可夫决策过程（Partial Observable Markov Decision Process, POMDP）。</p><blockquote><p>State是环境的状态，而Observation才是Agent的状态。</p></blockquote><p><img src="/2022/03/25/RL/RL_diagram.png" alt></p><ol><li>难点</li></ol><ul><li>延迟性的Reward</li><li>Agent的Action会影响Environment<ul><li>探索</li><li>利用 </li></ul></li></ul><ol><li>RL通常分为Value-based和Policy-based两种，二者结合则是Actor-Critic(AC)。</li></ol><ul><li>Value-based对应的是Critic, 而Policy-based则是Actor.<blockquote><p><strong>Asynchronous Advantage Actor-critic(A3C)</strong><br>Volodymyr Mnih, Adria Puigdomenech Badia, Mehdi Mirza, Alex Graves, Timothy P. Lillicrap, Tim Harley, David Silver Koray Kavukcuoglu, “Asynchronous Methods for Deep Reinforcement Learning”, ICML, 2016.</p></blockquote></li><li><p>Policy-based Approach(Actor is the policy)</p><ul><li>Action = $\pi$(Observation)</li><li><p>DRL三步走</p><ul><li>决定网络的形式：Neural Network<ul><li>Input of NN: Observation</li><li>Output of NN: 每个Action的概率(但不会直接选概率最大的Action)</li></ul></li><li><p>决定评判标准: 整个episode的Reward(类似分类问题中的Loss)</p><ul><li>让Actor $\pi_\theta (s)$进行一个Episode，其中$\theta$为网路的参数，$s$则是state, 在$s_i$时采取$a_i$会获得奖励 $r_i$, 则整个Episode的Reward为：$R_\theta =  \sum_{i=1}^T r_i$.</li><li>由于采用随机性策略，加之环境的随性因素，对于相同的Actor，$R_\theta$都是不尽相同的.</li><li>目标不是使得某一个Episode的Reward最大，而是使得$\mathbb{E}(R_\theta)$最大. </li><li><p>因此，衡量标准就是$\mathbb{E}(R_\theta)$.</p><blockquote><p>$\mathbb{E}(R_\theta)$的计算方法</p><ul><li>An episode is considered as a trajectory $\tau$<br>$\tau = \{s_1, a_1, r_1, s_2, a_2, r_2, …, s_T, a_T, r_T\}$<br>$R(\tau) = \sum\limits^{N}\limits_{n=1}r_n$</li><li>由于随机性，每个$\tau$都对应一个概率$P(\tau|\theta)$,因而可得：<script type="math/tex; mode=display">\mathbb{E}(R_\theta) = \sum_\tau R(\tau)P(\tau|\theta) \approx \frac{1}{N}\sum_{n=1}^N R(\tau^n)</script>其中$\{\tau^1, \tau^2,…, \tau^N\}$为多条trajectory.</li></ul></blockquote></li></ul></li><li><p>更新参数$\theta$: Gradient Ascent 梯度上升</p><ul><li>$\theta^* = \argmax\limits_{\theta}\bar{R}_\theta$ s.t. $\bar{R}_\theta = \sum\limits_{\tau} R(\tau)P(\tau|\theta)$</li><li><p>Gradient ascent:</p><ul><li>start with $\theta^0$</li><li>$\theta^{new} \leftarrow \theta^{old}+\eta\nabla\bar{R}_{\theta^{old}}$<blockquote><ul><li>$\nabla\bar{R}_\theta$的计算方法<script type="math/tex; mode=display">\begin{equation*}\begin{split}\nabla\bar{R}_\theta &= \sum\limits_{\tau}R(\tau)\nabla P(\tau|\theta)\\&= \sum\limits_{\tau}R(\tau)P(\tau|\theta)\frac{\nabla P(\tau|\theta)}{P(\tau|\theta)}\\&= \sum\limits_{\tau}R(\tau)P(\tau|\theta)\nabla logP(\tau|\theta)\\&\approx \frac{1}{N}\sum_{n=1}^N R(\tau^n)\nabla logP(\tau|\theta)\\&= E_{\tau \sim p_\theta(\tau)}[R(\tau)\nabla logp_\theta(\tau)]\end{split}\end{equation*}</script></li><li>$\nabla logP(\tau|\theta)$的计算：<script type="math/tex; mode=display">\begin{equation*}\begin{split}P(\tau|\theta) &=\\&p(s_1)p(a_1|s_1,\theta)p(r_1, s_2|s_1, a_1)p(a_2|s_2, \theta)p(r_2, s_3|s_2, a_2)...\\&= p(s_1)\prod\limits_{t=1}\limits^{T}p(a_t|s_t,\theta)p(r_t,s_{t+1}|s_t,a_t)\end{split}\end{equation*}</script><script type="math/tex; mode=display">\begin{equation*}\begin{split}logP(\tau|\theta)&\\&=p(s_1) + \sum\limits_{t=1}\limits^{T}logp(a_t|s_t,\theta) + logp(r_t,s_{t+1}|s_t,a_t)\\\end{split}\end{equation*}</script>因而可得：<script type="math/tex; mode=display">\nabla logP(\tau|\theta) = \sum\limits_{t=1}\limits^{T}\nabla logp(a_t|s_t,\theta)</script></li><li>最终得到<script type="math/tex; mode=display">\begin{equation*}\begin{split}\nabla\bar{R}_\theta &\approx \frac{1}{N}\sum_{n=1}^N R(\tau^n)\nabla logP(\tau^n|\theta)\\&= \frac{1}{N}\sum\limits_{n=1}\limits^{N}R(\tau^n)\sum\limits_{t=1}\limits^{T_n}\nabla logp(a_t^n|s_t^n,\theta)\\&= \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}R(\tau^n)\nabla logp(a_t^n|s_t^n,\theta)\end{split}\end{equation*}</script></li></ul></blockquote></li></ul></li><li><p>Tricks 1: Add a Baseline</p><ul><li><p>上述推导中，可以得到：$\nabla\bar{R}_\theta \approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}R(\tau^n)\nabla logp(a_t^n|s_t^n,\theta)$.</p></li><li><p>上式的目的其实就是<strong>提高能够使Reward增加的Action的概率增大</strong>，而为负的则会减少，且<strong>对于Reward贡献大的Action增加的概率相比贡献少的提升率要高</strong>(可以把Reward的值当作分类问题中的权重，假设某个Trajectory的Reward为2，那么上式就相当于把这条Trajectory复制两遍，从而更好地提高该Trajectory的概率)。但实际上可能出现某个Action可以使得最后的Reward变大，然而并没有被Sample到，而其他Action也可以使Reward增加，但是增加率不高，根据上式，这些“不是很好的”Action的概率将被提高，而对于没被Sample到的“好”Action概率却被降低了。因此，为避免上面所述的情况，更改上式为：</p><script type="math/tex; mode=display">\nabla\bar{R}_\theta \approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}(R(\tau^n)-b)\nabla logp(a_t^n|s_t^n,\theta)</script><p>即增加一个Baseline作为标准，<strong>“不是很好的”Action的贡献低于Baseline，那么这些Action的概率就会被降低，从而间接地提高了没被Sample到地“好”Action的概率</strong>。</p><p>Baseline的设计方法通常是：$b \approx \mathbb{E}[R(\tau)]$.</p></li></ul></li><li>Trick 2：Assign Suitable Credit<ul><li>根据推导出来的公式，对于某一个Trajectory $\tau^i$，其中每个Action的权重都是那个Trajectory的Reward(即$R[\tau^i]$), 但并不是$\tau^i$中的每个$a^i_t$都是利于增加$R[\tau^i]$. 因此，<strong>对不同的Action给予不同的权重Weight更为合理</strong>。</li><li>实现方式：修改上式为<script type="math/tex; mode=display">\begin{equation*}\begin{split}\nabla\bar{R}_\theta &\approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}(\sum\limits_{t^{\prime}=t}\limits^{T_n}r^n_{t^\prime}-b)\nabla logp(a_t^n|s_t^n,\theta)\\&\Rightarrow \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}(\sum\limits_{t^{\prime}=t}\limits^{T_n}\gamma ^{t^\prime-t}r^n_{t^\prime}-b)\nabla logp(a_t^n|s_t^n,\theta)\end{split}\end{equation*}</script><blockquote><p>加入discount factor(好像变成了MDP了)</p></blockquote></li><li>然后将以上式子中的$(\sum\limits_{t^{\prime}=t}\limits^{T_n}\gamma ^{t^\prime-t}r^n_{t^\prime}-b)$用一个<strong>Advantage Function</strong> $A^\theta(s_t, a_t)$来代替.（<strong>由Critic评估</strong>），则变成：<script type="math/tex; mode=display">\nabla\bar{R}_\theta = E_{(s_t,a_t)\sim \pi_\theta}[A^\theta(s_t, a_t)\nabla log p_{\theta}(a_t|s_t)]</script></li></ul></li></ul></li></ul></li></ul></li><li>Value-based Approach（Critic）<ul><li><ol><li>Value-based的方法并不直接决定Agent的Action，而是给出Actor $\pi$在状态$s_t$时的评价，即给出$V^\pi(s)$</li></ol><ul><li>Mante-Carlo(对整个Episode)</li><li>Temporal Difference(对每一步)</li></ul></li><li><ol><li>给出Actor $\pi$在状态$s_t$采取$a_t$时的评价$Q^\pi(s, a)$</li></ol></li></ul></li></ul><p><img src="/2022/03/25/RL/Q_learning.png" alt></p><ul><li><p>Actor + Critic: 由于<strong>环境具有随机性</strong>，AC算法让Agent不再跟环境反馈的奖励进行学习，而是跟着Critic学习</p><ul><li>Advantage Actor-Critic(A2C)</li><li>Asynchronous Advantage Actor-Critic(A3C)<ul><li>有一个global Actor和global Critic</li><li>开“分身”复制global param进行采样、计算梯度，最后对global param进行同步更新(要多个machine)<h1 id="Lecture-2-1"><a href="#Lecture-2-1" class="headerlink" title=" Lecture 2"></a><h2> <span id="L2">Lecture 2</span></h2></h1></li></ul></li></ul></li><li><p>Policy Gradient属于on-policy的方法，而Proximal Policy Optimization(PPO)则是PG的变型，属于off-policy方法，并加上某些约束。</p><ul><li>on-policy: 训练的Agent和与环境互动的Agent是同一个(一边互动一边学习)。</li><li><p>off-policy：训练的Agent和与环境互动的Agent不是同一个。</p><ul><li><strong>PG中每次Sample的数据都只用一次</strong>，更新完参数$\theta$后需要Sample新的数据进行训练。<blockquote><p>Importance Sampling:</p><script type="math/tex; mode=display">\begin{equation*}\begin{split}E_{x\sim p}[f(x)] &= \int f(x)p(x)dx = \int f(x)\frac{p(x)}{q(x)}q(x)dx\\&= E_{x\sim q}[f(x)\frac{p(x)}{q(x)}]\end{split}\end{equation*}</script><p>注意：p(x)和q(x)区别不能过大，否则采样不准确。</p><script type="math/tex; mode=display">\begin{equation*}Var_{x\sim p}[f(x)] = E_{x\sim p}[f(x)^2] - (E_{x\sim p}[f(x)])^2\end{equation*}</script><script type="math/tex; mode=display">\begin{equation*}\begin{split}Var_{x\sim q}[f(x)] &= E_{x\sim q}[(f(x)\frac{p(x)}{q(x)})^2] - (E_{x\sim q}[f(x)\frac{p(x)}{q(x)}])^2\\&= \int f(x)^2\frac{p(x)^2}{q(x)^2}q(x)dx - (E_{x\sim p}[f(x)])^2\\&= \int f(x)^2\frac{p(x)}{q(x)}p(x)dx - (E_{x\sim p}[f(x)])^2\\&= E_{x\sim p}[f(x)^2\frac{p(x)}{q(x)}] - - (E_{x\sim p}[f(x)])^2\end{split}\end{equation*}</script><p>如果p(x)和q(x)区别过大，则$Var_{x\sim p}[f(x)]$和$Var_{x\sim q}[f(x)]$不对等，导致采样失真。</p></blockquote></li></ul><ul><li>应用Importance Sampling，可以将期望奖励的梯度做如下转换：<blockquote><script type="math/tex; mode=display">\nabla \bar{R}_\theta =  E_{\tau \sim p_\theta(\tau)}[R(\tau)\nabla logp_\theta(\tau)] = E_{\tau \sim p_\theta^\prime(\tau)}[\frac{p_\theta(\tau)}{p_{\theta^\prime}(\tau)}R(\tau)\nabla log p_{\theta}(\tau)]</script></blockquote></li></ul><p>从而实现在$\theta^\prime$下采集数据喂给$\theta$，即实现on-policy到off-policy的转换。</p><ul><li>加上L1中提到的Trick后，则变成：<blockquote><script type="math/tex; mode=display">\begin{equation*}\begin{split}\nabla\bar{R}_\theta &= E_{(s_t,a_t)\sim \pi_\theta}[A^\theta(s_t, a_t)\nabla log p_{\theta}(a_t|s_t)]\\&= E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{P_\theta(s_t, a_t)}{P_{\theta^\prime}(s_t, a_t)}A^{\theta^\prime}(s_t, a_t)\nabla log p_{\theta}(a_t|s_t)]\\&=E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^\prime}(a_t|s_t)}\frac{p_\theta(s_t)}{p_{\theta^\prime}(s_t)}A^{\theta^\prime}(s_t, a_t)\nabla log p_{\theta}(a_t|s_t)]\\&\approx E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^\prime}(a_t|s_t)}A^{\theta^\prime}(s_t, a_t)\nabla log p_{\theta}(a_t|s_t)]\end{split}\end{equation*}</script></blockquote></li></ul><p>从而得到新的Objective Function为：$J^{\theta^\prime}(\theta) = E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^\prime}(a_t|s_t)}A^{\theta^\prime}(s_t, a_t)]$</p></li><li><p>PPO: <script type="math/tex">J_{PPO}^{\theta^\prime} = J^{\theta^\prime}(\theta) - \beta KL(\theta, \theta^\prime), J^{\theta^\prime}(\theta) = E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^\prime}(a_t|s_t)}A^{\theta^\prime}(s_t, a_t)]</script></p></li><li>PPO2: <script type="math/tex">J_{PPO2}^{\theta^k} \approx \sum\limits_{(s_t, a_t)}\min \Bigg(\frac{p_\theta(a_t|s_t)}{p_{\theta^k}(a_t|s_t)}A^{\theta^k}(s_t, a_t), clip \Big(\frac{p_\theta(a_t|s_t)}{p_{\theta^k}(a_t|s_t)}, 1-\epsilon, 1+\epsilon \Big)A^{\theta^k}(s_t, a_t)\Bigg)</script><br>其中，$clip()$定义为：<script type="math/tex; mode=display">\begin{equation*}clip(X, Y, Z) = \left\{ \begin{matrix} X, other   \\ Y, if X < Y\\ Z, if X > Z\\ \end{matrix} \right.\end{equation*}</script></li><li>TRPO:<script type="math/tex">J_{RRPO}^{\theta^\prime} = E_{(s_t,a_t)\sim \pi_{\theta^\prime}}[\frac{p_\theta(a_t|s_t)}{p_{\theta^\prime}(a_t|s_t)}A^{\theta^\prime}(s_t, a_t)], KL(\theta, \theta^\prime)<\delta</script><blockquote><p>这里的KL距离并不是指参数上的距离，而是其行为上的区别。，即喂同样的State，输出的Action类似。</p></blockquote></li></ul></li></ul><h1 id="Lecture-3-1"><a href="#Lecture-3-1" class="headerlink" title=" Lecture 3"></a><h2> <span id="L3">Lecture 3</span></h2></h1><ol><li>Q-learning是一种Value-based的方法，不直接决定Action，只评估Actor的好坏。</li></ol><ul><li>状态价值函数： $V^\pi(s)$, 在某个状态$s$时给出Actor $\pi$的Reward(可以看作获得奖励的潜力). $V^\pi(s)$的值<strong>取决于Actor本身以及环境的状态$s$</strong>.<ul><li>评价方法：<ul><li>Monte-Carlo based approach: 需要跑完整个trajectory才更新一次参数<blockquote><p>$V^\pi(s_a) = G_a$<br>$V^\pi(s_b) = G_b$<br>&emsp;&emsp;&emsp;…</p></blockquote></li><li>Temporal-difference(TD) approach<blockquote><p>$V^\pi(s_t) - V^\pi(s_{t+1}) \rightarrow r_t$<br><img src="/2022/03/25/RL/mc_vs_td.png" alt></p></blockquote></li></ul></li></ul></li><li>状态行为价值函数：$Q^\pi(s,a)$, 在某个状态$s$下强制采取动作$a$带来的Reward(但实际并不一定采取该行为，即这个Reward是preditive)，这种方法由于需要穷举每个可能的Action，所以只适合具有有限个Action的情况.<ul><li>Trick 1: 固定$Q^\pi(s_{t+1},a_{t+1})$的Q-Table，只更新$Q^\pi(s_{t},a_{t})$的Q-Table，经过若干个Step再将后者复制到前者中。</li><li>Trick 2: 加入Exploration机制<ul><li>Epsilon Greedy：当(random() &lt; $\epsilon$时采取随机Action，当random()&gt;1-$\epsilon$时采取$\arg \max\limits_{a} Q(s,a)$).($\epsilon$随学习的进行而减小).</li><li>Boltzmann Exploration: $P(a|s) = \frac{\exp{Q(s,a)}}{\sum\limits_{a}{\exp{Q(s,a)}}}$(相当于把Q-Table某一行的每一个Action对应的Value进行归一化，然后按照归一化后的数值作为概率选择Action)</li></ul></li><li>Trick 3: 创建一个缓冲区，存放过往的数据，每次都从缓冲区随机取若干个数据进行学习，并将新的数据存进缓冲区(因而缓冲区的数据可能来自不同的policy)，当缓冲区满了才将旧数据丢弃。<blockquote><p>采用Trick3，实际上变成了off-policy-like方法.</p></blockquote></li></ul></li><li>Q-learning的实质：使得$Q^\pi(s_t,a_t)$和$Q^\pi(s_{t+1},a_{t+1})$的差变小。</li></ul><p><img src="/2022/03/25/RL/Q_learning.png" alt></p><ol><li><p>DQN的一些改进版本</p><ul><li><p>Double DQN</p><ul><li>解决DQN中的Q-value被高估的问题</li><li>神经网络的估计误差的存在会导致某些Action的Q-value被高估，而DQN中会选择Q-value中最大值加上Reward来作为Target，从而使得原本的Q-value接近于Target，进而导致被“高估”的动作的Q-value越来越大。</li><li>Double DQN的解决办法: 用一个Q-network选择价值最高的Action，而Action的Q-value由另一个Q-network来评估。即：<script type="math/tex; mode=display">Q(s_t,a_t) \leftarrow r_t + Q^\prime\Big(s_{t+1}, arg \max\limits_{a}Q(s_{t+1}, a)\Big)</script><ul><li>实现：用DQN中待更新的Q-network来选Action，用Target Q-network来评估Q-value.</li></ul></li></ul></li><li><p>Dueling DQN</p><ul><li>更改了DQN的架构：两个输出，一个为$V(s)$, 另一个为$A(s,a)$, 二者的加和为Q-value, 即$Q(s,a) = A(s,a) + V(s)$</li><li>好处：即使某个A-S没被Sample到，其对应的Q-value可以通过修改V(s)来修改，即不需要所有的动作-状态对都被采样，提高数据的利用效率。<ul><li>由于希望Network尽可能地修改$V(s)$而不是修改$A(s,a)$，可以添加一个约束：即$A(s,a)$每一列的加和为0</li><li>实现方法：将Q-network的输出中的$A(s,a)$先进行处理，使其列的加和为0，再进行输出的合并得到Q-table。</li></ul></li></ul></li><li>Noisy Net: 在<strong>每个Episode开始前</strong>对Q-network的参数加上Gaussian noise<ul><li>与$\epsilon$-greedy的区别：Noisy Net是直接在参数上加noise，但最后对于相同(相似)的State,采取的动作都会是最优的，其<strong>探索是与状态有关的</strong>，即State-dependent Exploration；而后者则是在Action上加noise,即对于同样的State，Actor采取的动作可能是不同的,因而这种的做法的<strong>探索都是随机的</strong>。</li></ul></li><li>Distributional Q-function：原本的DQN的输出的Q-value的期望，而这种方法则是输出其分布<ul><li>应用：不同的分布可能具有相同的期望值，但是其方差不同，方差较大者风险也较大，因而可以加入一个网络来进行风险的规避.</li></ul></li></ul></li><li>对于动作空间是连续性，可以采用：①对动作空间进行采样，但这种办法会降低精确度；②通过梯度上升法来解决最优问题；③人为设计Q-function.<br><img src="/2022/03/25/RL/tip%20on%20q%20learning2.png" alt></li></ol><h1 id="Lecture-4-1"><a href="#Lecture-4-1" class="headerlink" title=" Lecture 4"></a><h2> <span id="L4">Lecture 4</span></h2></h1><ol><li><p>Advantage Actor-Critic(A2C)</p><script type="math/tex; mode=display">\nabla \bar{R}_\theta \approx \frac{1}{N}\sum\limits_{n=1}\limits^{N}\sum\limits_{t=1}\limits^{T_n}\Big(r_t^n + V^\pi(s_{t+1}^n) - V^\pi(s_t^n)\Big) \nabla log p_\theta(a_t^n|s_t^n)</script><ul><li>Tips<ul><li>Actor和Critic共享参数<br><img src="/2022/03/25/RL/A2C.png" alt></li></ul></li></ul></li><li><p>Asynchronous Advantage Actor-Critic(A3C)<br> <img src="/2022/03/25/RL/A3C.png" alt></p></li><li><h1 id="Lecture-5-1"><a href="#Lecture-5-1" class="headerlink" title=" Lecture 5"></a><h2> <span id="L5">Lecture 5</span></h2></h1></li><li><p>Model-free和Model-based的区别<br>&emsp;<br>Model-based: 概率函数(Probability function)和奖励函数(Reward Function)均已知（值迭代和策略迭代都是Model-based的方法，二者均需要得到环境的转移和奖励函数，迭代过程中不需要和环境进行交互）</p><blockquote><p>概率函数实际上是反映环境的随机性。</p></blockquote><p>Model-free: 采用V函数来评价当前状态的好坏，使用Q函数来判断某个状态下某一动作的好坏，通过交互、试错的方法进行环境的探索和策略的优化。Model-free没有获取环境的状态转移和奖励函数，我们让 agent 跟环境进行交互，采集到很多的轨迹数据，agent 从轨迹中获取信息来改进策略，从而获得更多的奖励。</p></li></ol><p>&emsp;</p><ol><li><p>Model-free Prediciton</p><ul><li><p>Monte-Carlo Policy Evaluation</p><ul><li>采用策略$\pi$计算折扣奖励Return：$G_t = R_{t+1} + \gamma R_{t+2}+ \gamma^2 R_{t+3} + …$</li><li>Sample足够多的Trajectory，循环计算每条Trajectory对应的折扣奖励，最后进行平均得到价值函数$V^\pi(s)$<blockquote><p>MC采取经验平均回报(Empirial mean return)的方式来估计价值函数；只能应用在有限回合的MDP问题(Episodic MDPs)</p></blockquote></li><li>增量MC<ul><li>MC算法如下：<blockquote><p>估计V(s)<br>&emsp;&emsp;$N(s)\leftarrow N(s) + 1$<br>&emsp;&emsp;$S(S)\Leftarrow S(s) + G_t$<br>&emsp;&emsp;$v(s) = S(s)/N(s)$<br>根据大数定律，当$N(s)\rightarrow \infty$时，有$V(s)\rightarrow V^\pi(s)$</p></blockquote></li><li>增量MC：<blockquote><p>估计V(s)<br>&emsp;&emsp;$N(S_t)\leftarrow N(S_t) + 1$<br>&emsp;&emsp;$V(S_t)\Leftarrow V(s) + \frac{1}{N(S_t)}(G_t - V(S_t))$<br>将$\frac{1}{N(S_t)}$视为学习率，则</p><script type="math/tex; mode=display">V(S_t)\Leftarrow V(s) + \alpha(G_t - V(S_t))</script></blockquote></li></ul></li><li>MC和DP的区别：前者是通过上一时刻的下一状态的价值函数来更新当前时刻当前状态的价值函数，即用$V_{i-1}(s^\prime)$来更新$V_{i}(s)$(其中i为迭代次数)；后者则是通过empirical mean return （实际得到的收益）来更新，采用的是实际发生的Trajectory，并且只更新与这条Trajectory有关的状态(直接通过轨迹来更新，其实已经暗含了环境的随机性，只要轨迹的数量足够多，Agent仍然可以学会环境的随机性)</li></ul></li><li><p>Temporal Difference(TD) learning</p><ul><li>对于某个给定的策略，在线(online)地算出它的价值函数，每往前若干步就更新上一时刻的V值<ul><li>TD(0):<blockquote><p>$V(s_t)\leftarrow v(s_t) + \alpha\big(R_{t+1}+\gamma v(s_{t+1}) - v(s_t)\big)$     </p></blockquote></li><li>n步TD：<blockquote><p>$G_t^n = R_{t+1} + \gamma R_{t+2} + … + \gamma^{n-1} R_{t+n}+\gamma^n v(S_{t+n})$<br>$v(S_t) \leftarrow v(S_t) + \alpha(G^n_t - v(S_t))$</p></blockquote></li></ul></li></ul></li></ul></li><li><p>Model-free control</p><ul><li>Model-based Policy Iteration: 对以下两个式子进行迭代直至收敛<blockquote><script type="math/tex; mode=display">q_{\pi_i}(s,a) = R(s,a) + \gamma \sum\limits_{s^\prime \in S}P(s^\prime|s,a)v_{\pi_i}(s^\prime)</script><script type="math/tex; mode=display">\pi_{i+1}(s) = arg \max\limits_{a}q_{\pi_i}(s,a)</script></blockquote></li><li>Model-free中$R(s,a)$和$P(s^\prime|s,a)$均未知，因而采用MC的方法估计Q函数，然后同样采用贪心的想法更新改进策略。</li></ul></li><li><p>Sarsa: 同策略时序差分控制<br>将时序差分法更新V值的过程，更改为更新Q，即：</p><script type="math/tex; mode=display">Q(s_t,a_t)\leftarrow Q(s_t, a_t) + \alpha\Big(r + \gamma Q(s_{t+1},a_{t+1})-Q(s_t,a_t)\Big)</script><blockquote><p>对于一条轨迹而言，Q值就等同于V值，且有：$Q(s_t,a_t) = r + \gamma Q(s_{t+1},a_{t+1})$</p></blockquote></li></ol><ul><li><p>n步Sarsa</p><script type="math/tex; mode=display">q_t^{(n)} = R_{t+1}+\gamma R_{t+2} + ... + \gamma^{n-1}Q(S_{t+n},A_{t+n})</script><ul><li>更新方式：<script type="math/tex; mode=display">Q(s_t,a_t)\leftarrow Q(s_t, a_t) + \alpha\Big(q^{(n)}_t-Q(s_t,a_t)\Big)</script><blockquote><p>n = 1(Sarsa) $q_t^{(1)} = R_{t+1}+\gamma Q(S_{t+1}, A_{t+1})$<br>n = 2        $q_t^{(2)} = R_{t+1}+\gamma R_{t+2} + \gamma^2Q(S_{t+2}, A_{t+2})$<br>…<br>n = $\infty$(MC)  $q_t^\infty = R_{t+1}+\gamma R_{t+2} + … + \gamma^{T-t-1}R_T$</p></blockquote></li></ul></li><li><p>Sarsa($\lambda$)</p><script type="math/tex; mode=display">q^\lambda_t = (1-\lambda)\sum\limits_{n=1}\limits^{\infty}\lambda^{n-1}q_t^{n}</script><script type="math/tex; mode=display">Q(s_t,a_t)\leftarrow Q(s_t, a_t) + \alpha\Big(q^{(\lambda)}_t-Q(s_t,a_t)\Big)</script></li></ul><h1 id="Lecture-6-1"><a href="#Lecture-6-1" class="headerlink" title=" Lecture 6"></a><h2> <span id="L6">Lecture 6</span></h2></h1><h1 id="Lecture-7-1"><a href="#Lecture-7-1" class="headerlink" title=" Lecture 7"></a><h2> <span id="L7">Lecture 7</span></h2></h1></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Simple Example of Q-learning</title>
      <link href="/2022/03/24/simple_example_qn/"/>
      <url>/2022/03/24/simple_example_qn/</url>
      
        <content type="html"><![CDATA[<h1 id="Q-learning"><a href="#Q-learning" class="headerlink" title=" Q-learning"></a><h1> Q-learning</h1><h1 id="思路"><a href="#思路" class="headerlink" title=" 思路"></a><h2> 思路</h2></h1><ul><li><p>Value function:</p><script type="math/tex; mode=display">V^\pi = \sum\limits_{a \in A}\pi(a|s)Q^\pi(s,a)</script><script type="math/tex; mode=display">Q^\pi(s,a) = R^\pi(s,a) + \gamma \sum\limits_{s^\prime \in S}p(s^\prime|s,a)V^\pi(s^\prime)</script></li><li><p>Q-learning求解最优策略的方法就是直接选Q-value最大的动作，即</p><script type="math/tex; mode=display">\pi^* = arg \max\limits_{a}Q^{\pi}(s,a)</script><p>则有<script type="math/tex">V^*(s) = \max Q^\pi(s,a)</script></p><p>将$V^*(s) = \max Q^\pi(s,a)$带入动作价值函数中，有：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}Q(s,a) &= R(s,a) + \gamma \sum\limits_{s^\prime \in S}p(s^\prime|s,a)\max Q(s^\prime,a^\prime)\\      &= R(s,a) + \gamma \max Q(s^\prime,a^\prime)\end{split}\end{equation}</script></li></ul><p>我们希望式子(1)能够近似成立，即目标函数为：</p><script type="math/tex; mode=display">J = \min(R(s,a) + \gamma Q^\pi(s^\prime, a^\prime) - Q^\pi(s,a))</script><p>因而Q-table的更新可以转换为regression问题，进而可以按下式进行更新：</p><script type="math/tex; mode=display">Q^{new}(s,a) \leftarrow Q^{old}(s,a) + \alpha \big(R(s,a) + \gamma \max\limits_{a^\prime}Q^{old}(s^\prime, a^\prime) - Q^{old}(s,a)\big)</script><blockquote><p>注意：训练前期Agent被期望尽可能地在未知环境中进行探索以更新Q-table，因而<strong>设定一个$\epsilon$-greedy机制</strong>，并采用random()获得随机数，当所获得的随机数大于$\epsilon$时任选动作，当小于$\epsilon$时则选择Q-value中最大值对应的动作。<strong>$\epsilon$的值应该随着训练的进行而变小</strong>,前期需要尽可能地探索(Exploation)，而后期则更注重利用(Eploitation).</p><ul><li>探索机制两种实现方法<ul><li>$\epsilon-greedy$<script type="math/tex; mode=display">\begin{equation}\pi = \left\{ \begin{split}    &arg \max\limits_a Q(s,a), with\;probability\;1 - \epsilon\\    &random,\;otherwise\end{split}\right.\end{equation}</script></li><li>Boltzmann Exporation<script type="math/tex; mode=display">P(a|s) = \frac{exp\big(Q(s,a)\big)}{\sum\limits_a exp\big(Q(s,a)\big)}</script></li></ul></li></ul></blockquote><p>算法流程图：</p><p><img src="/2022/03/24/simple_example_qn/Q_learning.png" alt></p><p>实例代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> timenp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>               <span class="token comment"># reproducible，产生伪随机数</span>N_STATES <span class="token operator">=</span> <span class="token number">6</span>                    <span class="token comment"># state space</span>ACTIONS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">,</span> <span class="token string">'right'</span><span class="token punctuation">]</span>     <span class="token comment"># action space</span>EPSILON <span class="token operator">=</span> <span class="token number">0.9</span>                   <span class="token comment"># greedy police</span>ALPHA <span class="token operator">=</span> <span class="token number">0.1</span>                     <span class="token comment"># learning rate</span>LAMBDA <span class="token operator">=</span> <span class="token number">0.9</span>                    <span class="token comment"># discount rate for reward</span>MAX_EPISODES <span class="token operator">=</span> <span class="token number">30</span>               <span class="token comment"># maximum episodes, 玩的回合数</span>FRESH_TIME <span class="token operator">=</span> <span class="token number">0.3</span>                <span class="token comment"># 每个Episode结束后休息的时长</span><span class="token keyword">def</span> <span class="token function">build_q_table</span><span class="token punctuation">(</span>n_states<span class="token punctuation">,</span> actions<span class="token punctuation">)</span><span class="token punctuation">:</span>           <span class="token comment"># 创建Q-table</span>    table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>        np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_states<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>actions<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment"># q_table initial values as 0</span>        columns<span class="token operator">=</span>actions<span class="token punctuation">,</span>                        <span class="token comment"># 列标签为action</span>    <span class="token punctuation">)</span>    <span class="token comment"># print(table)   # show table</span>    <span class="token keyword">return</span> table<span class="token comment">#build_q_table(N_STATES, ACTIONS)</span><span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> q_table<span class="token punctuation">)</span><span class="token punctuation">:</span>    state_actions <span class="token operator">=</span> q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>state<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>          <span class="token comment"># 将q_table中某一行赋值到state_actions中</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> EPSILON<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>state_actions<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># action-greedy or state-action（判断是否为第一步）</span>        action_name <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ACTIONS<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        action_name <span class="token operator">=</span> state_actions<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 取Q-table中当前行中的大者对应的标签</span>    <span class="token keyword">return</span> action_name      <span class="token comment"># 返回标签名，即动作名left or right</span><span class="token keyword">def</span> <span class="token function">get_any_feedback</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># This is how agent will interact with the environment</span>    <span class="token keyword">if</span> A <span class="token operator">==</span> <span class="token string">'right'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> S <span class="token operator">==</span> N_STATES <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">:</span>       <span class="token comment"># 当前到了终点前一格，如果还是往右就是终点</span>            S_ <span class="token operator">=</span> <span class="token string">'terminal'</span>            R <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                       <span class="token comment"># 位置加1</span>            S_ <span class="token operator">=</span> S <span class="token operator">+</span> <span class="token number">1</span>            R <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        R <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">if</span> S <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                   <span class="token comment"># 在第一格，不能再往左</span>            S_ <span class="token operator">=</span> S        <span class="token keyword">else</span><span class="token punctuation">:</span>                       <span class="token comment"># 位置减1</span>            S_ <span class="token operator">=</span> S <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">return</span> S_<span class="token punctuation">,</span> R<span class="token keyword">def</span> <span class="token function">update_env</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 环境更新，env_step</span>    env_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'-'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>N_STATES<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token string">'T'</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> S <span class="token operator">==</span> <span class="token string">'terminal'</span><span class="token punctuation">:</span>        interaction <span class="token operator">=</span> <span class="token string">'Episode %s: total_steps = %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>episode<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r&#123;&#125;'</span><span class="token punctuation">.</span> <span class="token builtin">format</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r                            '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        env_list<span class="token punctuation">[</span>S<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span>        interaction <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>env_list<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>interaction<span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>FRESH_TIME<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">RL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    q_table <span class="token operator">=</span> build_q_table<span class="token punctuation">(</span>N_STATES<span class="token punctuation">,</span> ACTIONS<span class="token punctuation">)</span>  <span class="token comment"># build q table</span>    <span class="token comment"># train</span>    <span class="token keyword">for</span> episode <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>MAX_EPISODES<span class="token punctuation">)</span><span class="token punctuation">:</span>         step_counter <span class="token operator">=</span> <span class="token number">0</span>        S <span class="token operator">=</span> <span class="token number">0</span>                                   <span class="token comment"># initial position</span>        is_terminated <span class="token operator">=</span> <span class="token boolean">False</span>                   <span class="token comment"># bool flag for judging whether the agent arrive at the terminal or not</span>        update_env<span class="token punctuation">(</span>S<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> is_terminated<span class="token punctuation">:</span>            A <span class="token operator">=</span> choose_action<span class="token punctuation">(</span>S<span class="token punctuation">,</span> q_table<span class="token punctuation">)</span>   <span class="token comment">#选择动作</span>            S_<span class="token punctuation">,</span> R <span class="token operator">=</span> get_any_feedback<span class="token punctuation">(</span>S<span class="token punctuation">,</span> A<span class="token punctuation">)</span>            q_predict <span class="token operator">=</span> q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>S<span class="token punctuation">,</span> A<span class="token punctuation">]</span>   <span class="token comment"># q_predict对应更新前的q-value</span>            <span class="token keyword">if</span> S_ <span class="token operator">!=</span> <span class="token string">'terminal'</span><span class="token punctuation">:</span>                q_target <span class="token operator">=</span> R <span class="token operator">+</span> LAMBDA <span class="token operator">*</span> q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>S_<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                q_target <span class="token operator">=</span> R                        <span class="token comment"># 到达终点，没有下一个table了</span>                is_terminated <span class="token operator">=</span> <span class="token boolean">True</span>                <span class="token comment"># 标志位置真</span>            q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>S<span class="token punctuation">,</span> A<span class="token punctuation">]</span> <span class="token operator">+=</span> ALPHA <span class="token operator">*</span> <span class="token punctuation">(</span>q_target <span class="token operator">-</span> q_predict<span class="token punctuation">)</span>      <span class="token comment"># update q_table</span>            S <span class="token operator">=</span> S_            update_env<span class="token punctuation">(</span>S<span class="token punctuation">,</span> episode<span class="token punctuation">,</span> step_counter<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            step_counter <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> q_table<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    q_table <span class="token operator">=</span> RL<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\r\nQ-table:\n'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>q_table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="CliffWalking-v0"><a href="#CliffWalking-v0" class="headerlink" title=" CliffWalking-v0"></a><h3> CliffWalking-v0</h3></h1><h3 id="1-Q-learning实现"><a href="#1-Q-learning实现" class="headerlink" title=" 1 Q-learning实现"></a><h4> 1 Q-learning实现</h4></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> time<span class="token keyword">import</span> gym<span class="token keyword">class</span> <span class="token class-name">QLearningAgent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  n_state<span class="token punctuation">,</span> n_action<span class="token punctuation">,</span> learning_rate<span class="token punctuation">,</span> max_steps<span class="token punctuation">,</span> epsilon<span class="token punctuation">,</span> discounted_factor<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>EPSILON <span class="token operator">=</span> epsilon      <span class="token comment"># epsilon greedy</span>        self<span class="token punctuation">.</span>ALPHA <span class="token operator">=</span> learning_rate       <span class="token comment"># learning rate</span>        self<span class="token punctuation">.</span>GAMMA <span class="token operator">=</span> discounted_factor        self<span class="token punctuation">.</span>MAX_STEPS <span class="token operator">=</span> max_steps        <span class="token comment"># self.Q_table = np.zeros((n_state, n_action))</span>        self<span class="token punctuation">.</span>Q_table <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>            np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_state<span class="token punctuation">,</span> n_action<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># q_table initial values as 0</span>        <span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Q_table<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> observation<span class="token punctuation">)</span><span class="token punctuation">:</span>        state_action <span class="token operator">=</span> self<span class="token punctuation">.</span>Q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>observation<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token operator">-</span>self<span class="token punctuation">.</span>EPSILON<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>state_action<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> state_action<span class="token punctuation">.</span>idxmax<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> state<span class="token punctuation">,</span> observation<span class="token punctuation">,</span> action<span class="token punctuation">,</span> r<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">:</span>        q_predict <span class="token operator">=</span> self<span class="token punctuation">.</span>Q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>state<span class="token punctuation">,</span> action<span class="token punctuation">]</span>        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            q_target <span class="token operator">=</span> r        <span class="token keyword">else</span><span class="token punctuation">:</span>            q_target <span class="token operator">=</span> r <span class="token operator">+</span> self<span class="token punctuation">.</span>GAMMA <span class="token operator">*</span> self<span class="token punctuation">.</span>Q_table<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>observation<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Q_table<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>state<span class="token punctuation">,</span> action<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>ALPHA <span class="token operator">*</span> <span class="token punctuation">(</span>q_target <span class="token operator">-</span> q_predict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> episode<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        step_counter <span class="token operator">=</span> <span class="token number">0</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            observation<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>state<span class="token punctuation">,</span> observation<span class="token punctuation">,</span> action<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">)</span>            step_counter <span class="token operator">+=</span> <span class="token number">1</span>            state <span class="token operator">=</span> observation            total_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> done <span class="token keyword">or</span> step_counter <span class="token operator">==</span> self<span class="token punctuation">.</span>MAX_STEPS<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> step_counter<span class="token punctuation">,</span> total_reward    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        state <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        step_counter <span class="token operator">=</span> <span class="token number">0</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>            action <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            observation<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>action<span class="token punctuation">)</span>            step_counter <span class="token operator">+=</span> <span class="token number">1</span>            state <span class="token operator">=</span> observation            total_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> done<span class="token punctuation">:</span>                <span class="token keyword">break</span>        env<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> step_counter<span class="token punctuation">,</span> total_rewardenv <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"CliffWalking-v0"</span><span class="token punctuation">)</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    agent <span class="token operator">=</span> QLearningAgent<span class="token punctuation">(</span>        n_state<span class="token operator">=</span>env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>n<span class="token punctuation">,</span>        n_action<span class="token operator">=</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n<span class="token punctuation">,</span>        learning_rate<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>        max_steps<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>        epsilon<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>        discounted_factor<span class="token operator">=</span><span class="token number">0.95</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rStart training...\n"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> episode_counter <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ep_steps<span class="token punctuation">,</span> ep_reward <span class="token operator">=</span> agent<span class="token punctuation">.</span>train<span class="token punctuation">(</span>episode_counter<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rEpisode: %d     Total reward: %.1f     Steps: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>episode_counter<span class="token punctuation">,</span> ep_reward<span class="token punctuation">,</span> ep_steps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rTraining Completed!!!\n"</span><span class="token punctuation">)</span>    test_step<span class="token punctuation">,</span> test_reward <span class="token operator">=</span> agent<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rTest Completed.\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rTest reward: %.1f     Steps: %d"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>test_reward<span class="token punctuation">,</span> test_step<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\r\nQ_table :\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span>Q_table<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Sarsa实现"><a href="#2-Sarsa实现" class="headerlink" title=" 2 Sarsa实现"></a><h4> 2 Sarsa实现</h4></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SarsaAgent</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>  learning_rate<span class="token punctuation">,</span> e_greedy<span class="token punctuation">,</span> gamma<span class="token punctuation">,</span> n_actions<span class="token punctuation">,</span> n_states<span class="token punctuation">,</span> max_steps<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>N_ACTIONS <span class="token operator">=</span> n_actions        self<span class="token punctuation">.</span>N_STATES <span class="token operator">=</span> n_states        self<span class="token punctuation">.</span>ALPHA <span class="token operator">=</span> learning_rate        self<span class="token punctuation">.</span>EPSILON <span class="token operator">=</span> e_greedy        self<span class="token punctuation">.</span>SarsaTable <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span>n_states<span class="token punctuation">,</span> n_actions<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>GAMMA <span class="token operator">=</span> gamma        self<span class="token punctuation">.</span>MAX_STEPS <span class="token operator">=</span> max_steps        <span class="token comment"># print(self.SarsaTable)</span>    <span class="token keyword">def</span> <span class="token function">choose_action</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> observation<span class="token punctuation">)</span><span class="token punctuation">:</span>        state_action <span class="token operator">=</span> self<span class="token punctuation">.</span>SarsaTable<span class="token punctuation">[</span>observation<span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># state_action = self.SarsaTable.iloc[observation, :]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>uniform<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>EPSILON<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>state_action<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            action <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            maxS <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>state_action<span class="token punctuation">)</span>            action_list <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>state_action <span class="token operator">==</span> maxS<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            action <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>action_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> action    <span class="token keyword">def</span> <span class="token function">learn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cur_obs<span class="token punctuation">,</span> cur_act<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> next_act<span class="token punctuation">,</span> done<span class="token punctuation">)</span><span class="token punctuation">:</span>        sarsa_predict <span class="token operator">=</span> self<span class="token punctuation">.</span>SarsaTable<span class="token punctuation">[</span>cur_obs<span class="token punctuation">,</span> cur_act<span class="token punctuation">]</span>        <span class="token keyword">if</span> done<span class="token punctuation">:</span>            sarsa_target <span class="token operator">=</span> reward        <span class="token keyword">else</span><span class="token punctuation">:</span>            sarsa_target <span class="token operator">=</span> reward <span class="token operator">+</span> self<span class="token punctuation">.</span>GAMMA <span class="token operator">*</span> self<span class="token punctuation">.</span>SarsaTable<span class="token punctuation">[</span>next_obs<span class="token punctuation">,</span> next_act<span class="token punctuation">]</span>        self<span class="token punctuation">.</span>SarsaTable<span class="token punctuation">[</span>cur_obs<span class="token punctuation">,</span> cur_act<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>ALPHA <span class="token operator">*</span> <span class="token punctuation">(</span>sarsa_target <span class="token operator">-</span> sarsa_predict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur_act <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>cur_obs<span class="token punctuation">)</span>        step_counter <span class="token operator">=</span> <span class="token number">0</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            next_obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>cur_act<span class="token punctuation">)</span>            next_act <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>next_obs<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>learn<span class="token punctuation">(</span>cur_obs<span class="token punctuation">,</span> cur_act<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> next_obs<span class="token punctuation">,</span> next_act<span class="token punctuation">,</span> done<span class="token punctuation">)</span>            cur_act <span class="token operator">=</span> next_act            cur_obs <span class="token operator">=</span> next_obs            step_counter <span class="token operator">+=</span> <span class="token number">1</span>            total_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> done <span class="token keyword">or</span> step_counter <span class="token operator">==</span> self<span class="token punctuation">.</span>MAX_STEPS<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> total_reward<span class="token punctuation">,</span> step_counter    <span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cur_obs <span class="token operator">=</span> env<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        cur_act <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>cur_obs<span class="token punctuation">)</span>        step_counter <span class="token operator">=</span> <span class="token number">0</span>        total_reward <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            env<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token punctuation">)</span>            next_obs<span class="token punctuation">,</span> reward<span class="token punctuation">,</span> done<span class="token punctuation">,</span> info  <span class="token operator">=</span> env<span class="token punctuation">.</span>step<span class="token punctuation">(</span>cur_act<span class="token punctuation">)</span>            next_act <span class="token operator">=</span> self<span class="token punctuation">.</span>choose_action<span class="token punctuation">(</span>next_obs<span class="token punctuation">)</span>            cur_act <span class="token operator">=</span> next_act            cur_obs <span class="token operator">=</span> next_obs            step_counter <span class="token operator">+=</span> <span class="token number">1</span>            total_reward <span class="token operator">+=</span> reward            <span class="token keyword">if</span> done <span class="token keyword">or</span> step_counter <span class="token operator">==</span> self<span class="token punctuation">.</span>MAX_STEPS<span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">return</span> total_reward<span class="token punctuation">,</span> step_counternp<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>env <span class="token operator">=</span> gym<span class="token punctuation">.</span>make<span class="token punctuation">(</span><span class="token string">"CliffWalking-v0"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    agent <span class="token operator">=</span> SarsaAgent<span class="token punctuation">(</span>        learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span>        e_greedy<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span>        gamma<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>        n_actions<span class="token operator">=</span>env<span class="token punctuation">.</span>action_space<span class="token punctuation">.</span>n<span class="token punctuation">,</span>        n_states<span class="token operator">=</span>env<span class="token punctuation">.</span>observation_space<span class="token punctuation">.</span>n<span class="token punctuation">,</span>        max_steps<span class="token operator">=</span><span class="token number">500</span>    <span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Start to train..."</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> episode <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ep_reward<span class="token punctuation">,</span> ep_steps <span class="token operator">=</span> agent<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Episode:  %d   Total reward:  %.1f   Steps: %d\n"</span> <span class="token operator">%</span><span class="token punctuation">(</span>episode<span class="token punctuation">,</span> ep_reward<span class="token punctuation">,</span> ep_steps<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Training Completed!!!"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\rSarsaTable:\n"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>agent<span class="token punctuation">.</span>SarsaTable<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nStart to train...\n"</span><span class="token punctuation">)</span>    test_reward<span class="token punctuation">,</span> test_steps <span class="token operator">=</span> agent<span class="token punctuation">.</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test Result:\n     Test Reward:  %.1f\n     Test Steps: %d\n"</span> <span class="token operator">%</span><span class="token punctuation">(</span>test_reward<span class="token punctuation">,</span> test_steps<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Q-learning和Sarsa的区别：前者采用贪心策略，用下一状态的最大的Q-value对应的动作的奖励来对Q表格进行更新，即更新时的数据为$(R, Q(s_t, a_t), max Q(s_{t+1},a_{t+1}))$, 而更新后用于更新的$max Q(s_{t+1},a_{t+1})$对应的动作不一定就是下一状态虚所选择的动作；而后者则是采用保守的方法，选用$(R, Q(s_t, a_t), Q(s_{t+1},a_{t+1}))$来对价值函数进行更新，其中$a_{t+1}$就是Agent在下一状态所选择的动作。</p></blockquote></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> 实例 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.295</title>
      <link href="/2022/03/24/leetcode-295/"/>
      <url>/2022/03/24/leetcode-295/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-295-数据流的中位数"><a href="#LeetCode-295-数据流的中位数" class="headerlink" title=" LeetCode 295.数据流的中位数"></a><h2> LeetCode 295.数据流的中位数</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/find-median-from-data-stream/" title="295.数据流的中位数">295.数据流的中位数</a></li><li>题目链接：<a href="https://leetcode-cn.com/problems/shu-ju-liu-zhong-de-zhong-wei-shu-lcof/" title="剑指 Offer 41. 数据流中的中位数">剑指 Offer 41. 数据流中的中位数</a></li></ul><p>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p><p>例如，</p><p>[2,3,4] 的中位数是 3</p><p>[2,3] 的中位数是 (2 + 3) / 2 = 2.5</p><p>设计一个支持以下两种操作的数据结构：</p><ul><li><code>void addNum(int num)</code> - 从数据流中添加一个整数到数据结构中。</li><li><code>double findMedian()</code> - 返回目前所有元素的中位数。</li></ul><p><strong>示例 1:</strong></p><blockquote><p>addNum(1)<br>addNum(2)<br>findMedian() -&gt; 1.5<br>addNum(3)<br>findMedian() -&gt; 2</p></blockquote><p><strong>进阶:</strong></p><blockquote><ol><li>如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？</li><li>如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？</li></ol></blockquote><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>用一个双向链表记录数据，用一个<code>mid</code>指针指向当前链表中的中间结点，并维护由<code>Head</code>指向<code>next</code>方向上呈递增的关系，即维护一个递增的双向链表，并在加入新结点时对mid指针进行维护。数据结构如下</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>                    <span class="token comment">//记录数据流的数据</span>    <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>        <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>                    <span class="token comment">//数据流中的数据数</span>    ListNode <span class="token operator">*</span>head<span class="token punctuation">;</span>             <span class="token comment">//虚拟头结点，方便插入</span>    ListNode <span class="token operator">*</span>mid<span class="token punctuation">;</span>              <span class="token comment">//中间结点</span><span class="token punctuation">&#125;</span> MedianFinder<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>mid</code>指针的维护：首先，让<code>mid</code>指向链表头，当结点个数为奇数时<code>mid</code>指针向后移动一位，即：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    obj<span class="token operator">-></span>mid <span class="token operator">=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>需要注意的是，当当前插入的结点的值小于等于<code>mid-&gt;val</code>时，插入结点的位置是在<code>mid</code>的左侧，会导致<code>mid</code>自动地后移一位，存在一种最差的情况：后插入的结点全部在第一个插入结点的左侧，因而<code>mid</code>就相当于跑到链表中的最后一个位置，因此，我们需要对<code>num &lt; mid-&gt;val</code>这种情况进行以下处理：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    obj<span class="token operator">-></span>mid <span class="token operator">=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即当<code>num &lt; mid-&gt;val</code>时，将<code>mid</code>向前移动一步，然后再判断是否需要往后移一步。整体代码如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt<span class="token punctuation">;</span>            <span class="token comment">//当前链表中的数据量</span>    ListNode <span class="token operator">*</span>head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> MedianFinder<span class="token punctuation">;</span><span class="token comment">/** initialize your data structure here. */</span>MedianFinder<span class="token operator">*</span> <span class="token function">medianFinderCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MedianFinder <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span>MedianFinder <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>MedianFinder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>head <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>head<span class="token operator">-></span>val <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    ret<span class="token operator">-></span>head<span class="token operator">-></span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ret<span class="token operator">-></span>mid <span class="token operator">=</span> ret<span class="token operator">-></span>head<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">medianFinderAddNum</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    obj<span class="token operator">-></span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment">//数据量加1</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token operator">-></span>head<span class="token punctuation">;</span>     <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">&lt;</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token comment">//查询结点插入位置</span>    <span class="token punctuation">&#125;</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span>ListNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ListNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                  <span class="token comment">//判断插入位置是否在最后</span>        cur<span class="token operator">-></span>next<span class="token operator">-></span>prev <span class="token operator">=</span> node<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    node<span class="token operator">-></span>prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//处理插入结点在mid左侧的情况</span>        obj<span class="token operator">-></span>mid <span class="token operator">=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>prev<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>cnt<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//奇数时中位数指针后移一位</span>        obj<span class="token operator">-></span>mid <span class="token operator">=</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">double</span> <span class="token function">medianFinderFindMedian</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断obj->cnt是否为0是避免出现链表为空时调用了medianFinderFree()</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>cnt <span class="token operator">&amp;&amp;</span> obj<span class="token operator">-></span>cnt <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//奇数时</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>obj<span class="token operator">-></span>mid<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">//偶数时</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token operator">-></span>mid<span class="token operator">-></span>val <span class="token operator">+</span> obj<span class="token operator">-></span>mid<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">medianFinderFree</span><span class="token punctuation">(</span>MedianFinder<span class="token operator">*</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> obj<span class="token operator">-></span>head<span class="token punctuation">,</span> <span class="token operator">*</span>next <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        tmp <span class="token operator">=</span> next<span class="token punctuation">;</span>        next <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*** Your MedianFinder struct will be instantiated and called as such:* MedianFinder* obj = medianFinderCreate();* medianFinderAddNum(obj, num);* double param_2 = medianFinderFindMedian(obj);* medianFinderFree(obj);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(Ps: 后边可以把这道题采用排序方式，链表插入过程比较麻烦)</p><h1 id="3-关于进阶的思考"><a href="#3-关于进阶的思考" class="headerlink" title=" 3 关于进阶的思考"></a><h3> 3 关于进阶的思考</h3></h1><ol><li>如果数据流中所有整数都在 0 到 100 范围内, 直接创建一个长度为101的数组并初始化为0，进行数据的记录。<br>或用桶排序/基数排序均可。</li><li>如果数据流中所有整数都在 0 到 100 范围内, 直接用数组记录，然后每次记录后用计数排序即可.(两个其实差不多)</li></ol><h1 id="4-反思"><a href="#4-反思" class="headerlink" title=" 4 反思"></a><h3> 4 反思</h3></h1><p>题目不难，但是调了半个钟头，debug能力还需加强，此外，对于可能出现的情况把握能力不足，欠缺考虑。</p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 链表 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.164</title>
      <link href="/2022/03/23/leetcode-164/"/>
      <url>/2022/03/23/leetcode-164/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-164-最大间距"><a href="#LeetCode-164-最大间距" class="headerlink" title=" LeetCode 164.最大间距"></a><h2> LeetCode 164.最大间距</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/maximum-gap/" title="164.最大间距">164.最大间距</a></li></ul><p>给定一个无序的数组<code>nums</code>，返回<em>数组在排序之后，相邻元素之间最大的差值</em>。如果数组元素个数小于2，则返回<code>0</code>。<br>您必须编写一个在「线性时间」内运行并使用「线性额外空间」的算法。</p><p><strong>示例 1:</strong></p><blockquote><p>输入: nums = [3,6,9,1]<br>输出: 3<br>解释: 排序后的数组是 [1,3,6,9], 其中相邻元素 (3,6) 和 (6,9) 之间都存在最大差值 3。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: nums = [10]<br>输出: 0<br>解释: 数组元素个数小于 2，因此返回 0。</p></blockquote><p><strong>提示:</strong></p><ul><li>1 &lt;= nums.length &lt;= 10^5</li><li>0 &lt;= nums[i] &lt;= 10^9</li></ul><h2 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h2><p>由于题目中要求必须要线性时间，且使用线性空间，因而不能采用传统的排序(快排的时间复杂度为nlogn)，我们可以用基数排序的方法，其时间复杂度和空间复杂度均为线性的。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//基数排序</span><span class="token keyword">void</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> buf<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">,</span> bucket<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>              <span class="token comment">//将每个nums放到对应的桶中</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> bucket<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">//前缀和，确定每个nums的先后顺序</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        buf<span class="token punctuation">[</span>bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">//将nums从桶中取出并暂存到buf数组中</span>        bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                           <span class="token comment">//将排序结果返回至原数组</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">maximumGap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//找最大元素以确定需要进行多少次排序操作</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token comment">//先对个位进行排序</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>max <span class="token operator">>=</span> exp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//逐位进行基数排列</span>        <span class="token function">radixSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>                  <span class="token comment">//切换操作位，个位、十位、千位...</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ans <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 排序 </tag>
            
            <tag> 基数排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode.56</title>
      <link href="/2022/03/23/leetcode-56/"/>
      <url>/2022/03/23/leetcode-56/</url>
      
        <content type="html"><![CDATA[<h1 id="LeetCode-56-合并区间"><a href="#LeetCode-56-合并区间" class="headerlink" title=" LeetCode 56.合并区间"></a><h2> LeetCode 56.合并区间</h2></h1><h1 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title=" 1 题目描述"></a><h3> 1 题目描述</h3></h1><ul><li>题目链接：<a href="https://leetcode-cn.com/problems/merge-intervals/" title="56.合并区间">56.合并区间</a></li></ul><p>以数组<code>intervals</code>表示若干个区间的集合，其中单个区间为$intervals[i] = [start_i, end_i]$。请你合并所有重叠的区间，并返回<em>一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间</em>。</p><p><strong>示例 1:</strong></p><blockquote><p>输入：intervals = [[1,3],[2,6],[8,10],[15,18]]<br>输出：[[1,6],[8,10],[15,18]]<br>解释：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入：intervals = [[1,4],[4,5]]<br>输出：[[1,5]]<br>解释：区间 [1,4] 和 [4,5] 可被视为重叠区间。</p></blockquote><p><strong>提示:</strong></p><ul><li>$1 &lt;= intervals.length &lt;= 10^4$</li><li>$intervals[i].length == 2$</li><li>$0 &lt;= start_i &lt;= end_i &lt;= 10^4$</li></ul><h1 id="2-思路"><a href="#2-思路" class="headerlink" title=" 2 思路"></a><h3> 2 思路</h3></h1><p>套路：直接对某一维进行排序，然后按照某一维的大小关系进行操作即可。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/** * Return an array of arrays of size *returnSize. * The sizes of the arrays are returned as *returnColumnSizes array. * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free(). */</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//按第一个元素进行排序</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> intervals<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> intervalsColSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> returnSize<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> intervalsSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span><span class="token operator">*</span> ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">*</span> intervalsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnColumnSizes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>intervalsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> intervalsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> intervalsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                         <span class="token comment">//说明到了最后一个区间，需要加一个答案</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">>=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token comment">//重叠</span>            right <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//看右端点大小更新right</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">&lt;</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">;</span>            ret<span class="token punctuation">[</span><span class="token operator">*</span>returnSize<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">;</span>            <span class="token punctuation">(</span><span class="token operator">*</span>returnColumnSizes<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="区间相关题目"><a href="#区间相关题目" class="headerlink" title=" 区间相关题目"></a><h3> 区间相关题目</h3></h1><p>相似题目：</p><p><a href="https://leetcode-cn.com/problems/minimum-number-of-arrows-to-burst-balloons/" title="452. 用最少数量的箭引爆气球">452. 用最少数量的箭引爆气球</a></p><p><a href="https://leetcode-cn.com/problems/non-overlapping-intervals/" title="435. 无重叠区间">435. 无重叠区间</a></p>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度强化学习</title>
      <link href="/2022/03/21/NN/"/>
      <url>/2022/03/21/NN/</url>
      
        <content type="html"><![CDATA[<h1 id="深度强化学习"><a href="#深度强化学习" class="headerlink" title=" 深度强化学习"></a><h1> 深度强化学习</h1><h2 id="Reinforcement-Learning"><a href="#Reinforcement-Learning" class="headerlink" title=" Reinforcement Learning"></a><h2> <a href="#RL">Reinforcement Learning</a></h2><h1 id="1-Logistics回归（二分）"><a href="#1-Logistics回归（二分）" class="headerlink" title=" 1 Logistics回归（二分）"></a><h2> 1 Logistics回归（二分）</h2></h1><h2 id="1-1-目标"><a href="#1-1-目标" class="headerlink" title=" 1.1 目标"></a><h3> 1.1 目标</h3></h2><p>通过对样本的特征向量与已有标签，训练得到线性函数，使得网络能够通过未知标签的样本的特征向量预测其标签，即使得下式成立：</p><script type="math/tex; mode=display">\hat{y_i} = w^T x_i + b \approx y_i</script><p>，其中，$\hat{y_i}$为Logistics回归网络对样本$x_i$的标签的估计，而$y_i$则是样本$x_i$的实际标签。</p><p>由于Logistics回归是针对二分问题，所期望的输出是类别（通常设为0和1），而上式中$\hat{y_i}$通常不会在$(0,1)$的区间内，因此需要对网络的输出作处理。常用的方法是将$\hat{y_i}$作为某些函数的输入，该函数只要保证能够输出$(0,1)$即可，这里采用Sigmoid函数，定义为：</p><script type="math/tex; mode=display">\sigma(x) = \frac{1}{1+e^{-x}}</script><h2 id="1-2-Loss-Function定义"><a href="#1-2-Loss-Function定义" class="headerlink" title=" 1.2 Loss Function定义"></a><h3> 1.2 Loss Function定义</h3></h2><p>Loss Function即反映网络对于样本的标签的估计值与实际标签之间的区别。Logistics回归期望当$y_i = 1$时$\hat{y_i} \approx 1$,而当$y_i = 0$时$\hat{y_i} \approx 0$.这里的$\hat{y_i}$其实可以看为概率。</p><p>常用的Loss Function：</p><script type="math/tex; mode=display">y = \frac{1}{2}(\hat{y_i} - y_i)^2</script><p>但是由于Logistics回归的标签为0或1而非连续的，且对误差直接进行平方处理会导致后续无法用<strong>梯度下降法</strong>进行问题的求解（该曲线为非凸的）。</p><p>定义如下Loss Function：</p><script type="math/tex; mode=display">L(\hat{y_i},y_i) = -((1-y)log(1-\hat{y_i}) + y log(\hat{y_i}))</script><h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title=" Cost Function"></a><h3> Cost Function</h3></h2><p>Loss Function反映的是网络对单个样本的标签估计的准确程度，而Cost Function则是反映网络对于整个样本集（训练集）的准确程度。</p><h1 id="神经网络（Neutral-Network）"><a href="#神经网络（Neutral-Network）" class="headerlink" title=" 神经网络（Neutral Network）"></a><h2> <span id="NN">神经网络（Neutral Network）</span></h2></h1><ul><li>监督学习：样本输入-&gt;数据预处理-&gt;特征提取与选择-&gt;正向传播与计算损失函数-&gt;反向传播与更新网络参数与权重</li></ul><h1 id="强化学习（Reinforcement-Learning）"><a href="#强化学习（Reinforcement-Learning）" class="headerlink" title=" 强化学习（Reinforcement Learning）"></a><h2> <span id="RL">强化学习（Reinforcement Learning）</span></h2></h1><h1 id="Chapter-1-概述"><a href="#Chapter-1-概述" class="headerlink" title=" Chapter 1 概述"></a><h3> Chapter 1 概述</h3></h1><p>&emsp;&emsp;强化学习（Reinforcement Learning, RL）是<strong>一种试图让智能体在未知的不确定环境中通过最大化其获得的奖励来完成某些特定任务的算法</strong>。RL由<strong>智能体</strong>和<strong>环境</strong>两部分组成，在训练过程中Agent不断与环境（Environment）进行交互，在当前状态下自主输出一个Action(也叫Decision),这个Action输出到Agent中进被执行，从而获得下一个状态以及对应的Action所获得的奖励。Agent的目的就是<strong>尽可能多地从Environment中获得Reward</strong>。</p><p><img src="/2022/03/21/NN/RL_diagram.png" alt></p><ul><li>与监督学习相比，强化学习具有奖励反馈不及时地特点（延迟奖励），这会使得网络训练困难。</li><li>强化学习处理的大多数是<strong>序列数据</strong>，数据间不满足独立同分布。</li><li>需要不停地经过”<strong>试错</strong>“(trial-and-error exploration)来”学会”最有利的Action。</li><li>学习过程中没有很强的监督者，只有延迟性的奖励信号，<strong>没有即时反馈</strong>。</li><li>监督学习是在”专家”的指导下进行，因而算法的上限就是人类的表现，而RL则是在环境中自主探索，可以获得超越人类的能力。</li></ul><p>①Reward: 环境反馈给Agent的<strong>标量信号</strong>(Scalar signal)。</p><p>②轨迹：当前帧以及Agent所采取的Action，即状态和动作的序列：</p><script type="math/tex; mode=display">\tau = (s_0, a_0, s_1, a_1,...)</script><p>&emsp;可以通过观测序列和最终奖励来训练Agent，使其尽可能采取可以获得最终奖励的动作。一场”游戏”称为一个回合(<strong><em>Episode</em></strong>)或试验(<strong><em>Trial</em></strong>)。</p><p>③历史: 观测、动作、奖励的序列。</p><script type="math/tex; mode=display">H_t = o_1, a_1, r_1 , ..., o_t, a_t, r_t</script><p>&emsp;由于Agent会根据历史决定当前的Action,因此可以把整个游戏的状态看作历史的函数：</p><script type="math/tex; mode=display">s_t = f(H_t)</script><p>④状态一般是指环境的状态，而观测才是Agent的状态（因为Agent的状态并非完全可观测）。若完全可观测，则可当作一个<strong>马尔可夫决策过程</strong>(<strong><em>Markov Decision Process</em></strong>, <strong><em>MDP</em></strong>),这种情况下有$o_t = s_t^e = s_t^a$; 而当Agent只有部分状态可观测，则可作为<strong>部分可观测马尔可夫决策过程</strong>(<strong><em>Partiallly Observation Markov Decision Process</em></strong>, <strong><em>POMDP</em></strong>)。</p><p>&emsp;&emsp;POMDP可以用一个七元组来描述：$(S, A, T, R, \Omega, O, \gamma)$, 其中$S$为状态空间，$A$为动作空间，$T(s^\prime|s,a)$为状态转移概率，$R$为奖励函数，$\Omega(o|s,a)$为观测概率，$O$为观测空间，$\gamma$为折扣因子。</p><p>⑤Action Space: 有效动作的集合，分为连续动作空间(动作是实值的向量)和离散动作空间(动作数量有限)。</p><p>⑥Pilocy: Agent按照Policy来选取Action，可分为随机性和确定性, <strong>RL中一般使用前者</strong>。前者为$\pi$函数，即$\pi(a|s) = p(a_t = a|s_t = s)$, 输入一个状态$s$，<strong><em>输出的是Agent采取的所有动作的概率，对这个概率进行采样即可得到Agent下一步的Action</em></strong>；后者则是<strong><em>直接采取最有可能的动作</em></strong>，即$a^* = \arg\max \limits_{a}\pi(a|s)$。<br>&emsp;&emsp;注：$\arg\max \limits_{a}f(a)$ 指$f(a)$取得最大值时$a$的值。</p><p>⑦价值函数：对未来奖励的预测函数，用来评估状态的好坏。定义如下：</p><script type="math/tex; mode=display">V_{\pi}(s) = \mathbb{E}_{\pi}[G_t|s_t = s] = \mathbb{E}_{\pi}[\sum_{k=0}^\infty \gamma^k r_{t+k+1}|s_t = s],对于所有的s \in S</script><p>&emsp;其中，期望$\mathbb{E}_{\pi}$的下标是$\pi$函数，$\pi$函数的值可以反映使用策略$\pi$时的奖励值。</p><p>&emsp;动作价值函数：Q函数，定义如下：</p><script type="math/tex; mode=display">Q_{\pi}(s,a) = \mathbb{E}_{\pi}[G_t|s_t = s,a_t = a] = \mathbb{E}_{\pi}[\sum_{k=0}^\infty \gamma^k r_{t+k+1}|s_t = s,a_t = a]</script><p>易知：$V_{\pi}(s) = \sum\limits_{a \in A}\pi(a|s)Q_{\pi}(s,a)$</p><p>⑧模型：模型决定了下一步的状态。下一步的状态取决于当前的State和当前采取的Action，由状态转移概率和奖励函数两部分组成。前者定义为：</p><script type="math/tex; mode=display">p_{ss^\prime}^a = p(s_{t+1} = s^\prime|s_t = s, a_t = a)</script><p>&emsp;后者指当前状态采取了某个动作所获得的奖励值，定义为：</p><script type="math/tex; mode=display">R(s,a) = \mathbb{E}[r_{t+1}|s_t = s, a_t = a]</script><p>⑧基于策略的强化学习(Policy-based RL): <strong>直接学习策略</strong>，输入一个状态，即可得到对应动作的概率。学习后，对于每一个状态，Agent都将会有一个与之对应的最佳动作。如：策略梯度算法。</p><p>&emsp;基于价值的强化学习(Value-based RL): <strong>利用价值函数为导向</strong>，每个状态对应一个价值。<strong>显式地学习价值函数，隐式地学习策略</strong>，策略是通过价值函数推算得到的。维护一个价值表格或价值函数，通过这个表格或函数来选取价值最大的Action。<strong>只能应用于离散环境</strong>。如：Q-learning, Sarsa等。</p><p>&emsp;将以上两种RL结合起来就是Actor-Critic Agent(AC)。Agent<strong>根据策略做出动作，价值函数对所作出的动作给出价值，从而在原有的策略梯度算法的基础上加速学习过程</strong>。</p><p>⑨有模型RL: <strong>需要对环境进行建模</strong>，构建一个虚拟环境来模拟真实环境中的交互。根据环境中的经验，构建虚拟世界，同时在真实环境和虚拟环境中进行学习。要求$(S, A, P, R)$均已知且$S$和$A$在有限步数内是有限集。（$P$即状态转移函数$p(s_{t+1}|s_t, a_t)$, $R$即奖励函数$R(s_t, a_t)$）</p><p>&emsp;免模型RL: 不对环境进行建模，<strong>直接与真实环境进行交互来学习最优策略</strong>，通常属于数据驱动方法，需要大量的采样来估计状态、动作及奖励函数，进而优化动作策略。</p><h1 id="Chapter-2-MDP"><a href="#Chapter-2-MDP" class="headerlink" title=" Chapter 2 MDP"></a><h3> Chapter 2 MDP</h3></h1><h4 id="2-1-Markov相关"><a href="#2-1-Markov相关" class="headerlink" title=" 2.1 Markov相关"></a><h4> 2.1 Markov相关</h4><ul><li>Markov property: 指一个随机过程在给定现在状态及所有过去状态情况下，其未来的状态的条件概率分布仅依赖于当前状态。也可描述为给定当前状态时，未来的状态与过去状态是条件独立的。</li><li>Markov Process/Markov Chain: 马尔可夫过程是一组具有马尔可夫性质的随机变量序列$s_1, …, s_t$, 其中下一个状态只与当前的状态$s_t$有关。<script type="math/tex; mode=display">p(s_{t+1}|s_t) = p(s_{t+1}|h_t)</script></li></ul><p>&emsp;&emsp;上式表明，从当前状态$s_t$转移到$s_{t+1}$，就等于其历史转移到$s_{t+1}$.<br>&emsp;&emsp;离散时间的马尔可夫过程也被称为马尔可夫链。</p><h4 id="2-1-1-Markov-reward-process"><a href="#2-1-1-Markov-reward-process" class="headerlink" title=" 2.1.1 Markov reward process"></a><h4> 2.1.1 Markov reward process</h4><ul><li><p>MRP是MP加上奖励函数。其中奖励函数$R$是一个期望，表示当前当智能体达到某一个状态时可以获得多大的奖励。<strong>如果状态有限，则$R$可以是一个向量</strong>。</p></li><li><p>(折扣)回报的定义：</p></li></ul><script type="math/tex; mode=display">G_t = r_{t+1} + \gamma r_{t+2} + \gamma^2 r_{t+3} + \gamma^3 r_{t+4} + ... +  + \gamma^{T-t-1} r_{t+t}</script><p>&emsp;&emsp;折扣因子$\gamma$反映了我们对未来奖励的关注程度，当为0时说明我们只关注当前的奖励。折扣因子可作为智能体的一个超参(hyperparameter)来调整</p><ul><li>对于MP，状态价值函数(State-value function)被定义为回报的期望：</li></ul><script type="math/tex; mode=display">\begin{equation}\begin{split}V^t(s) &= \mathbb{E}[G_t|s_t = s] \\&= \mathbb{E}[r_{t+1} + \gamma r_{t+2} + \gamma^2 r_{t+3} + ... +  + \gamma^{T-t-1} r_{t+t}|s_t = s]\end{split}\end{equation}</script><h4 id="2-1-2-价值函数"><a href="#2-1-2-价值函数" class="headerlink" title=" 2.1.2 价值函数"></a><h4> 2.1.2 价值函数</h4><p>&emsp;&emsp;当计算得到一些轨迹的实际回报时，价值函数可以通过这些轨迹的回报的平均值来得到，这种方法也就是通过<strong>蒙特卡洛</strong>(Mante Carlo, MC)采样的方法来计算价值。</p><ul><li><p>贝尔曼方程（价值解析解）</p><ul><li><p>定义</p><script type="math/tex; mode=display">V(s) = R(S) + \gamma \sum_{s^\prime \in S}p(s^\prime|s)V(s^\prime)</script><p>&emsp;其中第一部分为即时奖励，第二部分则为未来奖励的折扣总和。</p><ul><li>全期望公式：<script type="math/tex; mode=display">\mathbb{E}[X] = \sum_i\mathbb{E}[X|A_i]p(A_i)</script></li><li>条件期望:<script type="math/tex; mode=display">\mathbb{E}[X|Y = y] = \sum_xxp(X=x|Y=y)</script></li></ul></li><li><p>推导过程：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}V(s) &= \mathbb{E}[G_t|s_t = s] \\&= \mathbb{E}[r_{t+1} + \gamma r_{t+2} + \gamma^2 r_{t+3} + ... +  + \gamma^{T-t-1} r_{t+t}|s_t = s] \\&= \mathbb{E}[r_{t+1}|s_t = s]+\gamma\mathbb{E}[r_{t+2} + \gamma r_{t+3} + ... +  + \gamma^{T-t-2} r_{t+t}|s_t = s] \\&= R(s) + \gamma\mathbb{E}[G_{t+2}|s_t = s] \\&= R(s) + \gamma\mathbb{E}[V(s_{t+1})|s_t = s] \\&= R(s) + \gamma\sum_{s^\prime \in S}p(s^\prime|s)V(s^\prime)\end{split}\end{equation}</script></li><li><p>矩阵形式：$V = R + \gamma PV$<br>解析解为：$V = (1-\gamma P)^{-1}R$</p></li></ul></li><li><p>价值迭代法</p><ul><li>动态规划<br>通过<strong>自举(bootstrapping)</strong>的方法对贝尔曼方程进行迭代直至收敛，即可得到某个状态的价值。<blockquote><p>对所有的状态$s \in S, V^\prime \leftarrow0,V(s)\leftarrow \infty$<br>do<br>$\quad$ $\quad$ $V\leftarrow V^\prime$<br>$\quad$ $\quad$ 对于所有状态 $s\in S, V^\prime(s) = R(s) + \gamma \sum_{s^\prime \in S}P(s^\prime|s)V(s^\prime)$<br>while ||$V - V^\prime$|| &gt; $\epsilon$<br>返回$V^\prime(s)$对于所有的状态$s\in S$</p></blockquote></li><li><p>蒙特卡洛<br>从某个状态开始，<strong>随机产生若干条轨迹</strong>，计算每条轨迹对应的奖励，将每条轨迹的折扣奖励即回报进行累积$G_t$, 最后除以轨迹数量即可得到某个状态的价值。</p><blockquote><p>$i \leftarrow 0,G_t \leftarrow 0$<br>while $i \neq N$,<br>$\quad$ $\quad$生成一个回合的轨迹，从状态$s$和时刻$t$开始<br>$\quad$ $\quad$使用生成的轨迹计算回报$g = \sum_{i=t}^{H-1}\gamma ^{i-t}r_i$<br>$\quad$ $\quad$$G_t \leftarrow G_t + g, i \leftarrow i+1$<br>$V_t \leftarrow G_t/N$</p></blockquote></li><li><p>时序差分学习(Temporal-difference learning, TD learning) </p></li></ul></li></ul><h4 id="2-1-3-MDP"><a href="#2-1-3-MDP" class="headerlink" title=" 2.1.3 MDP"></a><h4> 2.1.3 MDP</h4><p>相对MRP，MDP多了决策（指动作），其定义类似，但状态转移多了一个条件：</p><script type="math/tex; mode=display">p(s_{t+1}|s_t, a_t) = p(s_{t+1}|h_t, a_t)</script><ul><li>策略<br>定义了某个状态应该采取的动作。当知道当前状态后，带入策略函数$\pi$得到概率，这里的概率代表在当前的状态下可能采取的行动。<strong>策略也可能是确定性的，直接输出一个值，或者直接输出所要采取的行动</strong>。<script type="math/tex; mode=display">\pi(a|s) = p(a_t = a|s_t = s)</script></li><li><p>MDP到MRP的转换</p><ul><li>当知道了MDP以及$\pi$策略，通过以下式子即可实现转移：<script type="math/tex; mode=display">p_\pi(s^\prime|s) = \sum_{a \in A}\pi(a|s)p(s^\prime|s,a)</script></li><li>奖励函数：<script type="math/tex; mode=display">R_{\pi}(s) = \sum_{a\in A}\pi(a|s)R(s,a)</script></li></ul><h1 id="专业词汇（specialized-vocabulary）"><a href="#专业词汇（specialized-vocabulary）" class="headerlink" title=" 专业词汇（specialized vocabulary）"></a><h2> <span id="Vocabulary">专业词汇（specialized vocabulary）</span></h2></h1></li></ul><ol><li>Step, Epoch, Batch, Episode, Iteration</li></ol><ul><li>Step/Iteration: 整个样本集分的批次数</li><li>Batch_size: 每个Step更新模型参数前所要学习的样本数</li><li>Episode: 每个Episode会对模型进行一次验证，并保存最优的模型</li><li>Epoch: 跑完整个训练集<blockquote><p>举例说明：一共有1000个训练样本，分为100批进行学习，即Step = 100, 则Batch_size = 1000/100 = 10. 因而1个Epoch包括了100个Iteration/若干个Episode,而一个Episode则包括了若干个Iteration.<br>大小关系：Epoch &gt; Episode &gt; Iteration/Step</p></blockquote></li></ul><ol><li>Policy: Agent的行为、策略，是state到action的映射，分为确定性(Deterministic)和随机性(Stochastic)。</li></ol></h4></h4></h4></h4></h2></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reinforcement Learning </tag>
            
            <tag> Deep Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编程语言基础</title>
      <link href="/2022/03/19/coding%20tips/"/>
      <url>/2022/03/19/coding%20tips/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title=" C语言"></a><h1> <a href="#C">C语言</a></h1><h1 id="C"><a href="#C" class="headerlink" title=" C++"></a><h1> <a href="#cpp">C++</a></h1><h1 id="Python"><a href="#Python" class="headerlink" title=" Python"></a><h1> <a href="#py">Python</a></h1><div style="page-break-after: always;"></div><h1 id="C的目录"><a href="#C的目录" class="headerlink" title="C的目录"></a><h2><span id="C">C的目录</span></h2></h1><h3 id="0-各种基础知识"><a href="#0-各种基础知识" class="headerlink" title="　0.各种基础知识"></a><h3>　0.<a href="#SomethingforC">各种基础知识</a></h3><h3 id="1-排序算法"><a href="#1-排序算法" class="headerlink" title="　1.排序算法"></a><h3>　1.<a href="#sort">排序算法</a></h3><h3 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="　2.字符串操作"></a><h3>　2.<a href="#string">字符串操作</a></h3><h3 id="3-各种数据结构"><a href="#3-各种数据结构" class="headerlink" title="　3.各种数据结构"></a><h3>　3.<a href="#data_structure">各种数据结构</a></h3><h4 id="3-1-链表"><a href="#3-1-链表" class="headerlink" title="　　　3.1 链表"></a><h4>　　　3.1 <a href="#ListNode">链表</a></h4><h4 id="3-2-栈与队列"><a href="#3-2-栈与队列" class="headerlink" title="　　　3.2 栈与队列"></a><h4>　　　3.2 <a href="#Stack_Queue">栈与队列</a></h4><h4 id="3-3-树"><a href="#3-3-树" class="headerlink" title="　　　3.3 树"></a><h4>　　　3.3 <a href="#TreeNode">树</a></h4><h4 id="3-4-哈希"><a href="#3-4-哈希" class="headerlink" title="　　　3.4 哈希"></a><h4>　　　3.4 <a href="#HashTable">哈希</a></h4><h4 id="3-5-堆"><a href="#3-5-堆" class="headerlink" title="　　　3.5 堆"></a><h4>　　　3.5 <a href="#Heap">堆</a></h4><h1 id="0-各种基础知识-1"><a href="#0-各种基础知识-1" class="headerlink" title=" 0 各种基础知识"></a><h3> 0 <span id="SomethingforC">各种基础知识</span></h3></h1><ol><li><p>数组和指向数组的指针在大部分情况下都可以等同，但是只有指针表示法才可以进行自加/自减操作。<br>数组表示法：<code>int arr[] = &#123;1,2,3,4,5&#125;;</code><br>指针表示法：<code>int *ptr = &#123;1,2,3,4,5&#125;;</code></p></li><li><p>调用其他函数对值进行修改，如果该函数无返回值，就需要将变量的地址作为实参传给目标函数，方能对该变量进行修改。</p></li><li><p>const: 如果函数的形参被const所修饰，则该函数无法修改该变量。</p><ul><li>指向const的指针不能用于改变值。</li><li>可以把const数据或非const数据的地址传给const指针；但不能把const数据的地址传给普通指针，否则就可以通过指针修改这些数据了。</li><li>被const修饰的指针不能修改其指向的数据，但如果该数据自身不被const修饰，则可以通过其变量名进行修改。</li><li>const在指针类型前表示不能通过该指针进行其所指向的数据的修改操作；而const在指针类型后表示该指针不能指向别处(<strong>看与的相对位置，在左则不可修改指向的数值，在右则不可修改指向的地址</strong>)，注意以下区别：</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">*</span> months <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> ptr1 <span class="token operator">=</span> months<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> ptr2 <span class="token operator">=</span> months<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> ptr3 <span class="token operator">=</span> months<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中，<code>ptr1</code>不能被修改，即指向别的地址；<code>ptr2</code>则是不能直接修改months中的数值；<code>ptr3</code>则既不能更改其指向的地址，也不能修改其指向的地址上的值。</p><ol><li>被static修饰的变量，在程序结束前都不会被销毁，但如果是在函数内声明该变量，则只能在该函数中使用。离开该函数后，变量的值会被保存下来，重新调用该函数时，不会进行初始化，而是沿用上一次调用后的数值。<strong>函数的声明中，形参不允许被static修饰</strong>。</li><li><p>被<code>external</code>修饰的变量可以被其他文件的函数所使用，使用前需要在所要使用该变量的其他源代码文件中使用extern关键字声明该变量。在同一文件中，如果某个函数内声明了与外部变量（或者叫全局变量）同名的变量且无额外的extern修饰（或被auto显式修饰，如果无其他关键字默认未auto），则全局变量在该函数中不可见；如果未进行声明或者声明时用extern进行修饰则可见。</p><p><strong>外部变量只能初始化一次。</strong></p></li><li><p>const(constancy)对应恒常性，volatile(volatility)对应易变性。<br>const修饰的变量可初始化不可更改</p></li><li><p>内存泄漏（memory leak）<br> 静态内存的数量编译时就已经固定不变，而自动变量的内存数量在程序执行期间自动增加或减少，但是动态分配的内存数量只会增加。<br> 但调用某个函数时，函数内使用malloc申请了一定的动态内存空间，如果返回时没有采用free()进行释放，则重新调用该函数时需要重新申请内存，原有内存块由于变量被销毁不能再重复访问，这就会导致内存被耗尽，这种现象被称为内存泄露。</p></li><li>calloc 申请的空间会初始化为0.<br><code>calloc(ElemType nitems, ElemType size); //nitems为元素个数，size为元素大小，如sizeof(long)</code></li><li><p>指针与多维数组</p><ul><li>假设有如下声明：<br><code>int zippo[4][2];</code><br>则有如下关系：<br><code>zippo == &amp;zippo[0] == zippo[0] == &amp;zippo[0][0]</code></li><li>指向多维数组的指针：</li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span> pz<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//pz指向一个内含两个int类型的数组</span><span class="token keyword">int</span> <span class="token operator">*</span> px<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//px是一个内含两个指针元素的数组，每个元素都是指向int的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>#define</code>只是简单的进行替换，而<code>typedef</code>则是取别名.</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">STRING</span> <span class="token expression"><span class="token keyword">char</span> <span class="token operator">*</span></span></span>STRING name<span class="token punctuation">,</span> age<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> age<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">char</span> <span class="token operator">*</span> STRING<span class="token punctuation">;</span>STRING name<span class="token punctuation">,</span> age<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">,</span> <span class="token operator">*</span>age<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，第3行代码与第4行代码作用一致，而第7行则与第8行一致。（注意区别，前者只有name为指针，后者两个变量都是指针。）</p><ol><li>函数指针</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ToUpper</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//函数原型</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pf<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//pf是一个指向函数的指针</span>pf <span class="token operator">=</span> ToUpper<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>声明时需要参数类型对应。</strong></p><ol><li>八进制以数字0开头，十六进制以0X或0x开头</li></ol><h1 id="1-排序算法-1"><a href="#1-排序算法-1" class="headerlink" title=" 1 排序算法"></a><h3> 1 <span id="sort">排序算法</span></h3></h1><h2 id="1-1-快排（quickSort）"><a href="#1-1-快排（quickSort）" class="headerlink" title=" 1.1 快排（quickSort）"></a><h4> 1.1 快排（quickSort）</h4></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ElemType <span class="token function">FunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//user code here</span>    <span class="token function">qsort</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span>arrName<span class="token punctuation">,</span> ElemType arrSize<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token punctuation">,</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//user code here</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>一维数组</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ElemType <span class="token function">cmp1</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span>a <span class="token operator">-</span> <span class="token operator">*</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//从大到小排序</span>    <span class="token comment">//return *(ElemType *)a > *(ElemType *b);   </span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>二维数组按某一列排序</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ElemType <span class="token function">cmp2</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>ElemType <span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//对矩阵按第i列从大到小排序</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-冒泡排序（bubbleSort）"><a href="#1-2-冒泡排序（bubbleSort）" class="headerlink" title=" 1.2 冒泡排序（bubbleSort）"></a><h4> 1.2 冒泡排序（bubbleSort）</h4></h3><p><img src="/2022/03/19/coding%20tips/bubbleSort.gif" alt></p><ul><li><p>基础版</p><ul><li><p>冒泡排序是通过比较相邻两个位置的数的大小关系，如果后一个数小于前一个数，则将二者进行<code>swap</code>，直至遍历完成整个数组。实现方法也比较简单，直接两个<code>for</code>循环遍历数组，两两比较相邻元素即可。因此，冒泡排序基础版的时间复杂度为$O(n^2)$，而空间复杂度则为$O(1)$.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>优化版</p><ul><li><p>提前结束<br>&emsp;&emsp;基础版的冒泡排序需要遍历到数组的最后一个位置，但可能出现遍历到某个位置就已经完成排序，即完成某次内循环后再进行下一层内循环将不再进行<code>swap</code>操作，因而可以利用这个思路进行优化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        bool flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提前结束+边界优化<br>&emsp;&emsp;除了上述的提前结束的思路之外，我们可以对记录前边作<code>swap</code>操作的最后位置，该位置之后的元素都已经是排好序了的，下一次内循环只需要遍历到该位置即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    bool flag <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> last <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        flag <span class="token operator">=</span> false<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> last<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                flag <span class="token operator">=</span> true<span class="token punctuation">;</span>                index <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        last <span class="token operator">=</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="1-3-归并排序（mergeSort）"><a href="#1-3-归并排序（mergeSort）" class="headerlink" title=" 1.3 归并排序（mergeSort）"></a><h4> 1.3 归并排序（mergeSort）</h4></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> left<span class="token punctuation">,</span><span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">>=</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> left<span class="token operator">+</span><span class="token punctuation">(</span>right<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>right<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//divide</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>k<span class="token operator">-</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//conquer         </span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> left<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span>left<span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>right<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>right<span class="token operator">-</span>left<span class="token operator">||</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-4-选择排序（SelectionSort）"><a href="#1-4-选择排序（SelectionSort）" class="headerlink" title=" 1.4 选择排序（SelectionSort）"></a><h4> 1.4 选择排序（SelectionSort）</h4></h3><p><img src="/2022/03/19/coding%20tips/selectionSort.gif" alt></p><ul><li><p>基础版</p><ul><li><p>选择排序其实就是两个<code>for</code>循环进行数组遍历，内循环寻找外循环当前位置右边的最小值的索引，当内循环完成遍历后将最小值与外循环当前元素进行<code>swap</code>即可。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">selecitonSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minIndex <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>minIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>优化版</p><ul><li><p>上述的基础版选择排序为单元选择，即一次遍历只找当前位置右边的最小值并进行<code>swap</code>，其实可以在遍历时顺带查找最大值，实现双元选择，但实际上这种方式对于性能的优化有限。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">selecitonSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span><span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minIdx <span class="token operator">=</span> i<span class="token punctuation">,</span> maxIdx <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                minIdx <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                maxIdx <span class="token operator">=</span> j<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 说明当前位置及右边的元素均相等</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIdx <span class="token operator">==</span> maxIdx<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>         <span class="token comment">// 若本轮第一个数字不是最小值，则交换位置（将最小值与本轮第一个数字交换位置）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>minIdx <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>minIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 在交换i和minIdx时，有可能出现i即maxIdx的情况，此时需要修改maxIdx为minIdx</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxIdx <span class="token operator">==</span> i<span class="token punctuation">)</span> maxIdx <span class="token operator">=</span> minIdx<span class="token punctuation">;</span>        <span class="token comment">// 若本轮最后一个数字不是最大值，则交换位置（将最大值与本轮最后一个数字交换位置）</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>maxIdx <span class="token operator">!=</span> numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>maxIdx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>numsSize<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="1-5-插入排序-Insert-Sort"><a href="#1-5-插入排序-Insert-Sort" class="headerlink" title=" 1.5 插入排序(Insert Sort)"></a><h4> 1.5 插入排序(Insert Sort)</h4></h3><p><img src="/2022/03/19/coding%20tips/insertSort.gif" alt></p><ul><li><p>基础版</p><ul><li><p>插入排序是选定当前遍历的位置的元素（插入元素），然后遍历其左边的元素（比较元素），当比较元素大于插入元素时，则继续向左边寻找插入位置直至找到比较元素小于等于插入元素，此时将插入元素插入当前位置即可。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>优化版</p><ul><li><p>基础版需要逐位查找相应的插入位置，但实际上当前位置左侧的子数组已经是排过序了的，因此可以借用二分查找的思路来查找插入位置。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                r <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                l <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> l<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//移动</span>            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token comment">// 插入</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="1-6-计数排序-Counting-Sort"><a href="#1-6-计数排序-Counting-Sort" class="headerlink" title=" 1.6 计数排序(Counting Sort)"></a><h4> 1.6 计数排序(Counting Sort)</h4></h3><ul><li>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。作为一种线性时间复杂度的排序，计数排序要求<strong>输入的数据必须是有确定范围的整数</strong>。</li><li>具体做法是：①找出待排序中最大元素，记为MAX；②申请长度为(MAX+1)的数组，遍历数组并对每个元素的次数进行统计；③对所有的计数进行累加；④反向填充数组。<br><img src="/2022/03/19/coding%20tips/countingSort.gif" alt></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/**************************************************************************************  缺  点：浪费空间，即使记录min，然后tmp长度设为(max-min)+1，某些情况下还是存在空间浪费**  因此，运用计数排序的前提是待排序数组的取值在一定范围内且较为集中**************************************************************************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token keyword">void</span> <span class="token function">findMaxMinVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>max<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>min<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token operator">*</span>max <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span><span class="token operator">*</span>max<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>min <span class="token operator">=</span> <span class="token function">fmin</span><span class="token punctuation">(</span><span class="token operator">*</span>min<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token function">countingSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> INT_MIN<span class="token punctuation">,</span> min <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token function">findMaxMinVal</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>max<span class="token punctuation">,</span> <span class="token operator">&amp;</span>min<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> max <span class="token operator">-</span> min <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>ret <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//进行计数</span>        tmp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>min<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> tmp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numsSize<span class="token punctuation">;</span> i <span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span><span class="token operator">--</span>tmp<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-7-桶排序-Bucket-Sort"><a href="#1-7-桶排序-Bucket-Sort" class="headerlink" title=" 1.7 桶排序(Bucket Sort)"></a><h4> 1.7 桶排序(Bucket Sort)</h4></h3><p>&emsp;&emsp;桶排序是计数排序的扩展。利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。为了使桶排序更加高效，我们需要做到这两点:<br>&emsp;&emsp;&emsp;①在额外空间充足的情况下，尽量增大桶的数量；<br>&emsp;&emsp;&emsp;②使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中。<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。(分完桶要对每个桶内元素进行排序)</p><h3 id="1-8-基数排序-Radix-Sort"><a href="#1-8-基数排序-Radix-Sort" class="headerlink" title=" 1.8 基数排序(Radix Sort)"></a><h4> 1.8 基数排序(Radix Sort)</h4></h3><ul><li><p>基数排序是桶排序的扩展。</p></li><li><p>原理：将整数按位数切割成不同的数字，然后按每个位数分别比较。</p></li><li><p>具体做法是：将所有待比较数值统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。</p><p><img src="/2022/03/19/coding%20tips/radixSort.gif" alt></p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/********************************************************************* 输      入  : nums为待排序的数组， numsSize为数组大小， exp为指数*               当exp=1时对个位数进行排序，为10则对十位数进行排序......*********************************************************************/</span><span class="token keyword">void</span> <span class="token function">countSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">,</span> <span class="token keyword">int</span> exp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> tmp<span class="token punctuation">[</span>numsSize<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//将数组元素按当前排序位放入对应的桶中</span>        bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> bucket<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">//将桶中元素个数作前缀和，以便后续按顺序输出</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numbersSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        tmp<span class="token punctuation">[</span>bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//将桶中元素按顺序拿出并放入临时数组tmp中</span>        bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>exp<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbersSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//将排序后的tmp数组返回给nums</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">radixSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//找到数组中的最大值，用来确定需要进行多少位(次)排序</span>        max <span class="token operator">=</span> <span class="token function">fmax</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> exp <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> exp <span class="token operator">&lt;</span> max<span class="token punctuation">;</span> exp <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//按个、十、百、千...的顺序逐步进行排序</span>        <span class="token function">countSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize<span class="token punctuation">,</span> exp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-9-堆排序-Heap-Sort"><a href="#1-9-堆排序-Heap-Sort" class="headerlink" title=" 1.9 堆排序(Heap Sort)"></a><h4> 1.9 堆排序(Heap Sort)</h4></h3><ol><li>构建大顶堆：</li></ol><p><img src="/2022/03/19/coding%20tips/heapify.gif" alt></p><ol><li>下滤：</li></ol><p><img src="/2022/03/19/coding%20tips/heapSort.gif" alt></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 下滤操作</span><span class="token keyword">void</span> <span class="token function">siftDown</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> curIdx<span class="token punctuation">,</span> <span class="token keyword">int</span> endIdx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> nums<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> childIdx <span class="token operator">=</span> curIdx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>childIdx <span class="token operator">&lt;=</span> endIdx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>childIdx <span class="token operator">&lt;</span> endIdx <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>childIdx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>childIdx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token operator">++</span>childIdx<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>childIdx<span class="token punctuation">]</span> <span class="token operator">></span> tmp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>childIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            curIdx <span class="token operator">=</span> childIdx<span class="token punctuation">;</span>            childIdx <span class="token operator">=</span> curIdx <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>       nums<span class="token punctuation">[</span>curIdx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 构建大顶堆</span><span class="token keyword">void</span> <span class="token function">heapify</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> endIdx<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>endIdx <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> endIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 堆排序(原地)</span><span class="token keyword">void</span> <span class="token function">heapSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">heapify</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> numsSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">siftDown</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-字符串操作-1"><a href="#2-字符串操作-1" class="headerlink" title=" 2 字符串操作"></a><h3> 2 <span id="string">字符串操作</span></h3></h2><ul><li><p>用双引号括起来的是字符串字面量，也叫字符串常量；用单引号括起来的是字符常量。对于双引号中的字符，编译器会自动加入’\0’字符。</p></li><li><p>字符串常量之间若没有间隔或用空白字符分隔，则会被串联起来。</p></li><li><p>用双引号括起来的内容被视为指向该字符串存储位置的指针，类似数组的指针等同于数组中第一个元素的地址。考虑如下代码：</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> main<span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s, %p, %c\n"</span><span class="token punctuation">,</span> <span class="token string">"We"</span><span class="token punctuation">,</span> <span class="token string">"are"</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token string">"space farers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  其输出为：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">We<span class="token punctuation">,</span> <span class="token number">0x100000f61</span><span class="token punctuation">,</span> s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>字符串数组的空间必须比字符串中的字符数多1.</li></ul><h3 id="2-1-字符串、字符串数组与字符数组的区别"><a href="#2-1-字符串、字符串数组与字符数组的区别" class="headerlink" title=" 2.1 字符串、字符串数组与字符数组的区别"></a><h4> 2.1 字符串、字符串数组与字符数组的区别</h4></h3><ul><li>字符数组： 数组存放的数据类型为字符，声明: <code>char *str = &#123;&#39;w&#39;,&#39;o&#39;, &#39;r&#39;, &#39;l&#39;, &#39;d&#39;&#125;;</code>. 对于字符数组，有：<code>strlen(str) == sizeof(str)/sizeof(char) == 5</code>.</li></ul><ul><li>字符串： C语言中，字符串用字符数组来表示，跟字符数组类似，不同的是最后是以’\0’空字符为结尾，而字符数组没有这个所谓的结尾. 声明：<code>char str* = &quot;world;&quot;</code>. 此时有：<code>strlen(str) == 5</code>,而 <code>sizeof(str) == 6</code>.(<code>strlen()</code>不将字符串中的<code>\0</code>计算到串的长度，而<code>sizeof()</code>会)</li></ul><ul><li>字符串数组：数组中存放的数据类型为字符串，相当于二维的字符数组(但是每一行的最后一个都是<code>&#39;\0&#39;</code>).</li></ul><h3 id="2-2-常见字符处理函数"><a href="#2-2-常见字符处理函数" class="headerlink" title=" 2.2 常见字符处理函数"></a><h4> 2.2 常见字符处理函数</h4></h3><p>2.2.1 scanf()</p><p>函数功能：从键盘获得用户输入</p><ul><li>对于 <code>scanf()</code>，输入数据的格式要和控制字符串的格式保持一致. 与<code>printf</code>类似，都有变量列表，不同的是<code>printf</code>的变量列表都是变量名即可，而<code>scanf</code>需要在变量名前加上<code>&amp;</code>来获取变量在内存中的地址</li><li>从键盘输入的数据并没有直接交给 <code>scanf()</code>，而是<strong>放入了缓冲区中</strong>，直到我们<strong>按下回车键, scanf() 才到缓冲区中读取数据</strong>。如果缓冲区中的数据符合 scanf() 的要求，那么就读取结束；如果不符合要求，那么就继续等待用户输入，或者干脆读取失败。scanf() 不会跳过不符合要求的数据，遇到不符合要求的数据会读取失败，而不是再继续等待用户输入。</li></ul><p>scanf()的格式控制符汇总如下表：<br>| 格式控制符| 说明 |<br>| ————-|———|<br>|%c|读取一个<strong>单一的字符</strong>|<br>|%hd、%d、%ld|读取一个<strong>十进制整数</strong>，并分别赋值给 short、int、long 类型|<br>|%ho、%o、%lo|读取一个<strong>八进制整数</strong>（可带前缀也可不带），并分别赋值给 short、int、long 类型|<br>|%hx、%x、%lx|读取一个<strong>十六进制整数</strong>（可带前缀也可不带），并分别赋值给 short、int、long 类型|<br>|%hu、%u、%lu|读取一个<strong>无符号整数</strong>，并分别赋值给 unsigned short、unsigned int、unsigned long 类型|<br>|%f、%lf|读取一个<strong>十进制形式的小数</strong>，并分别赋值给 float、double 类型|<br>|%e、%le|读取一个<strong>指数形式的小数</strong>，并分别赋值给 float、double 类型|<br>|%g、%lg|既可以读取一个<strong>十进制形式的小数</strong>，也可以读取一个<strong>指数形式的小数</strong>，并分别赋值给 float、double 类型|<br>|%s|读取一个<strong>字符串</strong>（以空白符为结束）|</p><p>2.2.2 getchar()</p><p><code>scanf(&quot;%c&quot;, c)</code>的替代品，除了更加简洁，没有其它优势了; 或者说，getchar() 就是 scanf() 的一个简化版本.</p><p>下面的代码演示了 getchar() 的用法：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c: %c\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入实例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@↙c<span class="token operator">:</span> @<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.2.2 getche()</p><p>没有缓冲区，输入一个字符后会立即读取，不用等待用户按下回车键，这是它和 scanf()、getchar() 的最大区别。请看下面的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;conio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token function">getche</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"c: %c\n"</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入示例： </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@c<span class="token operator">:</span> @<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入<code>@</code>后，getche() 立即读取完毕，接着继续执行 printf() 将字符输出，所以没有按下回车键程序就运行结束了。</p><p>2.2.3 printf()</p><p>2.2.4 puts</p><ul><li>与printf的区别：<code>puts()</code>只显示字符串，并在字符串末尾加上换行符.</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> words<span class="token punctuation">[</span><span class="token number">81</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"I am a string in an array."</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>ptr1 <span class="token operator">=</span> <span class="token string">"Something is pointing at me."</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Here are some strings:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Here are some strings<span class="token operator">:</span>I am a string in an array<span class="token punctuation">.</span>Something is pointing at me<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h1 id="3-各种数据结构-1"><a href="#3-各种数据结构-1" class="headerlink" title=" 3 各种数据结构"></a><h3> 3 <span id="data_structure">各种数据结构</span></h3></h1><h2 id="3-1-链表-1"><a href="#3-1-链表-1" class="headerlink" title=" 3.1 链表"></a><h4> 3.1 <span id="ListNode">链表</span></h4></h2><h3 id="3-1-1-简介"><a href="#3-1-1-简介" class="headerlink" title=" 3.1.1 简介"></a><h5> 3.1.1 简介</h5></h3><ul><li>单链表：结点由一个数据域和指针域构成，其中指针域存储当前结点的后继元素的地址。</li><li>双链表：除了一个数据域、一个存放后继元素的指针域，还有一个指针域用于存放当前结点的前趋元素的地址。</li><li><p>循环链表：链表首尾相接。单链表中最后一个元素的指针域为空（NULL），而循环链表则指向第一个结点元素，即tail-&gt;next = head.</p></li><li><p>头指针：指向链表第一个结点的指针，其实就是*head</p></li><li>首元结点：存储第一个数据元素的结点</li><li>头结点：首元结点前的虚拟结点dummyHead</li><li>dummyHead的作用：便于对首元结点的操作，如插入与删除，并且其处理与其他位置的处理时一致的，无需额外的特殊处理。其val可以存一些关键信息，如链表长度。</li></ul><p>访问链表，只能通过头指针进入链表，<strong>结点需要按顺序访问</strong>。</p><h3 id="3-1-2-结构体定义"><a href="#3-1-2-结构体定义" class="headerlink" title=" 3.1.2 结构体定义"></a><h5> 3.1.2 结构体定义</h5></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">&#123;</span>    ElemType val<span class="token punctuation">;</span>               <span class="token comment">//数据域，存放data</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>      <span class="token comment">//指针域，指向当前节点的后继节点，存放地址</span>    <span class="token comment">//struct ListNode *prev;    //指针域，指向当前节点的前趋节点</span><span class="token punctuation">&#125;</span>ListNode；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>*next/*prev</code>用<code>struct ListNode</code>定义，表示其指向的数据元素也是包括这两项的，也就是套娃</p><h3 id="3-1-3-链表的基本操作"><a href="#3-1-3-链表的基本操作" class="headerlink" title=" 3.1.3 链表的基本操作"></a><h5> 3.1.3 链表的基本操作</h5></h3><ol><li>遍历查询</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ElemType <span class="token function">funcName</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">,</span> ElemType param<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>some condition needed to be handle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">//handle code here like save the val to an array or change the val</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>插入节点</li></ol><ul><li>尾插法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token function">insertNode</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>obj<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>cur <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment">//用于遍历链表的变量</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//找到最后一个节点</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>头插法</li></ul><pre class="line-numbers language-C++&#123;.line-numbers&#125;" data-language="C++&#123;.line-numbers&#125;"><code class="language-C++&#123;.line-numbers&#125;">struct ListNode insertNode(struct ListNode *obj, int val)&#123;    struct ListNode *node &#x3D; (struct ListNode *)malloc(sizeof(struct ListNode));    node-&gt;val &#x3D; val;    node-&gt;next &#x3D; next;    obj-&gt;next &#x3D; node;    return obj;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>删除节点</li></ol><div style="display: none">    这里创建空行</div><ul><li>LeetCode 19. 删除链表的倒数第N个结点</li></ul><div style="display: none">    这里创建空行</div><p>问题描述：给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点.</p><p>思路：创建两个指针，初始化都头结点，<code>fast</code>指针先向后移动<code>n</code>个结点，然后<code>fast</code>和<code>slow</code>指针同时向后移动直至<code>fast-&gt;next</code>为空，说明此时<code>slow-&gt;next</code>即为倒数第N个结点，直接将<code>slow-&gt;next</code>指向下下个结点，即<code>slow-&gt;next = slow-&gt;next-&gt;next</code>.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> slow <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fast<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    tmp <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    slow<span class="token operator">-></span>next <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>LeetCode 82. 删除排序链表中的重复元素II</li></ul><p>   问题描述：给定一个已排序的链表的头 head ， 删除原始链表中所有重复数字的节点，只留下不同的数字 。返回 已排序的链表。</p><p>   思路: 用<code>prev</code>存放更新后的链表中的最后一个非重复性结点，用<code>cur</code>指针遍历链表，当<code>cur-&gt;val == cur-&gt;next-&gt;val</code>时，说明当前结点为重复性结点，记录当前的<code>val</code>，当当前结点的val等于这个值时指针后移一位；当检测到非重复性结点时，将<code>prev</code>的<code>next</code>域指向该结点，并将<code>prev</code>和<code>cur</code>同时后移一位。由于原链表中的头结点可能为重复性结点，因此需要创建一个虚拟头结点<code>dummyHead</code>来统一处理。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>dummyHead <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dummyHead<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>prev <span class="token operator">=</span> dummyHead<span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>val <span class="token operator">==</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> delVal <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>val <span class="token operator">==</span> delVal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            prev<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            prev <span class="token operator">=</span> prev<span class="token operator">-></span>next<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummyHead<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>翻转链表</p><p>LeetCode 206. 反转链表</p></li></ol><ul><li>递归</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代（双指针）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span><span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>prev <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> prev<span class="token punctuation">;</span>        prev <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>检查是否成环</p><p> LeetCode 141. 环形链表</p><p> 问题描述：给你一个链表的头节点 head ，判断链表中是否有环。</p><p> 如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p><p> 如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p></li></ol><pre><code>思路：快慢指针，如果快慢指针出现相等的情况说明有环，当快指针为NULL说明无环。</code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*** Definition for singly-linked list.* struct ListNode &#123;*     int val;*     struct ListNode *next;* &#125;;*/</span><span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">,</span> <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-栈与队列-1"><a href="#3-2-栈与队列-1" class="headerlink" title=" 3.2 栈与队列"></a><h4> 3.2 <span id="Stack_Queue">栈与队列</span></h4></h3><p>&nbsp;</p><h3 id="3-3-树-1"><a href="#3-3-树-1" class="headerlink" title=" 3.3 树"></a><h4> 3.3 <span id="TreeNode">树</span></h4></h3><h4 id="3-3-1-简介"><a href="#3-3-1-简介" class="headerlink" title=" 3.3.1 简介"></a><h5> 3.3.1 简介</h5></h4><p>&emsp;&emsp;树是一种树状的数据结构，其节点间的关系如同大树一般，按照不同的层次关系形成了节点间的父子关系。按照子节点个数可以分为二叉树、三叉树、多叉树等，如果子节点个数为 <code>1</code> 其实就是链表。</p><p>&emsp;&emsp;树中除了根节点之外，其余节点均有父节点，而没有子节点的节点称为叶节点。</p><p>&emsp;&emsp;树其实可看作是<strong>链表的高配版</strong>。树的实现就是<strong>对链表的指针域进行了扩充</strong>，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。</p><p>&emsp;&emsp;前边提到的二叉树，按照节点间的大小关系和节点的数量还可以分为以下几种不同的树：</p><ul><li>完全二叉树: <strong>除了最后一层结点，其它层的结点数都达到了最大值</strong>；同时最后一层的结点都是按照从左到右依次排布。</li><li>满二叉树: 除了最后一层，其它层的结点都有两个子结点。</li><li>二叉排序树: 是一棵空树，或者若它的左子树不空，则<strong>左子树上所有结点的值均小于它的根结点的值</strong>；若它的右子树不空，则<strong>右子树上所有结点的值均大于它的根结点的值</strong>；它的左、右子树也分别为二叉排序树。（按中序遍历后结果为有序数组）</li><li>平衡二叉树: 平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</li><li>红黑树: 红黑树通过将结点进行红黑着色，使得原本高度平衡的树结构被稍微打乱，平衡程度降低。红黑树<strong>不追求完全平衡</strong>，只要求达到部分平衡。这是一种折中的方案，大大提高了结点删除和插入的效率。</li></ul><h4 id="3-3-2-二叉树性质"><a href="#3-3-2-二叉树性质" class="headerlink" title=" 3.3.2 二叉树性质"></a><h5> 3.3.2 二叉树性质</h5></h4><ol><li><p>二叉树第 <code>i</code> 层上的节点树最多为$2^{i-1}$个。</p></li><li><p>深度为<code>k</code>的二叉树的节点总数量最多为$2^k - 1$(等比数列求和)。</p></li><li><p>包含<code>n</code>个节点的二叉树高度最少为<code>log2(n)+1</code>或者<code>log2(n+1)</code>，最大高度为<code>n</code>。</p></li><li><p>在任意一棵二叉树中，若叶节点的个数为$n_0$, 度为<code>2</code>的节点数为$n_2$(即有两个子节点的节点),则有$n_0 = n_2 + 1$。</p></li></ol><blockquote><p>记度为<code>0</code>(即叶节点)的数量为$n_0$、度为<code>1</code>的为$n_1$、度为<code>2</code>的为$n_2$, 则二叉树中的节点数量为$n = n_0 + n_1 + n_2$,而边数则应该满足$n - 1 = 2<em>n_2 + n_1$即$n_0 + n_1 + n_2- 1 = 2</em>n_2 + n_1$,合并得到$n_2 + 1 = n_0$</p></blockquote><h4 id="3-3-3-存储方式"><a href="#3-3-3-存储方式" class="headerlink" title=" 3.3.3 存储方式"></a><h5> 3.3.3 存储方式</h5></h4><ol><li><p>链式存储，可分为双亲表示法、孩子表示法以及孩子兄弟表示法</p></li><li><p>顺序存储：用数组来存储二叉树，这种存储方式有一个特别好用的性质：如果父节点的数组下标为<code>i</code>，则其左右孩子的下标分别为<code>2i+1</code>和<code>2i+2</code>(数组表示中<code>NULL</code>节点也要占一个位置)。</p></li></ol><h4 id="3-3-4-构造方式"><a href="#3-3-4-构造方式" class="headerlink" title=" 3.3.4 构造方式"></a><h5> 3.3.4 构造方式</h5></h4><ul><li>结构体定义</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token operator">*</span>lChild<span class="token punctuation">;</span>    <span class="token comment">//左孩子指针</span>    <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token operator">*</span>rChild<span class="token punctuation">;</span>    <span class="token comment">//右孩子指针</span><span class="token punctuation">&#125;</span>BinaryTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>树的构造(以数组为例)</p><ul><li><p>先通过数组创建二叉树结点数组</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">BinaryTree<span class="token operator">*</span><span class="token operator">*</span> nodes <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BinaryTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>lChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>rChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>遍历二叉树结点数组，<code>i</code>的<code>left</code>指向<code>2i+1</code>,<code>i</code>的<code>right</code>指向<code>2i+2</code>. 注意要<strong>判断<code>2i+2</code>是否越界</strong>。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>lChild <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>rChild <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-3-5-二叉树的遍历"><a href="#3-3-5-二叉树的遍历" class="headerlink" title=" 3.3.5 二叉树的遍历"></a><h5> 3.3.5 二叉树的遍历</h5></h4><p>&emsp;&emsp;二叉树的遍历方式一般有<code>4</code>种：前序遍历、中序遍历、后序遍历以及层序遍历。前三种属于<strong>深度优先</strong>遍历(因而需要用到栈)，后一种则是<strong>广度优先</strong>遍历(因而需要用到队列)。</p><ul><li>前序遍历：从根节点开始遍历，按照<strong>根结点-左孩子-右孩子</strong>的顺序进行遍历.</li><li>中序遍历：按照<strong>左孩子-根结点-右孩子</strong>的顺序进行遍历.</li><li>后序遍历：按照<strong>左孩子-右孩子-根结点</strong>的顺序进行遍历.</li><li>层序遍历：按照层数进行遍历，一般是当前所在层按照由左而右的顺序进行遍历.</li></ul><ol><li><p>前序遍历的实现</p><ul><li><p>顺序为<strong>根-左-右</strong>，因而遍历过程中直接把当前遍历到的结点的值插入到答案中，将当前结点入栈后优先访问左子树直至左子树为<code>NULL</code>；将栈顶结点赋给遍历变量，然后对当前结点的右子树进行遍历。</p><ul><li><p>迭代实现</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>递归实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>   <span class="token comment">//先中</span>    <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后左</span>    <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再右</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul></li><li><p>中序遍历的实现</p><ul><li><p>顺序为<strong>左-根-右</strong>,需要先访问完当前结点的左子树再将当前结点的值加入到答案中，因而需要一直访问左子树直至左子树为<code>NULL</code>,再把当前结点的值加入答案，然后访问右孩子。</p><ul><li><p>迭代实现</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归实现</p> <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//左</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>   <span class="token comment">//中</span>    <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//右</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>后序遍历的实现</p><ul><li><p>后序遍历的顺序为<strong>左-右-根</strong>，直接迭代似乎无法做到先访问完左右子树后再访问自己，但是可以发现后序遍历的顺序其实是<code>根-右-左</code>的翻转后的顺序，因此，可以采用<code>根-右-左</code>的顺序进行遍历，这个顺序其实就类似前序遍历，只是这里先访问右孩子，而前序则是先访问左孩子。遍历完翻转一下结果就实现了后序遍历；或是通过递归来实现。</p><ul><li><p>迭代实现(+翻转)</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//翻转</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//根右左+翻转</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>             res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span> <span class="token comment">//先根</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>  <span class="token comment">//后右</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>      <span class="token comment">//再左</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>returnSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//最后翻转一下</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>递归实现</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//先左</span>    <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//后右</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>   <span class="token comment">//再根</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li><li><p>层序遍历的实现</p></li></ol><ul><li><p>层序遍历是按照每一层的顺序来进行遍历，因而我们需要借用队列这一数据结构，访问当前结点，然后把其左孩子和右孩子插入队列中，直到把这一层的结点访问完就进行下一层的访问。因而需要创建一个变量用来记录当前所在的层的结点数，结点数为队列尾指针减去头指针的差。要注意，获取当前层的结点数需要在访问该层结点的开始前进行，否则访问该层的时候由于会插入该节点的左孩子和右孩子，将会导致队列中结点数的改变。</p><ul><li><p>实现代码如下。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//层序遍历</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">layerTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> queue<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//创建队列</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//头指针、尾指针</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>           <span class="token comment">//将根节点插入队列中，此时为第一层</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//当队列不为空说明遍历未完成</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> rear <span class="token operator">-</span> front<span class="token punctuation">;</span>    <span class="token comment">//获取当前队列中的结点数，其实就是当前层的节点数</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token comment">//每次访问一个结点就将节点数减1</span>            BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ol><li><p>统一迭代遍历</p><p> &emsp;&emsp;通过上边前序、中序、后序遍历的迭代实现可以发现，三者的代码并不统一，特别后序遍历还需要进行一次翻转操作。其实可以用一种更为清晰的思路来实现，三者仅需要调整三个入栈语句的顺序即可。</p><p> &emsp;&emsp;遍历过程中采用栈结构来存储尚且未遍历的结点，这样无法同时解决遍历到的结点和下一个待处理结点不一致的情况，如中序遍历中当前遍历到的结点为根节点，而我们先处理的应该是左结点。因此在结点入栈时我们需要对结点进行标记，通过在待处理结点入栈后压入一个空结点，那么以后从栈中弹出结点，如果弹出的结点为空结点，说明当前栈顶结点就是我们要处理的结点；否则，说明还没到处理的结点，将三个结点按顺序入栈。<strong>注意</strong>：由于栈是<code>FILO</code>的结构，压入和弹出的顺序是相反的，因而我们在压栈的时候要反过来。</p></li></ol><ul><li><p>前序遍历先处理的是根节点，因而其入栈顺序为<code>右-左-根-NULL</code>.</p><ul><li><p>实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">preOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><ul><li><p>中序遍历先处理的是左节点，因而其入栈顺序为<code>右-根-NULL-左</code>.</p><ul><li><p>实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">inOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>后序遍历先处理的是左节点，因而其入栈顺序为<code>根-NULL-右-左</code>.</p><ul><li><p>实现代码如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">postOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h4 id="3-3-6-二叉树ACM代码"><a href="#3-3-6-二叉树ACM代码" class="headerlink" title=" 3.3.6 二叉树ACM代码"></a><h5> 3.3.6 二叉树ACM代码</h5></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span>  <span class="token comment">//printf,scanf</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span> <span class="token comment">//malloc</span></span><span class="token comment">//#include &lt;string.h> //memset</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_NODE_NUM</span> <span class="token expression"><span class="token number">100</span>    </span><span class="token comment">//树的节点数最大为100</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token operator">*</span>lChild<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">MyBinaryTree</span> <span class="token operator">*</span>rChild<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>BinaryTree<span class="token punctuation">;</span>BinaryTree<span class="token operator">*</span> <span class="token function">ConstructTree</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>numsSize <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        BinaryTree<span class="token operator">*</span><span class="token operator">*</span> nodes <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">*</span>numsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BinaryTree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>val <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>lChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>rChild <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    BinaryTree <span class="token operator">*</span>root <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>lChild <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        nodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>rChild <span class="token operator">=</span> nodes<span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***********************************一般遍历****************************************/</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>l<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>res<span class="token punctuation">)</span><span class="token punctuation">[</span>r<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//根-右-左然后翻转一下</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">||</span> stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>returnSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//层序遍历</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">layerTraverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> queue<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> rear <span class="token operator">-</span> front<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> queue<span class="token punctuation">[</span>front<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> queue<span class="token punctuation">[</span>rear<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***********************************统一迭代****************************************/</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">preOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">inOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token function">postOrderTraverse2</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>res <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token operator">*</span>MAX_NODE_NUM<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryTree<span class="token operator">*</span> stack<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> stk_top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">*</span>returnSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>stk_top <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        BinaryTree<span class="token operator">*</span> cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">;</span>            stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>rChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>rChild<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>lChild<span class="token punctuation">)</span> stack<span class="token punctuation">[</span>stk_top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>lChild<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>stk_top<span class="token punctuation">]</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/***********************************递归实现****************************************/</span><span class="token keyword">void</span> <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token function">inOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>BinaryTree <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>res<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>lChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postOrderTraverse3</span><span class="token punctuation">(</span>root<span class="token operator">-></span>rChild<span class="token punctuation">,</span> res<span class="token punctuation">,</span> returnSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">*</span>returnSize<span class="token punctuation">)</span><span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//将遍历结果打印出来</span><span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numsSize<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%3d"</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//遍历函数</span><span class="token keyword">void</span> <span class="token function">traverse</span><span class="token punctuation">(</span>BinaryTree<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> numsSize<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"先序遍历1结果：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>preOrder <span class="token operator">=</span> <span class="token function">preOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>preOrder<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("先序遍历2结果：\n");</span>    <span class="token comment">//int *preOrder2 = preOrderTraverse2(root, &amp;size);</span>    <span class="token comment">//display(preOrder2, size);</span>    <span class="token comment">//printf("先序遍历3结果：\n");</span>    <span class="token comment">//size = 0;</span>    <span class="token comment">//int *preOrder3 = (int *)malloc(sizeof(int)*MAX_NODE_NUM);</span>    <span class="token comment">//preOrderTraverse3(root, preOrder3, &amp;size);</span>    <span class="token comment">//display(preOrder3, size);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"中序遍历1结果：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>inOrder <span class="token operator">=</span> <span class="token function">inOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>inOrder<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("中序遍历2结果：\n");</span>    <span class="token comment">//int *inOrder2 = inOrderTraverse2(root, &amp;size);</span>    <span class="token comment">//display(inOrder2, size);</span>    <span class="token comment">//printf("中序遍历3结果：\n");</span>    <span class="token comment">//size = 0;</span>    <span class="token comment">//int *inOrder3 = (int *)malloc(sizeof(int)*MAX_NODE_NUM);</span>    <span class="token comment">//inOrderTraverse3(root, inOrder3, &amp;size);</span>    <span class="token comment">//display(inOrder3, size);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"后序遍历1结果：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>postOrder <span class="token operator">=</span> <span class="token function">postOrderTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>postOrder<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//printf("后序遍历2结果：\n");</span>    <span class="token comment">//int *postOrder2 = postOrderTraverse2(root, &amp;size);</span>    <span class="token comment">//display(postOrder2, size);</span>    <span class="token comment">//printf("后序遍历3结果：\n");</span>    <span class="token comment">//size = 0;</span>    <span class="token comment">//int *postOrder3 = (int *)malloc(sizeof(int)*MAX_NODE_NUM);</span>    <span class="token comment">//postOrderTraverse3(root, postOrder3, &amp;size);</span>    <span class="token comment">//display(postOrder3, size);</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"层序遍历结果：\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>layer <span class="token operator">=</span> <span class="token function">layerTraverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token operator">&amp;</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">display</span><span class="token punctuation">(</span>layer<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span>MAX_NODE_NUM<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入二叉树的节点值(-1表示该节点为空),按空格结束输入\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num<span class="token punctuation">;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token char">'\n'</span> <span class="token operator">||</span> index <span class="token operator">==</span> MAX_NODE_NUM<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    BinaryTree<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token function">ConstructTree</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traverse</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// free(nums);</span>    <span class="token function">free</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-7-二叉搜索树"><a href="#3-3-7-二叉搜索树" class="headerlink" title=" 3.3.7 二叉搜索树"></a><h5> 3.3.7 二叉搜索树</h5></h4><ol><li>插入</li></ol><p>&emsp;&emsp;BST插入结点只需要按照BST的性质寻找插入位置即可。</p><ul><li>当待插入的树为空树时，直接将待插入节点作为根节点返回即可。</li><li>当待插入的树不为空时，按照BST性质查找位置：<ul><li>当待插入节点的值小于当前节点值时，则插入位置在当前节点的左子树中。</li><li>当待插入节点的值大于当前节点值时，则插入位置在当前节点的右子树中。</li><li>当待插入节点的值等于当前节点值时，插入失败。</li></ul></li></ul><p>具体实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> node <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//空树直接作为根节点即可</span>        root <span class="token operator">=</span> node<span class="token punctuation">;</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//查找插入位置</span>        parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> false<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">></span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//判断插入位置在左还是在右</span>        parent<span class="token operator">-></span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        parent<span class="token operator">-></span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>删除</li></ol><p>&emsp;&emsp;删除操作相对插入操作较为复杂。首先需要查找待删除节点位置，如果节点不在树中，则返回<code>false</code>表明删除失败即可。当找到待插入节点的位置时，有以下三种情况：</p><ul><li>待删除结点的左子树为空：将该节点的双亲结点指向其的指针改为指向其右子树，然后将该节点释放即可。</li><li>待删除结点的右子树为空：将该节点的双亲结点指向其的指针改为指向其左子树，然后将该节点释放即可。</li><li>待删除结点的左右子树均不为空：将该节点的值修改为其左子树中最大值或右子树中最小值，并将对应的结点删去即可。</li></ul><p>具体实现：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">,</span> <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>parent<span class="token operator">-></span>val <span class="token operator">&lt;</span> val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>right <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            parent<span class="token operator">-></span>left <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">free</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">struct</span> <span class="token class-name">TreeNode</span><span class="token operator">*</span> cur1 <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur1<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            parent <span class="token operator">=</span> cur1<span class="token punctuation">;</span>            cur1 <span class="token operator">=</span> cur1<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur<span class="token operator">-></span>val <span class="token operator">=</span> cur1<span class="token operator">-></span>val<span class="token punctuation">;</span>        parent<span class="token operator">-></span>left <span class="token operator">=</span> cur1<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>cur1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-哈希表"><a href="#3-4-哈希表" class="headerlink" title=" 3.4 哈希表"></a><h4> 3.4 <span id="HashTable">哈希表</span></h4></h3><p>&nbsp;</p><h4 id="3-4-1-简介"><a href="#3-4-1-简介" class="headerlink" title=" 3.4.1 简介"></a><h5> 3.4.1 简介</h5></h4><p>&emsp;&emsp;<strong>c语言本身没有哈希</strong>，需要使用第三方头文件<strong>uthash.h</strong>.</p><p>&emsp;&emsp;Entry：键值对，key-value，其中key为元素的值</p><p>&emsp;&emsp;哈希表的扩容：增长因子/负载因子，已占内存与总内存的百分比，当达到该阈值时，就触发扩容机制。</p><p>&emsp;&emsp;HashMap的增长因子为75％。</p><p>&emsp;&emsp;扩容机制：新建一个原数组的2倍大小的数组，并将原数组中的entry重新hash一遍</p><h3 id="3-4-2-结构体定义"><a href="#3-4-2-结构体定义" class="headerlink" title=" 3.4.2 结构体定义"></a><h5> 3.4.2 结构体定义</h5></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ElemType key<span class="token punctuation">;</span>       <span class="token comment">//键值</span>    <span class="token comment">//ElemType val;     //其他有用的数据，如数量等</span>    UT_hash_handle hh<span class="token punctuation">;</span>  <span class="token comment">//哈希函数处理句柄，声明时必须有这一句否则报错</span><span class="token punctuation">&#125;</span>HashTable<span class="token punctuation">,</span> HashMap<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-3-哈希操作"><a href="#3-4-3-哈希操作" class="headerlink" title=" 3.4.3 哈希操作"></a><h5> 3.4.3 哈希操作</h5></h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">hashTable</span> <span class="token operator">*</span>users <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>       <span class="token comment">//一定要初始化为NULL，不然会报错.</span><span class="token function">HASH_FIND_INT</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> <span class="token operator">&amp;</span>data<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//查询， users为待查询的哈希表，&amp;user_key为目标key的地址，tmp为函数输出值</span><span class="token function">HASH_ADD_INT</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> key<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//插入，users为待插入的哈希表，key为key域的变量名，tmp为待插入的entry结构体</span><span class="token function">HASH_COUNT</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//统计，users为待查询的哈希表，输出值为哈希表中entry个数</span><span class="token function">HASH_DEL</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//将哈希表user中的tmp删去</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&emsp;&emsp;哈希表的遍历有两种方式，一种是内置的<code>HASH_ITER</code>函数，另一种则是采用<code>for</code>循环，利用结构体内置的哈希处理句柄<code>hh</code>进行。</p><ul><li><p>方式1</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*遍历，hh为hash句柄，users为待循环的哈希表，s为每次遍历的entry，/tmp临时变量(好像没啥用但一定要有，并且需要提前定义，但不需要初始化)*/</span><span class="token keyword">struct</span> <span class="token class-name">my_struct</span> <span class="token operator">*</span>s<span class="token punctuation">,</span> <span class="token operator">*</span>tmp<span class="token punctuation">;</span><span class="token function">HASH_ITER</span><span class="token punctuation">(</span>hh<span class="token punctuation">,</span> users<span class="token punctuation">,</span> s<span class="token punctuation">,</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"user id %d: name %s\n"</span><span class="token punctuation">,</span> s<span class="token operator">-></span>id<span class="token punctuation">,</span> s<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* ... it is safe to delete and free s here */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方式2</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">print_users</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">my_struct</span> <span class="token operator">*</span>s<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>s<span class="token operator">=</span>users<span class="token punctuation">;</span> s <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> s<span class="token operator">=</span>s<span class="token operator">-></span>hh<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"user id %d: name %s\n"</span><span class="token punctuation">,</span> s<span class="token operator">-></span>id<span class="token punctuation">,</span> s<span class="token operator">-></span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="3-5-堆-1"><a href="#3-5-堆-1" class="headerlink" title=" 3.5 堆"></a><h4> 3.5 <span id="Heap">堆</span></h4></h2><h2 id="4-常规算法"><a href="#4-常规算法" class="headerlink" title=" 4 常规算法"></a><h2> 4 常规算法</h2><h3 id="4-1-二分法"><a href="#4-1-二分法" class="headerlink" title=" 4.1 二分法"></a><h3> 4.1 二分法</h3><h3 id="4-2-动态规划"><a href="#4-2-动态规划" class="headerlink" title=" 4.2 动态规划"></a><h3> 4.2 动态规划</h3><h3 id="4-3-贪心算法"><a href="#4-3-贪心算法" class="headerlink" title=" 4.3 贪心算法"></a><h3> 4.3 贪心算法</h3><h3 id="4-4-回溯"><a href="#4-4-回溯" class="headerlink" title=" 4.4 回溯"></a><h3> 4.4 回溯</h3><h3 id="4-5-KMP"><a href="#4-5-KMP" class="headerlink" title=" 4.5 KMP"></a><h3> 4.5 KMP</h3><h3 id="4-6-排序"><a href="#4-6-排序" class="headerlink" title=" 4.6 排序"></a><h3> 4.6 排序</h3><h3 id="4-7-bfs-dfs"><a href="#4-7-bfs-dfs" class="headerlink" title=" 4.7 bfs/dfs"></a><h3> 4.7 bfs/dfs</h3><div style="page-break-after: always;"></div><h1 id="c-的目录"><a href="#c-的目录" class="headerlink" title="c++的目录"></a><h2><span id="cpp">c++的目录</span></h2></h1><h3 id="0-各种基础知识-2"><a href="#0-各种基础知识-2" class="headerlink" title="　0.各种基础知识"></a><h3>　0.<a href="#SomethingforCpp">各种基础知识</a></h3><h3 id="1-类"><a href="#1-类" class="headerlink" title="　1.类"></a><h3>　1.<a href="#ClassofCpp">类</a></h3><h1 id="0-各种基础知识-3"><a href="#0-各种基础知识-3" class="headerlink" title=" 0 各种基础知识"></a><h3> 0 <span id="SomethingforCpp">各种基础知识</span></h3></h1><ol><li><p>C是结构化和模块化的语言，是面对过程的；C++则是在C的基础上增加了面向对象的机制。</p><ul><li>结构化：主要使用顺序、选择、循环三种基本结构，核心是将程序模块化。</li><li>面向对象：程序以“对象”为中心进行分析和设计的。先将问题空间划分为一系列对象的集合，再将对象集合进行分类抽象，一些具有相同属性行为的对象被抽象为一个类，类还可抽象分为子类、超类（超类是子类的抽象）。采用继承来建立这些类之间的联系，形成结构层次。</li></ul></li><li><p>iostream.h: 类似C语言中的stdio.h，但后者不能重载，而前者则可以通过运算符重载机制对iostream库进行扩充。</p><ul><li>熟悉的输入输出操作分别是由istream(输入流)和ostream(输出流)这两个类提供的，为了允许双向的输入／输出，由istream和ostream派生出了iostream类。</li><li>iostream库定义了以下三个标准流对象：<ul><li>cin，表示标准输入(standard input)的istream类对象。cin使我们可以从设备读入数据。</li><li>cout，表示标准输出(standard output)的ostream类对象。cout使我们可以向设备输出或者写数据。</li><li>cerr，表示标准错误(standard error)的osttream类对象。cerr是导出程序错误消息的地方，它只能允许向屏幕设备写数据。<ul><li>输出主要由重载的左移操作符（&lt;&lt;）来完成，输入主要由重载的右移操作符(&gt;&gt;)完成:</li></ul></li><li><code>&gt;&gt;a</code>表明将数据放入对象a中；</li><li><code>&lt;&lt;a</code>则是将a对象中存储的数据拿出。</li></ul></li></ul></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span></span><span class="token keyword">int</span> main<span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入你的名字："</span><span class="token punctuation">;</span>    cin<span class="token operator">>></span>name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"Hello World!"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//end为换行符，作用同'\n'</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>标识符必须以字母或下划线开头，且区分大小写；标识符长度一般不超过31个，超过时若前32个一样则会被认为是相同的标识符。</p></li><li><p>const修饰的变量限制了用户将其作为左值进行赋值操作。将其地址传给函数可以进行修改，但是C里边会warning，<strong><em>c++的待尝试</em></strong>。</p></li><li><p>int在16位机为4字节，32/64位机位8字节；long跟int是一样的，long long则是16字节。float为4字节，double为8字节，long double为10字节。进行运算时，float和double会进行四舍五入，而整型则是舍弃小数部分。</p></li><li><p>十进制直接为数字，八进制以’0’开头，十六进制以’0X’或’0x’开头。</p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span></span><span class="token keyword">void</span> main<span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">1.23456789</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"默认下："</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  <span class="token comment">//默认输出进制</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"十进制下："</span><span class="token operator">&lt;&lt;</span>dec<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//输出十进制</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"八进制下："</span><span class="token operator">&lt;&lt;</span>oct<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token comment">//输出八进制</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"十六进制下："</span><span class="token operator">&lt;&lt;</span>hex<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//输出十六进制</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setw</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//输出宽度为10(不足位则右对齐)</span>    cout<span class="token operator">&lt;&lt;</span><span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//输出精度为3(即有效位，默认为6)(四舍五入)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/19/coding%20tips/iostream_control_character.png" alt></p><ol><li><p>类型转换包括隐式转换和显示转换。</p></li><li><p>运算符的优先级</p><ul><li>第一级：小括号【()】、中括号【[]】、分量运算符的指向结构体成员运算符【-&gt;】、结构体成员运算符【.】;</li><li>第二级：逻辑非【!】、按位取反【~】、单目运算【++, —】、负号运算符【-】、类型转换【(ElemType)】、指针运算符和取地址运算符【*, &amp;】、长度运算符【sizeof】、动态存储分配【new, delete】(注：逻辑非高于单目运算);</li><li>第三级：【*, /】、【%】;</li><li>第四级：【+, -】;</li><li>第五级：【&gt;&gt;】、【&lt;&lt;】;</li><li>第六级：【&lt;, &gt;, &lt;=, &gt;=】;</li><li>第七级：【==, !=】;</li><li>第八级：【&amp;】;</li><li>第九级：【^】;</li><li>第十级：【|】;</li><li>第十一级：【&amp;&amp;】;</li><li>第十二级：【||】;</li><li>第十三级：条件/三目运算符【? :】;</li><li>第十四级：(复合)赋值运算符;</li><li>第十五级：【,】;</li></ul></li><li><p><code>do...while</code>和<code>while</code>的区别：前者先进行循环，而后再进行条件的判断，因而最少循环一次；后者则是先进行条件的判断，因此循环可能不进行。</p></li><li><p>函数的属性说明可以缺省，一般为inline(内联函数)、static(静态函数)、virtual(虚函数)、friend(友元函数)等。</p></li><li><p>main函数本身也可以带参数，声明如下：</p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>argc</code>表示命令行中字符串的个数，指针数组<code>argv[]</code>指向命令行中的各个字符串。可以用其他标识符命名，但顺序与参数类型不可改变。</p><ol><li><p>C++中可以对函数中形参进行初始化，调用函数时如果没有对该形参给出对应的实参，则函数将按默认值进行工作。<strong>形参的默认值必须要在声明中指定，而不能在定义中指定，并且默认值的定义必须遵守从右到左的顺序</strong>，即若某个参数没有默认值，则其左侧的参数就不能有默认值。</p></li><li><p>函数重载是指同一个函数名可以对应着多个函数的实现。函数重载又称为函数的多态性，是指同一个函数名对应着多个不同的函数。所谓“不同”是指<strong>这些函数的形参表必须互不相同</strong>，或者是<strong>形参的个数不同</strong>，或者是<strong>形参的类型不同</strong>，或者是<strong>两者都不相同</strong>，否则将无法实现函数重载。重载函数的类型，即<strong>函数的返回类型，可以相同，也可以不同</strong>。但如果<strong>仅仅是返回类型不同而函数名相同、形参表也相同，则是不合法的</strong>。</p></li><li><p><code>C++</code> 中的排序 <code>sort</code> 默认是从小到大排序，如果要从大到小排序，可以重写 <code>comp</code> 函数，类似于 <code>C</code> 中 <code>qsort()</code> 里的 <code>compare()</code> , 实现方法：</p></li></ol><ul><li><p>一维vector</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//第一种写法: lambda表达</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第二种写法：自定义函数对象</span><span class="token keyword">class</span> <span class="token class-name">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  a <span class="token operator">></span> b<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//第三种写法</span><span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">greater</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>多维vector</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token comment">//第一种写法: lambda表达</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>a<span class="token punctuation">,</span> <span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//第二种写法：自定义函数对象</span>    <span class="token keyword">class</span> <span class="token class-name">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> a<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">></span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>vec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ```  # <span class="token operator">&lt;</span>h3<span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&lt;</span>span id<span class="token operator">=</span><span class="token string">"ClassofCpp"</span><span class="token operator">></span>类<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span># <span class="token operator">&lt;</span>h4<span class="token operator">></span> <span class="token number">1.1</span> 从结构体到类<span class="token operator">-</span> 定义一个简单的结构体如下：```cpp    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span></span>    <span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>   <span class="token comment">//定义结构体</span>        <span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token comment">//定义成员变量</span>        <span class="token keyword">int</span> y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> main<span class="token punctuation">&#123;</span>        point pt<span class="token punctuation">;</span>   <span class="token comment">//定义结构体变量</span>        pt<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   <span class="token comment">//引用成员变量并赋值</span>        pt<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"pt.x = "</span><span class="token operator">&lt;&lt;</span>pt<span class="token punctuation">.</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token comment">//输出</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"pt.y = "</span><span class="token operator">&lt;&lt;</span>pt<span class="token punctuation">.</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上述代码实现的功能是输出结体变量的成员变量的值，等效于下面的代码：</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span></span><span class="token keyword">struct</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>   <span class="token comment">//定义结构体</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token comment">//定义成员变量</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token comment">//定义成员函数</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"x = "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token comment">//输出</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"y = "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> main<span class="token punctuation">&#123;</span>    point pt<span class="token punctuation">;</span>       <span class="token comment">//定义结构体变量</span>    pt<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>       <span class="token comment">//引用成员变量并赋值</span>    pt<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    pt<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//引用成员函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>调用结构体函数时，其后的小括号不能缺省！！！</p></blockquote><p>对以上的代码中结构体的定义进行修改，将<code>struct</code>关键字更换为<code>class</code>关键字，完成<strong>从结构体到类的转变</strong>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream.h></span></span><span class="token keyword">class</span> <span class="token class-name">point</span><span class="token punctuation">&#123;</span>    <span class="token comment">//声明类</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>      <span class="token comment">//定义成员变量</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>        <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token comment">//定义成员函数</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"x = "</span><span class="token operator">&lt;&lt;</span>x<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>      <span class="token comment">//输出</span>        cout<span class="token operator">&lt;&lt;</span><span class="token string">"y = "</span><span class="token operator">&lt;&lt;</span>y<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> main<span class="token punctuation">&#123;</span>    point pt<span class="token punctuation">;</span>       <span class="token comment">//定义结构体变量</span>    pt<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>       <span class="token comment">//引用成员变量并赋值</span>    pt<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    pt<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//引用成员函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意，<strong>结构体中的变量默认是公有(public)的</strong>，定义了结构变量则可以对其成员变量进行访问。<br>而<strong>类的变量则默认是私有(private)的</strong>。公有成员在类外可以进行访问，而私有成员只能在类中访问，在类外访问则报错。<br>从这可以看出，结构体和类除了关键字的区别，更重要的是成员访问控制的差异。</p></blockquote><ul><li>类的声明：</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token operator">&lt;</span>ClassName<span class="token operator">></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span><span class="token operator">:</span>        私有函数和数据    <span class="token keyword">public</span><span class="token operator">:</span>        受保护数据和函数<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                      <span class="token comment">//与结构体类似，类的定义也是以分号结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.2 构造函数</p><ul><li>定义类成员变量时不能对其进行初始化，即不能在类中声明变量时手动进行赋值，而是需要借助构造函数来实现。<blockquote><p>构造函数：是在类中定义的一种特殊函数，其<strong>函数名与类名一致</strong>，功能是为类中变量分配空间和初始赋值，不能用关键字进行修饰（void, int等），更不能有return语句。<strong>构造函数同样属于类中的成员函数,可以访问所有成员变量</strong>。</p></blockquote></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">complex</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> real<span class="token punctuation">;</span>                        <span class="token comment">//类的成员变量</span>    <span class="token keyword">double</span> imag<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//声明类的构造函数</span>    <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                       <span class="token comment">//类的成员函数</span>        cout<span class="token operator">&lt;&lt;</span>real<span class="token operator">&lt;&lt;</span><span class="token string">"+"</span><span class="token operator">&lt;&lt;</span>imag<span class="token operator">&lt;&lt;</span><span class="token string">"i"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>complex<span class="token double-colon punctuation">::</span><span class="token function">complex</span><span class="token punctuation">(</span><span class="token keyword">double</span> r<span class="token punctuation">,</span> <span class="token keyword">double</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token comment">//定义类的构造函数</span>    real <span class="token operator">=</span> r<span class="token punctuation">;</span>    imag <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    complex <span class="token function">ops1</span><span class="token punctuation">(</span><span class="token number">1.2</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ops1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在类外对类的成员函数进行定义时需要在函数名前加类名和域运算符”::”,即&lt;类名&gt;::&lt;函数名&gt;(参数表).</p></blockquote><p>1.3 拷贝构造函数</p><ul><li><p>作用：通过<strong>已存在的对象</strong>来对<strong>该类的新对象</strong>进行初始化</p></li><li><p>定义：</p><blockquote><p>类名(类名&amp;对象名){<br>&emsp;&emsp;函数体<br>}</p></blockquote></li></ul><p>1.4 折构函数</p><ul><li>作用：释放分配给成员变量的内存空间</li><li>定义：与构造函数类似，但没有参数表，且函数名前加上“~”.</li></ul><blockquote><p>每个类必须要有折构函数，但大多情况下默认生成的折构函数即可满足需求，当需要在函数体内进行自定义操作时才需要自定义折构函数。通常情况下，<em>构造函数中使用”new”来申请内存空间，折构函数中用”delete”来释放内存</em>。</p></blockquote><p>1.5 友元函数</p><ul><li><p>作用：提供了不同类或对象的成员函数之间、类的成员函数与一般函数之间的共享机制。</p></li><li><p><strong>独立于当前类的外部函数</strong>，可以访问类所有对象的所有成员。</p></li><li><p>定义：</p><blockquote><p>friend &lt;函数类型&gt; &lt;函数名&gt;(参数表);</p></blockquote></li></ul><h1 id="2-继承"><a href="#2-继承" class="headerlink" title=" 2 继承"></a><h3> 2 继承</h3></h1><h1 id="3-iterator迭代器"><a href="#3-iterator迭代器" class="headerlink" title=" 3 iterator迭代器"></a><h3> 3 iterator迭代器</h3></h1><ul><li><p>前向迭代器</p><p>  假设 p 是一个前向迭代器，则 p 支持 ++p，p++，*p 操作，还可以被复制或赋值，可以用 == 和 != 运算符进行比较。此外，两个正向迭代器可以互相赋值。</p></li><li><p>双向迭代器</p><p>  双向迭代器具有正向迭代器的全部功能，除此之外，假设 p 是一个双向迭代器，则还可以进行 —p 或者 p— 操作（即一次向后移动一个位置）。</p></li><li><p>随机访问迭代器</p><p>  随机访问迭代器具有双向迭代器的全部功能。除此之外，假设 p 是一个随机访问迭代器，i 是一个整型变量或常量，则 p 还支持以下操作：</p><ul><li>p+=i：使得 p 往后移动 i 个元素。</li><li>p-=i：使得 p 往前移动 i 个元素。</li><li>p+i：返回 p 后面第 i 个元素的迭代器。</li><li>p-i：返回 p 前面第 i 个元素的迭代器。</li><li>p[i]：返回 p 后面第 i 个元素的引用。</li><li>此外，两个随机访问迭代器 p1、p2 还可以用 &lt;、&gt;、&lt;=、&gt;= 运算符进行比较。另外，表达式 p2-p1 也是有定义的，其返回值表示 p2 所指向元素和 p1 所指向元素的序号之差（也可以说是 p2 和 p1 之间的元素个数减一）。</li></ul></li></ul><p><img src="/2022/03/19/coding%20tips/iterator.png" alt></p><h1 id="4-vector容器"><a href="#4-vector容器" class="headerlink" title=" 4 vector容器"></a><h3> 4 vector容器</h3></h1><p><em>Vector</em>是一个封装了动态大小数组的<strong>顺序</strong>容器(sequence container)，<strong>能够存放任意类型的对象的动态数组</strong>。<em>Vector</em>支持对序列中的任意元素进行快速直接访问，甚至可以通过指针算述进行该操作。提供了在序列末尾相对快速地添加/删除元素的操作。</p><h3 id="4-1-特性"><a href="#4-1-特性" class="headerlink" title=" 4.1 特性"></a><h3> 4.1 特性</h3><ol><li><p>内存自增长：与其他容器不同，其内存空间只会增长，不会减小。对<em>vector</em>，必有<code>vec.capacity() &gt;= vec.size()</code>，前者是容器所能存储的元素个数，后者则是容器内当前存储的元素个数。每当<em>vector</em>容器不得不分配新的存储空间时，会以<strong>加倍当前容量</strong>的分配策略实现重新分配。</p><blockquote><p>reserve()成员可以用来控制容器的预留空间,如<code>reserve(10)</code>则是预留10个元素空间</p></blockquote></li><li><p>释放空间：<code>vector&lt;int&gt;().swap(nums);</code>或<code>nums.swap(vector&lt;int&gt; ());</code></p><blockquote><p>swap()是交换函数，使vector离开其自身的作用域，从而强制释放vector所占的内存空间.<br>如<code>nums</code>为类中成员，则不能把<code>vector&lt;int&gt;().swap(nums);</code>写入折构函数中，而应：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"> <span class="token operator">></span><span class="token keyword">void</span> <span class="token function">clearVector</span><span class="token punctuation">(</span> vector<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> vt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>vector<span class="token operator">&lt;</span>T<span class="token operator">></span> vtTemp<span class="token punctuation">;</span>vtTemp<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>vt<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li></li></ol><h3 id="4-2-基本操作"><a href="#4-2-基本操作" class="headerlink" title=" 4.2 基本操作"></a><h3> 4.2 基本操作</h3><ol><li><p>创建vector对象：<code>vector&lt;int&gt; vec;//一维数组</code><br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<code>vector&lt;vector&lt;int&gt; &gt; vec(n， vector&lt;int&gt;(m));//二维数组,行数为n，列数为m</code></p></li><li><p>尾部插入数字a：<code>vec.push_back(a);</code></p></li><li><p>使用下标访问元素：<code>cout&lt;&lt;vec[i]&lt;&lt;endl;</code>  </p></li><li><p>使用迭代器访问元素</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token comment">//声明一个迭代器，来访问vector容器，作用：遍历或者指向vector容器的元素 </span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>obj<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>obj<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在第i个位置插入元素：<code>vec.insert(vec.begin()+i, a);</code></p></li><li><p>删除尾部元素： <code>vec.pop_back();</code> </p></li><li><p>删除第i个元素： <code>vec.erase(vec.begin()+i);</code> </p></li><li><p>向量大小：<code>vec.size();</code></p></li><li><p>清空： <code>vec.clear();</code></p></li><li><p>排序：<code>sort(vec.begin(), vec.end());//从小到大排序</code></p><blockquote><p>sort()需要头文件<code>#inlcude &lt;algorithm&gt;</code><br>如需从大到小排序，则重定义比较函数<code>bool comp(const int &amp;a, const int &amp;b) return a &gt; b;</code>,并在sort中进行调用<code>sort(vec.begin(),vec.end(),comp)</code></p></blockquote></li><li><p>反转：<code>reverse(vec.begin(), vec.end());</code></p></li></ol><h1 id="5-Map-Set容器"><a href="#5-Map-Set容器" class="headerlink" title=" 5 Map/Set容器"></a><h3> 5 Map/Set容器</h3></h1><ul><li>Map：提供一对一（其中第一个可以称为关键字，<strong>每个关键字只能在map中出现一次</strong>，第二个可能称为该关键字的值）的数据处理能力。map内部自建一颗红黑树(一 种非严格意义上的平衡二叉树)，这颗树具有对数据自动排序的功能。</li></ul><p>5.1 Map操作</p><ol><li>定义：</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>map <span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> map<span class="token punctuation">;</span> <span class="token comment">//创建key为int类型，并拥有相关联的指向string的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>数据的插入</li></ol><ul><li>用insert插入pair数据</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"STRING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用insert插入value_type数据</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"STRING"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>用数组形式插入</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> map<span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"STRING1"</span><span class="token punctuation">;</span>map<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"STRING2"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>多值插入</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>遍历</li></ol><ul><li>迭代器<blockquote><p>迭代器：类似于C里边的指针，用于访问顺序容器和关联容器中的元素. 分为正向迭代器和反向迭代器，前者定义为<code>容器类名::iterator 迭代器名;</code>，后者定义为<code>容器类名::reverse_iterator 迭代器名;</code>。前者为正向遍历，即从容器的<code>begin</code>开始遍历到<code>end</code>，而后者则是从<code>end</code>前一个元素遍历到<code>begin</code>.</p></blockquote></li><li>数组 </li></ul><ol><li>查找</li></ol><ul><li>count: 若存在则返回1，否则返回0</li><li>find: 返回一个迭代器，如果存在则返回该元素所在未知的迭代器，否则返回end函数返回的迭代器</li></ul><ol><li>删除</li></ol><ul><li>采用迭代器进行删除</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token double-colon punctuation">::</span>interator iter<span class="token punctuation">;</span>iter <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>采用关键字进行删除</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> n <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//如果删除了则返回1，否则返回0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除一个范围</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="6-栈"><a href="#6-栈" class="headerlink" title=" 6 栈"></a><h3> 6 栈</h3></h1><h1 id="7-链表-双向"><a href="#7-链表-双向" class="headerlink" title=" 7 链表(双向)"></a><h3> 7 链表(双向)</h3></h1><ol><li>插入：<ul><li><code>insert()</code>: 插入后迭代器位于插入元素的位置上，而原来的迭代器上的元素以及后继节点则均后移一位.<ul><li><code>insert(it, elem)</code>: 在迭代器<code>it</code>的位置上插入新节点，节点元素为<code>elem</code>.</li><li><code>insert(it, n, elem)</code>: 在迭代器<code>it</code>的位置上连续插入<code>n</code>个<code>elem</code>元素.</li></ul></li><li><code>emplace</code>: 直接构造<ul><li><code>emplace_back(elem)</code>: 在链表的末尾插入元素<code>elem</code>.</li><li><code>emplace_front(elem)</code>: 在链表的第一个元素前头插入元素<code>elem</code>.</li><li><code>emplace(it, elem)</code>: 同<code>insert(it, elem)</code>.</li></ul></li></ul></li><li><p>删除：</p><ul><li><code>clear()</code>: 清除链表中的所有元素</li><li><code>remove(val)</code>: 清除链表中所有<code>val</code>的节点</li><li><code>remove_if()</code>: 清楚满足条件的节点</li><li><code>unique()</code>: 清楚链表中相邻位置相同的节点，仅保留第一个节点</li><li><code>erase()</code>: 删除 <code>list</code> 容器中指定位置处的元素(<code>erase(it)</code>)，也可以删除容器中某一段的多个元素(<code>erase(it1, it2)</code>)</li><li><code>pop_back()</code>: 删除链表末尾节点</li><li><p><code>pop_front()</code>: 删除链表起始节点</p><blockquote><p><code>remove_if</code>使用示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">></span>#include <span class="token operator">&lt;</span>iostream<span class="token operator">></span> <span class="token operator">></span>#include <span class="token operator">&lt;</span>list<span class="token operator">></span> <span class="token operator">></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token operator">></span><span class="token keyword">bool</span> <span class="token function">odd</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> l <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>l<span class="token punctuation">.</span><span class="token function">remove_if</span><span class="token punctuation">(</span>odd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ul></li><li>反转/排序：<ul><li><code>sort()</code></li><li><code>reverse()</code></li></ul></li><li>移动：<ul><li><code>advance(it, n)</code>: 将迭代器<code>it</code>后移<code>n</code>位，为负则向前移，无返回值.</li><li><code>prev(it, n)</code>: 与上边的功能类似，<code>n</code>为正则前移，为负则后移，缺省则为<code>1</code>即前移一位， 函数返回的结果为新的迭代器.</li><li><code>next(it, n)</code>: 与<code>advance</code>一致，但与<code>prev</code>一样有返回值.<blockquote><p>这里的移动函数实际上都是<code>STL</code>标准库中的迭代器辅助函数，定义于<code>&lt;iterator&gt;</code>头文件中并位于<code>std</code>命名空间中. <code>advance</code>和<code>next</code>可以采用任意的迭代器，而<code>prev</code>只能用双向迭代器和随机访问迭代器.</p><ul><li>前向迭代器：只可以作<code>it++</code>和<code>++it</code>的操作.</li><li>双向迭代器：除了可以作<code>++it</code>、<code>it++</code>的操作，还可以作<code>--it</code>、<code>it--</code>的操作.</li><li>随机访问迭代器：拥有双向迭代器的功能外，还可以进行<code>it+=n</code>等操作.</li></ul></blockquote></li></ul></li><li>其他：<ul><li><code>distance(p, q)</code>: 返回迭代器<code>p</code>后移多少次后与迭代器<code>q</code>一致。</li><li><code>iter_swap(p, q)</code>: 交换两个迭代器的值.</li></ul></li></ol><h1 id="8-队列"><a href="#8-队列" class="headerlink" title=" 8 队列"></a><h3> 8 队列</h3></h1><ol><li>队列(<code>queue</code>)</li></ol><ol><li>双端队列(<code>deque</code>)</li></ol><p>&emsp;&emsp;<code>deque</code> 可以在常数时间内对队列的队头或队尾进行元素的插入与删除，是一种动态分段空间拼接而成的一种“容器”(<strong>注意是加了双引号</strong>)。</p><p><img src="/2022/03/19/coding%20tips/deque.png" alt></p><ul><li><p>插入：deque可以在队头和队尾插入元素</p><ul><li><code>push_back(elem)</code>: 在队尾加入元素</li><li><code>push_front(elem)</code>: 在队头加入元素</li><li><code>pop_back()</code>: 删除队尾元素</li><li><code>pop_front()</code>: 删除队头元素</li><li><code>insert(pos, elem)</code>: 在<code>pos</code>位置上插入元素并返回其地址</li><li><code>insert(pos, n, elem)</code>: 在<code>pos</code>位置插入<code>n</code>个<code>elem</code>数据</li><li><code>insert(pos,beg,end)</code>: 在<code>pos</code>位置插入<code>[beg,end)</code>区间的数据，无返回值。</li><li><code>clear()</code>: 清空容器的所有数据</li><li><code>erase(beg,end)</code>: 删除<code>[beg,end)</code>区间的数据，返回下一个数据的位置。</li><li><code>erase(pos)</code>: 删除<code>pos</code>位置的数据，返回下一个数据的位置。</li></ul></li><li><p>读取</p><ul><li><code>at(int idx)</code>: 返回索引idx所指的数据</li><li><code>operator[]</code>: 返回索引idx所指的数据</li><li><code>front()</code>: 返回容器中第一个数据元素</li><li><code>back()</code>: 返回容器中最后一个数据元素</li></ul></li><li><p>容量</p><ul><li><code>deque.empty()</code>: 判断容器是否为空</li><li><code>deque.size()</code>: 返回容器中元素的个数</li><li><code>deque.resize(num)</code>: 重新指定容器的长度为<code>num</code>,若容器变长，则以默认值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li><li><code>deque.resize(num, elem)</code>: 重新指定容器的长度为<code>num</code>,若容器变长，则以<code>elem</code>值填充新位置。如果容器变短，则末尾超出容器长度的元素被删除。</li></ul></li></ul><div style="page-break-after: always;"></div><h1 id="Python的目录"><a href="#Python的目录" class="headerlink" title="Python的目录"></a><h2><span id="py">Python的目录</span></h2></h1><h3 id="0-各种基础知识-4"><a href="#0-各种基础知识-4" class="headerlink" title="　0.各种基础知识"></a><h3>　0.<a href="#SomethingforPy">各种基础知识</a></h3><h3 id="1-random"><a href="#1-random" class="headerlink" title="　1.random"></a><h3>　1.<a href="#random">random</a></h3><h1 id="0-各种基础知识-5"><a href="#0-各种基础知识-5" class="headerlink" title="0 各种基础知识"></a><h3><span id="SomethingforPy">0 各种基础知识</span></h3></h1><ol><li><p>pass为空语句，保持程序结构的完整性，不做任何事情，一般用做占位语句。</p></li><li><p>zip()：将对象中的元素打包为一个个tuple，并返回这些tuple所组成的list. 如<code>zip(a, b, c, ...)</code>(a,b,c均为数组)的作用是将每个数组对应位置上的元素打包作为一个向量，如果参数中的对象不等长，则按最短的长度进行”压缩”，超过长度的部分则被舍弃。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'d'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>zip()的逆操作：<br><pre class="line-numbers language-python" data-language="python"><code class="language-python">result <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>origin <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>result<span class="token punctuation">)</span>   <span class="token comment"># 此处*号相当于解包运算符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h1 id="1-random-1"><a href="#1-random-1" class="headerlink" title="1 random"></a><h3><span id="random">1 random</span></h3></h1><ol><li><code>slice = random.sample(list, num)</code>：从列表list中随机抽取num个元素并通过slice返回</li></ol></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h3></h2></h4></h4></h4></h4></h4></h3></h3></h3></h3></h1></h1></h1>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
